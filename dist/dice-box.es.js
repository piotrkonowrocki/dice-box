var ul = Object.defineProperty;
var Yl = (c, l, b) => l in c ? ul(c, l, { enumerable: !0, configurable: !0, writable: !0, value: b }) : c[l] = b;
var F = (c, l, b) => (Yl(c, typeof l != "symbol" ? l + "" : l, b), b), g = (c, l, b) => {
  if (!l.has(c))
    throw TypeError("Cannot " + b);
};
var W = (c, l, b) => (g(c, l, "read from private field"), b ? b.call(c) : l.get(c)), J = (c, l, b) => {
  if (l.has(c))
    throw TypeError("Cannot add the same private member more than once");
  l instanceof WeakSet ? l.add(c) : l.set(c, b);
}, i = (c, l, b, d) => (g(c, l, "write to private field"), d ? d.call(c, b) : l.set(c, b), b);
var H = (c, l, b, d) => ({
  set _(X) {
    i(c, l, X, b);
  },
  get _() {
    return W(c, l, d);
  }
}), v = (c, l, b) => (g(c, l, "access private method"), b);
function Jl(c) {
  const { selector: l, id: b } = c;
  let d = document.body, X = document.createElement("canvas");
  if (X.id = b, X.classList.add("dice-box-canvas"), l) {
    if (typeof l != "string")
      throw new Error("You must provide a DOM selector as the first argument in order to render the Dice Box");
    if (d = document.querySelector(l), !(d != null && d.nodeName))
      throw new Error(`DiceBox target DOM node: '${l}' not found or not available yet. Try invoking inside a DOMContentLoaded event`);
  }
  return d.appendChild(X), X;
}
const ml = "KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHZ0KF8sdCxkKXtyZXR1cm4gXyooMS1kKSt0KmR9dmFyICR0PXR5cGVvZiBkb2N1bWVudDwidSImJmRvY3VtZW50LmN1cnJlbnRTY3JpcHQ/ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM6dm9pZCAwO3R5cGVvZiBfX2ZpbGVuYW1lPCJ1IiYmKCR0PSR0fHxfX2ZpbGVuYW1lKTtmdW5jdGlvbiB2bChfKXtfPV98fHt9O3ZhciB0O3R8fCh0PXR5cGVvZiBfPCJ1Ij9fOnt9KTt2YXIgZDt0LnJlYWR5PW5ldyBQcm9taXNlKGZ1bmN0aW9uKGUpe2Q9ZX0pO3ZhciBXPXt9LGY7Zm9yKGYgaW4gdCl0Lmhhc093blByb3BlcnR5KGYpJiYoV1tmXT10W2ZdKTt2YXIgdz0hMSxZPSExLFU9ITEsVj0hMTt3PXR5cGVvZiB3aW5kb3c9PSJvYmplY3QiLFk9dHlwZW9mIGltcG9ydFNjcmlwdHM9PSJmdW5jdGlvbiIsVT10eXBlb2YgcHJvY2Vzcz09Im9iamVjdCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zPT0ib2JqZWN0IiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZT09InN0cmluZyIsVj0hdyYmIVUmJiFZO3ZhciB2PSIiLEIseixtdCxHO1U/KHY9WT9yZXF1aXJlKCJwYXRoIikuZGlybmFtZSh2KSsiLyI6X19kaXJuYW1lKyIvIixCPWZ1bmN0aW9uKGUsbyl7cmV0dXJuIG10fHwobXQ9cmVxdWlyZSgiZnMiKSksR3x8KEc9cmVxdWlyZSgicGF0aCIpKSxlPUcubm9ybWFsaXplKGUpLG10LnJlYWRGaWxlU3luYyhlLG8/bnVsbDoidXRmOCIpfSx6PWZ1bmN0aW9uKGUpe3JldHVybiBlPUIoZSwhMCksZS5idWZmZXJ8fChlPW5ldyBVaW50OEFycmF5KGUpKSxRdChlLmJ1ZmZlciksZX0sMTxwcm9jZXNzLmFyZ3YubGVuZ3RoJiZwcm9jZXNzLmFyZ3ZbMV0ucmVwbGFjZSgvXFwvZywiLyIpLHByb2Nlc3MuYXJndi5zbGljZSgyKSxwcm9jZXNzLm9uKCJ1bmNhdWdodEV4Y2VwdGlvbiIsZnVuY3Rpb24oZSl7dGhyb3cgZX0pLHByb2Nlc3Mub24oInVuaGFuZGxlZFJlamVjdGlvbiIscXQpLHQuaW5zcGVjdD1mdW5jdGlvbigpe3JldHVybiJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XSJ9KTpWPyh0eXBlb2YgcmVhZDwidSImJihCPWZ1bmN0aW9uKGUpe3JldHVybiByZWFkKGUpfSksej1mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIHJlYWRidWZmZXI9PSJmdW5jdGlvbiI/bmV3IFVpbnQ4QXJyYXkocmVhZGJ1ZmZlcihlKSk6KGU9cmVhZChlLCJiaW5hcnkiKSxRdCh0eXBlb2YgZT09Im9iamVjdCIpLGUpfSx0eXBlb2YgcHJpbnQ8InUiJiYodHlwZW9mIGNvbnNvbGU+InUiJiYoY29uc29sZT17fSksY29uc29sZS5sb2c9cHJpbnQsY29uc29sZS53YXJuPWNvbnNvbGUuZXJyb3I9dHlwZW9mIHByaW50RXJyPCJ1Ij9wcmludEVycjpwcmludCkpOih3fHxZKSYmKFk/dj1zZWxmLmxvY2F0aW9uLmhyZWY6ZG9jdW1lbnQuY3VycmVudFNjcmlwdCYmKHY9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpLCR0JiYodj0kdCksdj12LmluZGV4T2YoImJsb2I6IikhPT0wP3Yuc3Vic3RyKDAsdi5sYXN0SW5kZXhPZigiLyIpKzEpOiIiLEI9ZnVuY3Rpb24oZSl7dmFyIG89bmV3IFhNTEh0dHBSZXF1ZXN0O3JldHVybiBvLm9wZW4oIkdFVCIsZSwhMSksby5zZW5kKG51bGwpLG8ucmVzcG9uc2VUZXh0fSxZJiYoej1mdW5jdGlvbihlKXt2YXIgbz1uZXcgWE1MSHR0cFJlcXVlc3Q7cmV0dXJuIG8ub3BlbigiR0VUIixlLCExKSxvLnJlc3BvbnNlVHlwZT0iYXJyYXlidWZmZXIiLG8uc2VuZChudWxsKSxuZXcgVWludDhBcnJheShvLnJlc3BvbnNlKX0pKTt2YXIgUnQ9dC5wcmludHx8Y29uc29sZS5sb2cuYmluZChjb25zb2xlKSxudD10LnByaW50RXJyfHxjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtmb3IoZiBpbiBXKVcuaGFzT3duUHJvcGVydHkoZikmJih0W2ZdPVdbZl0pO1c9bnVsbDt2YXIgWXQ9W10sYnQsbHQ7dC53YXNtQmluYXJ5JiYobHQ9dC53YXNtQmluYXJ5KSx0Lm5vRXhpdFJ1bnRpbWUmJnQubm9FeGl0UnVudGltZSx0eXBlb2YgV2ViQXNzZW1ibHkhPSJvYmplY3QiJiZudCgibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZCIpO3ZhciBWdCxTdD1uZXcgV2ViQXNzZW1ibHkuVGFibGUoe2luaXRpYWw6NDc1LGVsZW1lbnQ6ImFueWZ1bmMifSksbmU9ITE7ZnVuY3Rpb24gUXQoZSxvKXtlfHxxdCgiQXNzZXJ0aW9uIGZhaWxlZDogIitvKX12YXIgZ3QsRXQsWHQsTnQscmUsSXQ9dC5JTklUSUFMX01FTU9SWXx8NjcxMDg4NjQ7KFZ0PXQud2FzbU1lbW9yeT90Lndhc21NZW1vcnk6bmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7aW5pdGlhbDpJdC82NTUzNixtYXhpbXVtOkl0LzY1NTM2fSkpJiYoZ3Q9VnQuYnVmZmVyKSxJdD1ndC5ieXRlTGVuZ3RoO3ZhciBldD1ndDtndD1ldCx0LkhFQVA4PW5ldyBJbnQ4QXJyYXkoZXQpLHQuSEVBUDE2PW5ldyBJbnQxNkFycmF5KGV0KSx0LkhFQVAzMj1YdD1uZXcgSW50MzJBcnJheShldCksdC5IRUFQVTg9RXQ9bmV3IFVpbnQ4QXJyYXkoZXQpLHQuSEVBUFUxNj1uZXcgVWludDE2QXJyYXkoZXQpLHQuSEVBUFUzMj1uZXcgVWludDMyQXJyYXkoZXQpLHQuSEVBUEYzMj1OdD1uZXcgRmxvYXQzMkFycmF5KGV0KSx0LkhFQVBGNjQ9cmU9bmV3IEZsb2F0NjRBcnJheShldCksWHRbNDQ5Ml09NTI2MTAwODtmdW5jdGlvbiB6dChlKXtmb3IoOzA8ZS5sZW5ndGg7KXt2YXIgbz1lLnNoaWZ0KCk7aWYodHlwZW9mIG89PSJmdW5jdGlvbiIpbyh0KTtlbHNle3ZhciBuPW8uaGk7dHlwZW9mIG49PSJudW1iZXIiP28uY2k9PT12b2lkIDA/dC5keW5DYWxsX3Yobik6dC5keW5DYWxsX3ZpKG4sby5jaSk6bihvLmNpPT09dm9pZCAwP251bGw6by5jaSl9fX12YXIgX2U9W10saWU9W10sTXQ9W10sVGU9W10sRmU9ITE7ZnVuY3Rpb24gRmwoKXt2YXIgZT10LnByZVJ1bi5zaGlmdCgpO19lLnVuc2hpZnQoZSl9dmFyIFV0PTAsS3Q9bnVsbDt0LnByZWxvYWRlZEltYWdlcz17fSx0LnByZWxvYWRlZEF1ZGlvcz17fTtmdW5jdGlvbiBxdChlKXt0aHJvdyB0Lm9uQWJvcnQmJnQub25BYm9ydChlKSxlKz0iIixSdChlKSxudChlKSxuZT0hMCxuZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKCJhYm9ydCgiK2UrIikuIEJ1aWxkIHdpdGggLXMgQVNTRVJUSU9OUz0xIGZvciBtb3JlIGluZm8uIil9ZnVuY3Rpb24gZGUoZSl7dmFyIG89QXQ7cmV0dXJuIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aD9vLnN0YXJ0c1dpdGgoZSk6by5pbmRleE9mKGUpPT09MH1mdW5jdGlvbiBNZSgpe3JldHVybiBkZSgiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LCIpfXZhciBBdD0iYW1tby53YXNtLndhc20iO2lmKCFNZSgpKXt2YXIgQWU9QXQ7QXQ9dC5sb2NhdGVGaWxlP3QubG9jYXRlRmlsZShBZSx2KTp2K0FlfWZ1bmN0aW9uIHdlKCl7dHJ5e2lmKGx0KXJldHVybiBuZXcgVWludDhBcnJheShsdCk7aWYoeilyZXR1cm4geihBdCk7dGhyb3ciYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWQifWNhdGNoKGUpe3F0KGUpfX1mdW5jdGlvbiBNbCgpe3JldHVybiBsdHx8IXcmJiFZfHx0eXBlb2YgZmV0Y2ghPSJmdW5jdGlvbiJ8fGRlKCJmaWxlOi8vIik/bmV3IFByb21pc2UoZnVuY3Rpb24oZSl7ZSh3ZSgpKX0pOmZldGNoKEF0LHtjcmVkZW50aWFsczoic2FtZS1vcmlnaW4ifSkudGhlbihmdW5jdGlvbihlKXtpZighZS5vayl0aHJvdyJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICciK0F0KyInIjtyZXR1cm4gZS5hcnJheUJ1ZmZlcigpfSkuY2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gd2UoKX0pfXZhciBBbD17MTM3NjpmdW5jdGlvbihlLG8sbixyLGMsRCxaLGh0KXtpZihlPXQuZ2V0Q2FjaGUodC5Db25jcmV0ZUNvbnRhY3RSZXN1bHRDYWxsYmFjaylbZV0sIWUuaGFzT3duUHJvcGVydHkoImFkZFNpbmdsZVJlc3VsdCIpKXRocm93ImEgSlNJbXBsZW1lbnRhdGlvbiBtdXN0IGltcGxlbWVudCBhbGwgZnVuY3Rpb25zLCB5b3UgZm9yZ290IENvbmNyZXRlQ29udGFjdFJlc3VsdENhbGxiYWNrOjphZGRTaW5nbGVSZXN1bHQuIjtyZXR1cm4gZS5hZGRTaW5nbGVSZXN1bHQobyxuLHIsYyxELFosaHQpfX07aWUucHVzaCh7aGk6ZnVuY3Rpb24oKXtMZSgpfX0pO3ZhciBXZT1bXSx3bD17ZTpmdW5jdGlvbigpe3F0KCl9LGI6ZnVuY3Rpb24oZSxvLG4pe1dlLmxlbmd0aD0wO3ZhciByO2ZvcihuPj49MjtyPUV0W28rK107KVdlLnB1c2goMTA1PnI/cmVbKytuPj4xXTpYdFtuXSksKytuO3JldHVybiBBbFtlXS5hcHBseShudWxsLFdlKX0sYzpmdW5jdGlvbihlLG8sbil7RXQuY29weVdpdGhpbihlLG8sbytuKX0sZDpmdW5jdGlvbigpe3F0KCJPT00iKX0sYTpmdW5jdGlvbihlKXt2YXIgbz1EYXRlLm5vdygpO3JldHVybiBYdFtlPj4yXT1vLzFlM3wwLFh0W2UrND4+Ml09byUxZTMqMWUzfDAsMH0sbWVtb3J5OlZ0LHRhYmxlOlN0fTsoZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGMpe3QuYXNtPWMuZXhwb3J0cyxVdC0tLHQubW9uaXRvclJ1bkRlcGVuZGVuY2llcyYmdC5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKFV0KSxVdD09MCYmS3QmJihjPUt0LEt0PW51bGwsYygpKX1mdW5jdGlvbiBvKGMpe2UoYy5pbnN0YW5jZSl9ZnVuY3Rpb24gbihjKXtyZXR1cm4gTWwoKS50aGVuKGZ1bmN0aW9uKEQpe3JldHVybiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShELHIpfSkudGhlbihjLGZ1bmN0aW9uKEQpe250KCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiAiK0QpLHF0KEQpfSkuY2F0Y2goRD0+e2NvbnNvbGUuZXJyb3IoImVycm9yIixEKSxjb25zb2xlLmVycm9yKGBBbW1vIGZpbGUgJyR7QXR9JyBub3QgZm91bmQuIFRoaXMgaXMgcmVxdWlyZWQgdG8gcnVuIHRoZSBwaHlzaWNzIHNpbXVsYXRpb24uIElzIHlvdXIgJ2Fzc2V0UGF0aCcgY29uZmlnIG9wdGlvbiBjb3JyZWN0IGFuZCBpcyB0aGVyZSBhbiAnYW1tbycgZm9sZGVyIHdpdGggdGhlICdhbW1vLndhc20ud2FzbScgZmlsZT8gRW5zdXJlIHlvdXIgc2VydmVyIGhhcyB0aGUgcHJvcGVyIG1pbWUgdHlwZSBmb3IgJy53YXNtJyBmaWxlcy5gKX0pfXZhciByPXthOndsfTtpZihVdCsrLHQubW9uaXRvclJ1bkRlcGVuZGVuY2llcyYmdC5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKFV0KSx0Lmluc3RhbnRpYXRlV2FzbSl0cnl7cmV0dXJuIHQuaW5zdGFudGlhdGVXYXNtKHIsZSl9Y2F0Y2goYyl7cmV0dXJuIG50KCJNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiAiK2MpLCExfXJldHVybiBmdW5jdGlvbigpe2lmKGx0fHx0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmchPSJmdW5jdGlvbiJ8fE1lKCl8fGRlKCJmaWxlOi8vIil8fHR5cGVvZiBmZXRjaCE9ImZ1bmN0aW9uIilyZXR1cm4gbihvKTtmZXRjaChBdCx7Y3JlZGVudGlhbHM6InNhbWUtb3JpZ2luIn0pLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGMscikudGhlbihvLGZ1bmN0aW9uKEQpe3JldHVybiBudCgid2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6ICIrRCksbnQoImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uIiksbihvKX0pfSl9KCkse319KSgpO3ZhciBMZT10Ll9fX3dhc21fY2FsbF9jdG9ycz1mdW5jdGlvbigpe3JldHVybihMZT10Ll9fX3dhc21fY2FsbF9jdG9ycz10LmFzbS5mKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3QuX19fZW1fanNfX2FycmF5X2JvdW5kc19jaGVja19lcnJvcj1mdW5jdGlvbigpe3JldHVybih0Ll9fX2VtX2pzX19hcnJheV9ib3VuZHNfY2hlY2tfZXJyb3I9dC5hc20uZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIga2U9dC5fZWJfYnRDb2xsaXNpb25Xb3JsZF9nZXREaXNwYXRjaGVyXzA9ZnVuY3Rpb24oKXtyZXR1cm4oa2U9dC5fZWJfYnRDb2xsaXNpb25Xb3JsZF9nZXREaXNwYXRjaGVyXzA9dC5hc20uaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxIZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX2dldFBhaXJDYWNoZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKEhlPXQuX2ViX2J0Q29sbGlzaW9uV29ybGRfZ2V0UGFpckNhY2hlXzA9dC5hc20uaSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxZZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX2dldERpc3BhdGNoSW5mb18wPWZ1bmN0aW9uKCl7cmV0dXJuKFllPXQuX2ViX2J0Q29sbGlzaW9uV29ybGRfZ2V0RGlzcGF0Y2hJbmZvXzA9dC5hc20uaikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxWZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX2FkZENvbGxpc2lvbk9iamVjdF8xPWZ1bmN0aW9uKCl7cmV0dXJuKFZlPXQuX2ViX2J0Q29sbGlzaW9uV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzE9dC5hc20uaykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxRZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX2FkZENvbGxpc2lvbk9iamVjdF8yPWZ1bmN0aW9uKCl7cmV0dXJuKFFlPXQuX2ViX2J0Q29sbGlzaW9uV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzI9dC5hc20ubCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX2FkZENvbGxpc2lvbk9iamVjdF8zPWZ1bmN0aW9uKCl7cmV0dXJuKEVlPXQuX2ViX2J0Q29sbGlzaW9uV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzM9dC5hc20ubSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxYZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX3JlbW92ZUNvbGxpc2lvbk9iamVjdF8xPWZ1bmN0aW9uKCl7cmV0dXJuKFhlPXQuX2ViX2J0Q29sbGlzaW9uV29ybGRfcmVtb3ZlQ29sbGlzaW9uT2JqZWN0XzE9dC5hc20ubikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxVZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX2dldEJyb2FkcGhhc2VfMD1mdW5jdGlvbigpe3JldHVybihVZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX2dldEJyb2FkcGhhc2VfMD10LmFzbS5vKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEdlPXQuX2ViX2J0Q29sbGlzaW9uV29ybGRfY29udmV4U3dlZXBUZXN0XzU9ZnVuY3Rpb24oKXtyZXR1cm4oR2U9dC5fZWJfYnRDb2xsaXNpb25Xb3JsZF9jb252ZXhTd2VlcFRlc3RfNT10LmFzbS5wKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE5lPXQuX2ViX2J0Q29sbGlzaW9uV29ybGRfY29udGFjdFBhaXJUZXN0XzM9ZnVuY3Rpb24oKXtyZXR1cm4oTmU9dC5fZWJfYnRDb2xsaXNpb25Xb3JsZF9jb250YWN0UGFpclRlc3RfMz10LmFzbS5xKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHplPXQuX2ViX2J0Q29sbGlzaW9uV29ybGRfY29udGFjdFRlc3RfMj1mdW5jdGlvbigpe3JldHVybih6ZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX2NvbnRhY3RUZXN0XzI9dC5hc20ucikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxxZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX3VwZGF0ZVNpbmdsZUFhYmJfMT1mdW5jdGlvbigpe3JldHVybihxZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX3VwZGF0ZVNpbmdsZUFhYmJfMT10LmFzbS5zKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFplPXQuX2ViX2J0Q29sbGlzaW9uV29ybGRfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihaZT10Ll9lYl9idENvbGxpc2lvbldvcmxkX19fZGVzdHJveV9fXzA9dC5hc20udCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxLZT10Ll9lYl9idFF1YWRXb3JkX3hfMD1mdW5jdGlvbigpe3JldHVybihLZT10Ll9lYl9idFF1YWRXb3JkX3hfMD10LmFzbS51KS5hcHBseShudWxsLGFyZ3VtZW50cyl9LCRlPXQuX2ViX2J0UXVhZFdvcmRfeV8wPWZ1bmN0aW9uKCl7cmV0dXJuKCRlPXQuX2ViX2J0UXVhZFdvcmRfeV8wPXQuYXNtLnYpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sSmU9dC5fZWJfYnRRdWFkV29yZF96XzA9ZnVuY3Rpb24oKXtyZXR1cm4oSmU9dC5fZWJfYnRRdWFkV29yZF96XzA9dC5hc20udykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx0bz10Ll9lYl9idFF1YWRXb3JkX3dfMD1mdW5jdGlvbigpe3JldHVybih0bz10Ll9lYl9idFF1YWRXb3JkX3dfMD10LmFzbS54KS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGVvPXQuX2ViX2J0UXVhZFdvcmRfc2V0WF8xPWZ1bmN0aW9uKCl7cmV0dXJuKGVvPXQuX2ViX2J0UXVhZFdvcmRfc2V0WF8xPXQuYXNtLnkpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sb289dC5fZWJfYnRRdWFkV29yZF9zZXRZXzE9ZnVuY3Rpb24oKXtyZXR1cm4ob289dC5fZWJfYnRRdWFkV29yZF9zZXRZXzE9dC5hc20ueikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxubz10Ll9lYl9idFF1YWRXb3JkX3NldFpfMT1mdW5jdGlvbigpe3JldHVybihubz10Ll9lYl9idFF1YWRXb3JkX3NldFpfMT10LmFzbS5BKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHJvPXQuX2ViX2J0UXVhZFdvcmRfc2V0V18xPWZ1bmN0aW9uKCl7cmV0dXJuKHJvPXQuX2ViX2J0UXVhZFdvcmRfc2V0V18xPXQuYXNtLkIpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sX289dC5fZWJfYnRRdWFkV29yZF9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKF9vPXQuX2ViX2J0UXVhZFdvcmRfX19kZXN0cm95X19fMD10LmFzbS5DKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGlvPXQuX2ViX2J0TW90aW9uU3RhdGVfZ2V0V29ybGRUcmFuc2Zvcm1fMT1mdW5jdGlvbigpe3JldHVybihpbz10Ll9lYl9idE1vdGlvblN0YXRlX2dldFdvcmxkVHJhbnNmb3JtXzE9dC5hc20uRCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxhbz10Ll9lYl9idE1vdGlvblN0YXRlX3NldFdvcmxkVHJhbnNmb3JtXzE9ZnVuY3Rpb24oKXtyZXR1cm4oYW89dC5fZWJfYnRNb3Rpb25TdGF0ZV9zZXRXb3JsZFRyYW5zZm9ybV8xPXQuYXNtLkUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sc289dC5fZWJfYnRNb3Rpb25TdGF0ZV9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKHNvPXQuX2ViX2J0TW90aW9uU3RhdGVfX19kZXN0cm95X19fMD10LmFzbS5GKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHBvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X3NldEFuaXNvdHJvcGljRnJpY3Rpb25fMj1mdW5jdGlvbigpe3JldHVybihwbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9zZXRBbmlzb3Ryb3BpY0ZyaWN0aW9uXzI9dC5hc20uRykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxsbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9nZXRDb2xsaXNpb25TaGFwZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKGxvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2dldENvbGxpc2lvblNoYXBlXzA9dC5hc20uSCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx1bz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9zZXRDb250YWN0UHJvY2Vzc2luZ1RocmVzaG9sZF8xPWZ1bmN0aW9uKCl7cmV0dXJuKHVvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X3NldENvbnRhY3RQcm9jZXNzaW5nVGhyZXNob2xkXzE9dC5hc20uSSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxjbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9zZXRBY3RpdmF0aW9uU3RhdGVfMT1mdW5jdGlvbigpe3JldHVybihjbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9zZXRBY3RpdmF0aW9uU3RhdGVfMT10LmFzbS5KKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHlvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2ZvcmNlQWN0aXZhdGlvblN0YXRlXzE9ZnVuY3Rpb24oKXtyZXR1cm4oeW89dC5fZWJfYnRDb2xsaXNpb25PYmplY3RfZm9yY2VBY3RpdmF0aW9uU3RhdGVfMT10LmFzbS5LKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGhvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2FjdGl2YXRlXzA9ZnVuY3Rpb24oKXtyZXR1cm4oaG89dC5fZWJfYnRDb2xsaXNpb25PYmplY3RfYWN0aXZhdGVfMD10LmFzbS5MKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGZvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2FjdGl2YXRlXzE9ZnVuY3Rpb24oKXtyZXR1cm4oZm89dC5fZWJfYnRDb2xsaXNpb25PYmplY3RfYWN0aXZhdGVfMT10LmFzbS5NKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LG1vPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2lzQWN0aXZlXzA9ZnVuY3Rpb24oKXtyZXR1cm4obW89dC5fZWJfYnRDb2xsaXNpb25PYmplY3RfaXNBY3RpdmVfMD10LmFzbS5OKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGJvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2lzS2luZW1hdGljT2JqZWN0XzA9ZnVuY3Rpb24oKXtyZXR1cm4oYm89dC5fZWJfYnRDb2xsaXNpb25PYmplY3RfaXNLaW5lbWF0aWNPYmplY3RfMD10LmFzbS5PKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGdvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2lzU3RhdGljT2JqZWN0XzA9ZnVuY3Rpb24oKXtyZXR1cm4oZ289dC5fZWJfYnRDb2xsaXNpb25PYmplY3RfaXNTdGF0aWNPYmplY3RfMD10LmFzbS5QKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFdvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2lzU3RhdGljT3JLaW5lbWF0aWNPYmplY3RfMD1mdW5jdGlvbigpe3JldHVybihXbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9pc1N0YXRpY09yS2luZW1hdGljT2JqZWN0XzA9dC5hc20uUSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9nZXRSZXN0aXR1dGlvbl8wPWZ1bmN0aW9uKCl7cmV0dXJuKENvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2dldFJlc3RpdHV0aW9uXzA9dC5hc20uUikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxqbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9nZXRGcmljdGlvbl8wPWZ1bmN0aW9uKCl7cmV0dXJuKGpvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2dldEZyaWN0aW9uXzA9dC5hc20uUykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx2bz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9nZXRSb2xsaW5nRnJpY3Rpb25fMD1mdW5jdGlvbigpe3JldHVybih2bz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9nZXRSb2xsaW5nRnJpY3Rpb25fMD10LmFzbS5UKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LERvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X3NldFJlc3RpdHV0aW9uXzE9ZnVuY3Rpb24oKXtyZXR1cm4oRG89dC5fZWJfYnRDb2xsaXNpb25PYmplY3Rfc2V0UmVzdGl0dXRpb25fMT10LmFzbS5VKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFJvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X3NldEZyaWN0aW9uXzE9ZnVuY3Rpb24oKXtyZXR1cm4oUm89dC5fZWJfYnRDb2xsaXNpb25PYmplY3Rfc2V0RnJpY3Rpb25fMT10LmFzbS5WKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFNvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X3NldFJvbGxpbmdGcmljdGlvbl8xPWZ1bmN0aW9uKCl7cmV0dXJuKFNvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X3NldFJvbGxpbmdGcmljdGlvbl8xPXQuYXNtLlcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sSW89dC5fZWJfYnRDb2xsaXNpb25PYmplY3RfZ2V0V29ybGRUcmFuc2Zvcm1fMD1mdW5jdGlvbigpe3JldHVybihJbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9nZXRXb3JsZFRyYW5zZm9ybV8wPXQuYXNtLlgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQm89dC5fZWJfYnRDb2xsaXNpb25PYmplY3RfZ2V0Q29sbGlzaW9uRmxhZ3NfMD1mdW5jdGlvbigpe3JldHVybihCbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9nZXRDb2xsaXNpb25GbGFnc18wPXQuYXNtLlkpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sT289dC5fZWJfYnRDb2xsaXNpb25PYmplY3Rfc2V0Q29sbGlzaW9uRmxhZ3NfMT1mdW5jdGlvbigpe3JldHVybihPbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9zZXRDb2xsaXNpb25GbGFnc18xPXQuYXNtLlopLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUG89dC5fZWJfYnRDb2xsaXNpb25PYmplY3Rfc2V0V29ybGRUcmFuc2Zvcm1fMT1mdW5jdGlvbigpe3JldHVybihQbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9zZXRXb3JsZFRyYW5zZm9ybV8xPXQuYXNtLl8pLmFwcGx5KG51bGwsYXJndW1lbnRzKX0seG89dC5fZWJfYnRDb2xsaXNpb25PYmplY3Rfc2V0Q29sbGlzaW9uU2hhcGVfMT1mdW5jdGlvbigpe3JldHVybih4bz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9zZXRDb2xsaXNpb25TaGFwZV8xPXQuYXNtLiQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sVG89dC5fZWJfYnRDb2xsaXNpb25PYmplY3Rfc2V0Q2NkTW90aW9uVGhyZXNob2xkXzE9ZnVuY3Rpb24oKXtyZXR1cm4oVG89dC5fZWJfYnRDb2xsaXNpb25PYmplY3Rfc2V0Q2NkTW90aW9uVGhyZXNob2xkXzE9dC5hc20uYWEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRm89dC5fZWJfYnRDb2xsaXNpb25PYmplY3Rfc2V0Q2NkU3dlcHRTcGhlcmVSYWRpdXNfMT1mdW5jdGlvbigpe3JldHVybihGbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9zZXRDY2RTd2VwdFNwaGVyZVJhZGl1c18xPXQuYXNtLmJhKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE1vPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2dldFVzZXJJbmRleF8wPWZ1bmN0aW9uKCl7cmV0dXJuKE1vPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2dldFVzZXJJbmRleF8wPXQuYXNtLmNhKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEFvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X3NldFVzZXJJbmRleF8xPWZ1bmN0aW9uKCl7cmV0dXJuKEFvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X3NldFVzZXJJbmRleF8xPXQuYXNtLmRhKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHdvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2dldFVzZXJQb2ludGVyXzA9ZnVuY3Rpb24oKXtyZXR1cm4od289dC5fZWJfYnRDb2xsaXNpb25PYmplY3RfZ2V0VXNlclBvaW50ZXJfMD10LmFzbS5lYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxMbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9zZXRVc2VyUG9pbnRlcl8xPWZ1bmN0aW9uKCl7cmV0dXJuKExvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X3NldFVzZXJQb2ludGVyXzE9dC5hc20uZmEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sa289dC5fZWJfYnRDb2xsaXNpb25PYmplY3RfZ2V0QnJvYWRwaGFzZUhhbmRsZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKGtvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X2dldEJyb2FkcGhhc2VIYW5kbGVfMD10LmFzbS5nYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxIbz10Ll9lYl9idENvbGxpc2lvbk9iamVjdF9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKEhvPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0X19fZGVzdHJveV9fXzA9dC5hc20uaGEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sWW89dC5fZWJfQ29udGFjdFJlc3VsdENhbGxiYWNrX2FkZFNpbmdsZVJlc3VsdF83PWZ1bmN0aW9uKCl7cmV0dXJuKFlvPXQuX2ViX0NvbnRhY3RSZXN1bHRDYWxsYmFja19hZGRTaW5nbGVSZXN1bHRfNz10LmFzbS5pYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxWbz10Ll9lYl9Db250YWN0UmVzdWx0Q2FsbGJhY2tfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihWbz10Ll9lYl9Db250YWN0UmVzdWx0Q2FsbGJhY2tfX19kZXN0cm95X19fMD10LmFzbS5qYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxRbz10Ll9lYl9Db252ZXhSZXN1bHRDYWxsYmFja19oYXNIaXRfMD1mdW5jdGlvbigpe3JldHVybihRbz10Ll9lYl9Db252ZXhSZXN1bHRDYWxsYmFja19oYXNIaXRfMD10LmFzbS5rYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFbz10Ll9lYl9Db252ZXhSZXN1bHRDYWxsYmFja19nZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cF8wPWZ1bmN0aW9uKCl7cmV0dXJuKEVvPXQuX2ViX0NvbnZleFJlc3VsdENhbGxiYWNrX2dldF9tX2NvbGxpc2lvbkZpbHRlckdyb3VwXzA9dC5hc20ubGEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sWG89dC5fZWJfQ29udmV4UmVzdWx0Q2FsbGJhY2tfc2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXBfMT1mdW5jdGlvbigpe3JldHVybihYbz10Ll9lYl9Db252ZXhSZXN1bHRDYWxsYmFja19zZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cF8xPXQuYXNtLm1hKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFVvPXQuX2ViX0NvbnZleFJlc3VsdENhbGxiYWNrX2dldF9tX2NvbGxpc2lvbkZpbHRlck1hc2tfMD1mdW5jdGlvbigpe3JldHVybihVbz10Ll9lYl9Db252ZXhSZXN1bHRDYWxsYmFja19nZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrXzA9dC5hc20ubmEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sR289dC5fZWJfQ29udmV4UmVzdWx0Q2FsbGJhY2tfc2V0X21fY29sbGlzaW9uRmlsdGVyTWFza18xPWZ1bmN0aW9uKCl7cmV0dXJuKEdvPXQuX2ViX0NvbnZleFJlc3VsdENhbGxiYWNrX3NldF9tX2NvbGxpc2lvbkZpbHRlck1hc2tfMT10LmFzbS5vYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxObz10Ll9lYl9Db252ZXhSZXN1bHRDYWxsYmFja19nZXRfbV9jbG9zZXN0SGl0RnJhY3Rpb25fMD1mdW5jdGlvbigpe3JldHVybihObz10Ll9lYl9Db252ZXhSZXN1bHRDYWxsYmFja19nZXRfbV9jbG9zZXN0SGl0RnJhY3Rpb25fMD10LmFzbS5wYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx6bz10Ll9lYl9Db252ZXhSZXN1bHRDYWxsYmFja19zZXRfbV9jbG9zZXN0SGl0RnJhY3Rpb25fMT1mdW5jdGlvbigpe3JldHVybih6bz10Ll9lYl9Db252ZXhSZXN1bHRDYWxsYmFja19zZXRfbV9jbG9zZXN0SGl0RnJhY3Rpb25fMT10LmFzbS5xYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxxbz10Ll9lYl9Db252ZXhSZXN1bHRDYWxsYmFja19fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKHFvPXQuX2ViX0NvbnZleFJlc3VsdENhbGxiYWNrX19fZGVzdHJveV9fXzA9dC5hc20ucmEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sWm89dC5fZWJfYnRDb2xsaXNpb25TaGFwZV9zZXRMb2NhbFNjYWxpbmdfMT1mdW5jdGlvbigpe3JldHVybihabz10Ll9lYl9idENvbGxpc2lvblNoYXBlX3NldExvY2FsU2NhbGluZ18xPXQuYXNtLnNhKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEtvPXQuX2ViX2J0Q29sbGlzaW9uU2hhcGVfZ2V0TG9jYWxTY2FsaW5nXzA9ZnVuY3Rpb24oKXtyZXR1cm4oS289dC5fZWJfYnRDb2xsaXNpb25TaGFwZV9nZXRMb2NhbFNjYWxpbmdfMD10LmFzbS50YSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSwkbz10Ll9lYl9idENvbGxpc2lvblNoYXBlX2NhbGN1bGF0ZUxvY2FsSW5lcnRpYV8yPWZ1bmN0aW9uKCl7cmV0dXJuKCRvPXQuX2ViX2J0Q29sbGlzaW9uU2hhcGVfY2FsY3VsYXRlTG9jYWxJbmVydGlhXzI9dC5hc20udWEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sSm89dC5fZWJfYnRDb2xsaXNpb25TaGFwZV9zZXRNYXJnaW5fMT1mdW5jdGlvbigpe3JldHVybihKbz10Ll9lYl9idENvbGxpc2lvblNoYXBlX3NldE1hcmdpbl8xPXQuYXNtLnZhKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHRuPXQuX2ViX2J0Q29sbGlzaW9uU2hhcGVfZ2V0TWFyZ2luXzA9ZnVuY3Rpb24oKXtyZXR1cm4odG49dC5fZWJfYnRDb2xsaXNpb25TaGFwZV9nZXRNYXJnaW5fMD10LmFzbS53YSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxlbj10Ll9lYl9idENvbGxpc2lvblNoYXBlX19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oZW49dC5fZWJfYnRDb2xsaXNpb25TaGFwZV9fX2Rlc3Ryb3lfX18wPXQuYXNtLnhhKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LG9uPXQuX2ViX2J0RGlzcGF0Y2hlcl9nZXROdW1NYW5pZm9sZHNfMD1mdW5jdGlvbigpe3JldHVybihvbj10Ll9lYl9idERpc3BhdGNoZXJfZ2V0TnVtTWFuaWZvbGRzXzA9dC5hc20ueWEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbm49dC5fZWJfYnREaXNwYXRjaGVyX2dldE1hbmlmb2xkQnlJbmRleEludGVybmFsXzE9ZnVuY3Rpb24oKXtyZXR1cm4obm49dC5fZWJfYnREaXNwYXRjaGVyX2dldE1hbmlmb2xkQnlJbmRleEludGVybmFsXzE9dC5hc20uemEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0scm49dC5fZWJfYnREaXNwYXRjaGVyX19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4ocm49dC5fZWJfYnREaXNwYXRjaGVyX19fZGVzdHJveV9fXzA9dC5hc20uQWEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sX249dC5fZWJfYnREeW5hbWljc1dvcmxkX2FkZEFjdGlvbl8xPWZ1bmN0aW9uKCl7cmV0dXJuKF9uPXQuX2ViX2J0RHluYW1pY3NXb3JsZF9hZGRBY3Rpb25fMT10LmFzbS5CYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxhbj10Ll9lYl9idER5bmFtaWNzV29ybGRfcmVtb3ZlQWN0aW9uXzE9ZnVuY3Rpb24oKXtyZXR1cm4oYW49dC5fZWJfYnREeW5hbWljc1dvcmxkX3JlbW92ZUFjdGlvbl8xPXQuYXNtLkNhKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHNuPXQuX2ViX2J0RHluYW1pY3NXb3JsZF9nZXRTb2x2ZXJJbmZvXzA9ZnVuY3Rpb24oKXtyZXR1cm4oc249dC5fZWJfYnREeW5hbWljc1dvcmxkX2dldFNvbHZlckluZm9fMD10LmFzbS5EYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxwbj10Ll9lYl9idER5bmFtaWNzV29ybGRfc2V0SW50ZXJuYWxUaWNrQ2FsbGJhY2tfMT1mdW5jdGlvbigpe3JldHVybihwbj10Ll9lYl9idER5bmFtaWNzV29ybGRfc2V0SW50ZXJuYWxUaWNrQ2FsbGJhY2tfMT10LmFzbS5FYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxsbj10Ll9lYl9idER5bmFtaWNzV29ybGRfc2V0SW50ZXJuYWxUaWNrQ2FsbGJhY2tfMj1mdW5jdGlvbigpe3JldHVybihsbj10Ll9lYl9idER5bmFtaWNzV29ybGRfc2V0SW50ZXJuYWxUaWNrQ2FsbGJhY2tfMj10LmFzbS5GYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx1bj10Ll9lYl9idER5bmFtaWNzV29ybGRfc2V0SW50ZXJuYWxUaWNrQ2FsbGJhY2tfMz1mdW5jdGlvbigpe3JldHVybih1bj10Ll9lYl9idER5bmFtaWNzV29ybGRfc2V0SW50ZXJuYWxUaWNrQ2FsbGJhY2tfMz10LmFzbS5HYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxjbj10Ll9lYl9idER5bmFtaWNzV29ybGRfZ2V0RGlzcGF0Y2hlcl8wPWZ1bmN0aW9uKCl7cmV0dXJuKGNuPXQuX2ViX2J0RHluYW1pY3NXb3JsZF9nZXREaXNwYXRjaGVyXzA9dC5hc20uSGEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0seW49dC5fZWJfYnREeW5hbWljc1dvcmxkX2dldFBhaXJDYWNoZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKHluPXQuX2ViX2J0RHluYW1pY3NXb3JsZF9nZXRQYWlyQ2FjaGVfMD10LmFzbS5JYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxobj10Ll9lYl9idER5bmFtaWNzV29ybGRfZ2V0RGlzcGF0Y2hJbmZvXzA9ZnVuY3Rpb24oKXtyZXR1cm4oaG49dC5fZWJfYnREeW5hbWljc1dvcmxkX2dldERpc3BhdGNoSW5mb18wPXQuYXNtLkphKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGZuPXQuX2ViX2J0RHluYW1pY3NXb3JsZF9hZGRDb2xsaXNpb25PYmplY3RfMT1mdW5jdGlvbigpe3JldHVybihmbj10Ll9lYl9idER5bmFtaWNzV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzE9dC5hc20uS2EpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbW49dC5fZWJfYnREeW5hbWljc1dvcmxkX2FkZENvbGxpc2lvbk9iamVjdF8yPWZ1bmN0aW9uKCl7cmV0dXJuKG1uPXQuX2ViX2J0RHluYW1pY3NXb3JsZF9hZGRDb2xsaXNpb25PYmplY3RfMj10LmFzbS5MYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxibj10Ll9lYl9idER5bmFtaWNzV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzM9ZnVuY3Rpb24oKXtyZXR1cm4oYm49dC5fZWJfYnREeW5hbWljc1dvcmxkX2FkZENvbGxpc2lvbk9iamVjdF8zPXQuYXNtLk1hKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGduPXQuX2ViX2J0RHluYW1pY3NXb3JsZF9yZW1vdmVDb2xsaXNpb25PYmplY3RfMT1mdW5jdGlvbigpe3JldHVybihnbj10Ll9lYl9idER5bmFtaWNzV29ybGRfcmVtb3ZlQ29sbGlzaW9uT2JqZWN0XzE9dC5hc20uTmEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZG49dC5fZWJfYnREeW5hbWljc1dvcmxkX2dldEJyb2FkcGhhc2VfMD1mdW5jdGlvbigpe3JldHVybihkbj10Ll9lYl9idER5bmFtaWNzV29ybGRfZ2V0QnJvYWRwaGFzZV8wPXQuYXNtLk9hKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFduPXQuX2ViX2J0RHluYW1pY3NXb3JsZF9jb252ZXhTd2VlcFRlc3RfNT1mdW5jdGlvbigpe3JldHVybihXbj10Ll9lYl9idER5bmFtaWNzV29ybGRfY29udmV4U3dlZXBUZXN0XzU9dC5hc20uUGEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQ249dC5fZWJfYnREeW5hbWljc1dvcmxkX2NvbnRhY3RQYWlyVGVzdF8zPWZ1bmN0aW9uKCl7cmV0dXJuKENuPXQuX2ViX2J0RHluYW1pY3NXb3JsZF9jb250YWN0UGFpclRlc3RfMz10LmFzbS5RYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxqbj10Ll9lYl9idER5bmFtaWNzV29ybGRfY29udGFjdFRlc3RfMj1mdW5jdGlvbigpe3JldHVybihqbj10Ll9lYl9idER5bmFtaWNzV29ybGRfY29udGFjdFRlc3RfMj10LmFzbS5SYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx2bj10Ll9lYl9idER5bmFtaWNzV29ybGRfdXBkYXRlU2luZ2xlQWFiYl8xPWZ1bmN0aW9uKCl7cmV0dXJuKHZuPXQuX2ViX2J0RHluYW1pY3NXb3JsZF91cGRhdGVTaW5nbGVBYWJiXzE9dC5hc20uU2EpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRG49dC5fZWJfYnREeW5hbWljc1dvcmxkX19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oRG49dC5fZWJfYnREeW5hbWljc1dvcmxkX19fZGVzdHJveV9fXzA9dC5hc20uVGEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUm49dC5fZWJfVm9pZFB0cl9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKFJuPXQuX2ViX1ZvaWRQdHJfX19kZXN0cm95X19fMD10LmFzbS5VYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxTbj10Ll9lYl9idFZlY3RvcjNfYnRWZWN0b3IzXzA9ZnVuY3Rpb24oKXtyZXR1cm4oU249dC5fZWJfYnRWZWN0b3IzX2J0VmVjdG9yM18wPXQuYXNtLlZhKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEluPXQuX2ViX2J0VmVjdG9yM19idFZlY3RvcjNfMz1mdW5jdGlvbigpe3JldHVybihJbj10Ll9lYl9idFZlY3RvcjNfYnRWZWN0b3IzXzM9dC5hc20uV2EpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQm49dC5fZWJfYnRWZWN0b3IzX2xlbmd0aF8wPWZ1bmN0aW9uKCl7cmV0dXJuKEJuPXQuX2ViX2J0VmVjdG9yM19sZW5ndGhfMD10LmFzbS5YYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxPbj10Ll9lYl9idFZlY3RvcjNfeF8wPWZ1bmN0aW9uKCl7cmV0dXJuKE9uPXQuX2ViX2J0VmVjdG9yM194XzA9dC5hc20uWWEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUG49dC5fZWJfYnRWZWN0b3IzX3lfMD1mdW5jdGlvbigpe3JldHVybihQbj10Ll9lYl9idFZlY3RvcjNfeV8wPXQuYXNtLlphKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHhuPXQuX2ViX2J0VmVjdG9yM196XzA9ZnVuY3Rpb24oKXtyZXR1cm4oeG49dC5fZWJfYnRWZWN0b3IzX3pfMD10LmFzbS5fYSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxUbj10Ll9lYl9idFZlY3RvcjNfc2V0WF8xPWZ1bmN0aW9uKCl7cmV0dXJuKFRuPXQuX2ViX2J0VmVjdG9yM19zZXRYXzE9dC5hc20uJGEpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRm49dC5fZWJfYnRWZWN0b3IzX3NldFlfMT1mdW5jdGlvbigpe3JldHVybihGbj10Ll9lYl9idFZlY3RvcjNfc2V0WV8xPXQuYXNtLmFiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE1uPXQuX2ViX2J0VmVjdG9yM19zZXRaXzE9ZnVuY3Rpb24oKXtyZXR1cm4oTW49dC5fZWJfYnRWZWN0b3IzX3NldFpfMT10LmFzbS5iYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxBbj10Ll9lYl9idFZlY3RvcjNfc2V0VmFsdWVfMz1mdW5jdGlvbigpe3JldHVybihBbj10Ll9lYl9idFZlY3RvcjNfc2V0VmFsdWVfMz10LmFzbS5jYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx3bj10Ll9lYl9idFZlY3RvcjNfbm9ybWFsaXplXzA9ZnVuY3Rpb24oKXtyZXR1cm4od249dC5fZWJfYnRWZWN0b3IzX25vcm1hbGl6ZV8wPXQuYXNtLmRiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LExuPXQuX2ViX2J0VmVjdG9yM19yb3RhdGVfMj1mdW5jdGlvbigpe3JldHVybihMbj10Ll9lYl9idFZlY3RvcjNfcm90YXRlXzI9dC5hc20uZWIpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sa249dC5fZWJfYnRWZWN0b3IzX2RvdF8xPWZ1bmN0aW9uKCl7cmV0dXJuKGtuPXQuX2ViX2J0VmVjdG9yM19kb3RfMT10LmFzbS5mYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxIbj10Ll9lYl9idFZlY3RvcjNfb3BfbXVsXzE9ZnVuY3Rpb24oKXtyZXR1cm4oSG49dC5fZWJfYnRWZWN0b3IzX29wX211bF8xPXQuYXNtLmdiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFluPXQuX2ViX2J0VmVjdG9yM19vcF9hZGRfMT1mdW5jdGlvbigpe3JldHVybihZbj10Ll9lYl9idFZlY3RvcjNfb3BfYWRkXzE9dC5hc20uaGIpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sVm49dC5fZWJfYnRWZWN0b3IzX29wX3N1Yl8xPWZ1bmN0aW9uKCl7cmV0dXJuKFZuPXQuX2ViX2J0VmVjdG9yM19vcF9zdWJfMT10LmFzbS5pYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxRbj10Ll9lYl9idFZlY3RvcjNfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihRbj10Ll9lYl9idFZlY3RvcjNfX19kZXN0cm95X19fMD10LmFzbS5qYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFbj10Ll9lYl9idFF1YXRlcm5pb25fYnRRdWF0ZXJuaW9uXzQ9ZnVuY3Rpb24oKXtyZXR1cm4oRW49dC5fZWJfYnRRdWF0ZXJuaW9uX2J0UXVhdGVybmlvbl80PXQuYXNtLmtiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFhuPXQuX2ViX2J0UXVhdGVybmlvbl9zZXRWYWx1ZV80PWZ1bmN0aW9uKCl7cmV0dXJuKFhuPXQuX2ViX2J0UXVhdGVybmlvbl9zZXRWYWx1ZV80PXQuYXNtLmxiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFVuPXQuX2ViX2J0UXVhdGVybmlvbl9zZXRFdWxlclpZWF8zPWZ1bmN0aW9uKCl7cmV0dXJuKFVuPXQuX2ViX2J0UXVhdGVybmlvbl9zZXRFdWxlclpZWF8zPXQuYXNtLm1iKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEduPXQuX2ViX2J0UXVhdGVybmlvbl9zZXRSb3RhdGlvbl8yPWZ1bmN0aW9uKCl7cmV0dXJuKEduPXQuX2ViX2J0UXVhdGVybmlvbl9zZXRSb3RhdGlvbl8yPXQuYXNtLm5iKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE5uPXQuX2ViX2J0UXVhdGVybmlvbl9ub3JtYWxpemVfMD1mdW5jdGlvbigpe3JldHVybihObj10Ll9lYl9idFF1YXRlcm5pb25fbm9ybWFsaXplXzA9dC5hc20ub2IpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sem49dC5fZWJfYnRRdWF0ZXJuaW9uX2xlbmd0aDJfMD1mdW5jdGlvbigpe3JldHVybih6bj10Ll9lYl9idFF1YXRlcm5pb25fbGVuZ3RoMl8wPXQuYXNtLnBiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHFuPXQuX2ViX2J0UXVhdGVybmlvbl9sZW5ndGhfMD1mdW5jdGlvbigpe3JldHVybihxbj10Ll9lYl9idFF1YXRlcm5pb25fbGVuZ3RoXzA9dC5hc20ucWIpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sWm49dC5fZWJfYnRRdWF0ZXJuaW9uX2RvdF8xPWZ1bmN0aW9uKCl7cmV0dXJuKFpuPXQuX2ViX2J0UXVhdGVybmlvbl9kb3RfMT10LmFzbS5yYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxLbj10Ll9lYl9idFF1YXRlcm5pb25fbm9ybWFsaXplZF8wPWZ1bmN0aW9uKCl7cmV0dXJuKEtuPXQuX2ViX2J0UXVhdGVybmlvbl9ub3JtYWxpemVkXzA9dC5hc20uc2IpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sJG49dC5fZWJfYnRRdWF0ZXJuaW9uX2dldEF4aXNfMD1mdW5jdGlvbigpe3JldHVybigkbj10Ll9lYl9idFF1YXRlcm5pb25fZ2V0QXhpc18wPXQuYXNtLnRiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEpuPXQuX2ViX2J0UXVhdGVybmlvbl9pbnZlcnNlXzA9ZnVuY3Rpb24oKXtyZXR1cm4oSm49dC5fZWJfYnRRdWF0ZXJuaW9uX2ludmVyc2VfMD10LmFzbS51YikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx0cj10Ll9lYl9idFF1YXRlcm5pb25fZ2V0QW5nbGVfMD1mdW5jdGlvbigpe3JldHVybih0cj10Ll9lYl9idFF1YXRlcm5pb25fZ2V0QW5nbGVfMD10LmFzbS52YikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxlcj10Ll9lYl9idFF1YXRlcm5pb25fZ2V0QW5nbGVTaG9ydGVzdFBhdGhfMD1mdW5jdGlvbigpe3JldHVybihlcj10Ll9lYl9idFF1YXRlcm5pb25fZ2V0QW5nbGVTaG9ydGVzdFBhdGhfMD10LmFzbS53YikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxvcj10Ll9lYl9idFF1YXRlcm5pb25fYW5nbGVfMT1mdW5jdGlvbigpe3JldHVybihvcj10Ll9lYl9idFF1YXRlcm5pb25fYW5nbGVfMT10LmFzbS54YikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxucj10Ll9lYl9idFF1YXRlcm5pb25fYW5nbGVTaG9ydGVzdFBhdGhfMT1mdW5jdGlvbigpe3JldHVybihucj10Ll9lYl9idFF1YXRlcm5pb25fYW5nbGVTaG9ydGVzdFBhdGhfMT10LmFzbS55YikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxycj10Ll9lYl9idFF1YXRlcm5pb25fb3BfYWRkXzE9ZnVuY3Rpb24oKXtyZXR1cm4ocnI9dC5fZWJfYnRRdWF0ZXJuaW9uX29wX2FkZF8xPXQuYXNtLnpiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LF9yPXQuX2ViX2J0UXVhdGVybmlvbl9vcF9zdWJfMT1mdW5jdGlvbigpe3JldHVybihfcj10Ll9lYl9idFF1YXRlcm5pb25fb3Bfc3ViXzE9dC5hc20uQWIpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0saXI9dC5fZWJfYnRRdWF0ZXJuaW9uX29wX211bF8xPWZ1bmN0aW9uKCl7cmV0dXJuKGlyPXQuX2ViX2J0UXVhdGVybmlvbl9vcF9tdWxfMT10LmFzbS5CYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxhcj10Ll9lYl9idFF1YXRlcm5pb25fb3BfbXVscV8xPWZ1bmN0aW9uKCl7cmV0dXJuKGFyPXQuX2ViX2J0UXVhdGVybmlvbl9vcF9tdWxxXzE9dC5hc20uQ2IpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sc3I9dC5fZWJfYnRRdWF0ZXJuaW9uX29wX2Rpdl8xPWZ1bmN0aW9uKCl7cmV0dXJuKHNyPXQuX2ViX2J0UXVhdGVybmlvbl9vcF9kaXZfMT10LmFzbS5EYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxwcj10Ll9lYl9idFF1YXRlcm5pb25feF8wPWZ1bmN0aW9uKCl7cmV0dXJuKHByPXQuX2ViX2J0UXVhdGVybmlvbl94XzA9dC5hc20uRWIpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbHI9dC5fZWJfYnRRdWF0ZXJuaW9uX3lfMD1mdW5jdGlvbigpe3JldHVybihscj10Ll9lYl9idFF1YXRlcm5pb25feV8wPXQuYXNtLkZiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHVyPXQuX2ViX2J0UXVhdGVybmlvbl96XzA9ZnVuY3Rpb24oKXtyZXR1cm4odXI9dC5fZWJfYnRRdWF0ZXJuaW9uX3pfMD10LmFzbS5HYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxjcj10Ll9lYl9idFF1YXRlcm5pb25fd18wPWZ1bmN0aW9uKCl7cmV0dXJuKGNyPXQuX2ViX2J0UXVhdGVybmlvbl93XzA9dC5hc20uSGIpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0seXI9dC5fZWJfYnRRdWF0ZXJuaW9uX3NldFhfMT1mdW5jdGlvbigpe3JldHVybih5cj10Ll9lYl9idFF1YXRlcm5pb25fc2V0WF8xPXQuYXNtLkliKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGhyPXQuX2ViX2J0UXVhdGVybmlvbl9zZXRZXzE9ZnVuY3Rpb24oKXtyZXR1cm4oaHI9dC5fZWJfYnRRdWF0ZXJuaW9uX3NldFlfMT10LmFzbS5KYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxmcj10Ll9lYl9idFF1YXRlcm5pb25fc2V0Wl8xPWZ1bmN0aW9uKCl7cmV0dXJuKGZyPXQuX2ViX2J0UXVhdGVybmlvbl9zZXRaXzE9dC5hc20uS2IpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbXI9dC5fZWJfYnRRdWF0ZXJuaW9uX3NldFdfMT1mdW5jdGlvbigpe3JldHVybihtcj10Ll9lYl9idFF1YXRlcm5pb25fc2V0V18xPXQuYXNtLkxiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGJyPXQuX2ViX2J0UXVhdGVybmlvbl9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKGJyPXQuX2ViX2J0UXVhdGVybmlvbl9fX2Rlc3Ryb3lfX18wPXQuYXNtLk1iKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGdyPXQuX2ViX2J0TWF0cml4M3gzX3NldEV1bGVyWllYXzM9ZnVuY3Rpb24oKXtyZXR1cm4oZ3I9dC5fZWJfYnRNYXRyaXgzeDNfc2V0RXVsZXJaWVhfMz10LmFzbS5OYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxkcj10Ll9lYl9idE1hdHJpeDN4M19nZXRSb3RhdGlvbl8xPWZ1bmN0aW9uKCl7cmV0dXJuKGRyPXQuX2ViX2J0TWF0cml4M3gzX2dldFJvdGF0aW9uXzE9dC5hc20uT2IpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sV3I9dC5fZWJfYnRNYXRyaXgzeDNfZ2V0Um93XzE9ZnVuY3Rpb24oKXtyZXR1cm4oV3I9dC5fZWJfYnRNYXRyaXgzeDNfZ2V0Um93XzE9dC5hc20uUGIpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQ3I9dC5fZWJfYnRNYXRyaXgzeDNfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihDcj10Ll9lYl9idE1hdHJpeDN4M19fX2Rlc3Ryb3lfX18wPXQuYXNtLlFiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGpyPXQuX2ViX2J0VHJhbnNmb3JtX2J0VHJhbnNmb3JtXzA9ZnVuY3Rpb24oKXtyZXR1cm4oanI9dC5fZWJfYnRUcmFuc2Zvcm1fYnRUcmFuc2Zvcm1fMD10LmFzbS5SYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx2cj10Ll9lYl9idFRyYW5zZm9ybV9idFRyYW5zZm9ybV8yPWZ1bmN0aW9uKCl7cmV0dXJuKHZyPXQuX2ViX2J0VHJhbnNmb3JtX2J0VHJhbnNmb3JtXzI9dC5hc20uU2IpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRHI9dC5fZWJfYnRUcmFuc2Zvcm1fc2V0SWRlbnRpdHlfMD1mdW5jdGlvbigpe3JldHVybihEcj10Ll9lYl9idFRyYW5zZm9ybV9zZXRJZGVudGl0eV8wPXQuYXNtLlRiKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFJyPXQuX2ViX2J0VHJhbnNmb3JtX3NldE9yaWdpbl8xPWZ1bmN0aW9uKCl7cmV0dXJuKFJyPXQuX2ViX2J0VHJhbnNmb3JtX3NldE9yaWdpbl8xPXQuYXNtLlViKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFNyPXQuX2ViX2J0VHJhbnNmb3JtX3NldFJvdGF0aW9uXzE9ZnVuY3Rpb24oKXtyZXR1cm4oU3I9dC5fZWJfYnRUcmFuc2Zvcm1fc2V0Um90YXRpb25fMT10LmFzbS5WYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxJcj10Ll9lYl9idFRyYW5zZm9ybV9nZXRPcmlnaW5fMD1mdW5jdGlvbigpe3JldHVybihJcj10Ll9lYl9idFRyYW5zZm9ybV9nZXRPcmlnaW5fMD10LmFzbS5XYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxCcj10Ll9lYl9idFRyYW5zZm9ybV9nZXRSb3RhdGlvbl8wPWZ1bmN0aW9uKCl7cmV0dXJuKEJyPXQuX2ViX2J0VHJhbnNmb3JtX2dldFJvdGF0aW9uXzA9dC5hc20uWGIpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sT3I9dC5fZWJfYnRUcmFuc2Zvcm1fZ2V0QmFzaXNfMD1mdW5jdGlvbigpe3JldHVybihPcj10Ll9lYl9idFRyYW5zZm9ybV9nZXRCYXNpc18wPXQuYXNtLlliKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFByPXQuX2ViX2J0VHJhbnNmb3JtX3NldEZyb21PcGVuR0xNYXRyaXhfMT1mdW5jdGlvbigpe3JldHVybihQcj10Ll9lYl9idFRyYW5zZm9ybV9zZXRGcm9tT3BlbkdMTWF0cml4XzE9dC5hc20uWmIpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0seHI9dC5fZWJfYnRUcmFuc2Zvcm1faW52ZXJzZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKHhyPXQuX2ViX2J0VHJhbnNmb3JtX2ludmVyc2VfMD10LmFzbS5fYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxUcj10Ll9lYl9idFRyYW5zZm9ybV9vcF9tdWxfMT1mdW5jdGlvbigpe3JldHVybihUcj10Ll9lYl9idFRyYW5zZm9ybV9vcF9tdWxfMT10LmFzbS4kYikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxGcj10Ll9lYl9idFRyYW5zZm9ybV9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKEZyPXQuX2ViX2J0VHJhbnNmb3JtX19fZGVzdHJveV9fXzA9dC5hc20uYWMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sTXI9dC5fZWJfYnREZWZhdWx0TW90aW9uU3RhdGVfYnREZWZhdWx0TW90aW9uU3RhdGVfMD1mdW5jdGlvbigpe3JldHVybihNcj10Ll9lYl9idERlZmF1bHRNb3Rpb25TdGF0ZV9idERlZmF1bHRNb3Rpb25TdGF0ZV8wPXQuYXNtLmJjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEFyPXQuX2ViX2J0RGVmYXVsdE1vdGlvblN0YXRlX2J0RGVmYXVsdE1vdGlvblN0YXRlXzE9ZnVuY3Rpb24oKXtyZXR1cm4oQXI9dC5fZWJfYnREZWZhdWx0TW90aW9uU3RhdGVfYnREZWZhdWx0TW90aW9uU3RhdGVfMT10LmFzbS5jYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx3cj10Ll9lYl9idERlZmF1bHRNb3Rpb25TdGF0ZV9idERlZmF1bHRNb3Rpb25TdGF0ZV8yPWZ1bmN0aW9uKCl7cmV0dXJuKHdyPXQuX2ViX2J0RGVmYXVsdE1vdGlvblN0YXRlX2J0RGVmYXVsdE1vdGlvblN0YXRlXzI9dC5hc20uZGMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sTHI9dC5fZWJfYnREZWZhdWx0TW90aW9uU3RhdGVfZ2V0V29ybGRUcmFuc2Zvcm1fMT1mdW5jdGlvbigpe3JldHVybihMcj10Ll9lYl9idERlZmF1bHRNb3Rpb25TdGF0ZV9nZXRXb3JsZFRyYW5zZm9ybV8xPXQuYXNtLmVjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGtyPXQuX2ViX2J0RGVmYXVsdE1vdGlvblN0YXRlX3NldFdvcmxkVHJhbnNmb3JtXzE9ZnVuY3Rpb24oKXtyZXR1cm4oa3I9dC5fZWJfYnREZWZhdWx0TW90aW9uU3RhdGVfc2V0V29ybGRUcmFuc2Zvcm1fMT10LmFzbS5mYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxIcj10Ll9lYl9idERlZmF1bHRNb3Rpb25TdGF0ZV9nZXRfbV9ncmFwaGljc1dvcmxkVHJhbnNfMD1mdW5jdGlvbigpe3JldHVybihIcj10Ll9lYl9idERlZmF1bHRNb3Rpb25TdGF0ZV9nZXRfbV9ncmFwaGljc1dvcmxkVHJhbnNfMD10LmFzbS5nYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxZcj10Ll9lYl9idERlZmF1bHRNb3Rpb25TdGF0ZV9zZXRfbV9ncmFwaGljc1dvcmxkVHJhbnNfMT1mdW5jdGlvbigpe3JldHVybihZcj10Ll9lYl9idERlZmF1bHRNb3Rpb25TdGF0ZV9zZXRfbV9ncmFwaGljc1dvcmxkVHJhbnNfMT10LmFzbS5oYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxWcj10Ll9lYl9idERlZmF1bHRNb3Rpb25TdGF0ZV9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKFZyPXQuX2ViX2J0RGVmYXVsdE1vdGlvblN0YXRlX19fZGVzdHJveV9fXzA9dC5hc20uaWMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUXI9dC5fZWJfYnRDb2xsaXNpb25PYmplY3RXcmFwcGVyX2dldFdvcmxkVHJhbnNmb3JtXzA9ZnVuY3Rpb24oKXtyZXR1cm4oUXI9dC5fZWJfYnRDb2xsaXNpb25PYmplY3RXcmFwcGVyX2dldFdvcmxkVHJhbnNmb3JtXzA9dC5hc20uamMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRXI9dC5fZWJfYnRDb2xsaXNpb25PYmplY3RXcmFwcGVyX2dldENvbGxpc2lvbk9iamVjdF8wPWZ1bmN0aW9uKCl7cmV0dXJuKEVyPXQuX2ViX2J0Q29sbGlzaW9uT2JqZWN0V3JhcHBlcl9nZXRDb2xsaXNpb25PYmplY3RfMD10LmFzbS5rYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxYcj10Ll9lYl9idENvbGxpc2lvbk9iamVjdFdyYXBwZXJfZ2V0Q29sbGlzaW9uU2hhcGVfMD1mdW5jdGlvbigpe3JldHVybihYcj10Ll9lYl9idENvbGxpc2lvbk9iamVjdFdyYXBwZXJfZ2V0Q29sbGlzaW9uU2hhcGVfMD10LmFzbS5sYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxVcj10Ll9lYl9idENvbnN0Q29sbGlzaW9uT2JqZWN0QXJyYXlfc2l6ZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKFVyPXQuX2ViX2J0Q29uc3RDb2xsaXNpb25PYmplY3RBcnJheV9zaXplXzA9dC5hc20ubWMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sR3I9dC5fZWJfYnRDb25zdENvbGxpc2lvbk9iamVjdEFycmF5X2F0XzE9ZnVuY3Rpb24oKXtyZXR1cm4oR3I9dC5fZWJfYnRDb25zdENvbGxpc2lvbk9iamVjdEFycmF5X2F0XzE9dC5hc20ubmMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sTnI9dC5fZWJfYnRDb25zdENvbGxpc2lvbk9iamVjdEFycmF5X19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oTnI9dC5fZWJfYnRDb25zdENvbGxpc2lvbk9iamVjdEFycmF5X19fZGVzdHJveV9fXzA9dC5hc20ub2MpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0senI9dC5fZWJfYnRTY2FsYXJBcnJheV9zaXplXzA9ZnVuY3Rpb24oKXtyZXR1cm4oenI9dC5fZWJfYnRTY2FsYXJBcnJheV9zaXplXzA9dC5hc20ucGMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0scXI9dC5fZWJfYnRTY2FsYXJBcnJheV9hdF8xPWZ1bmN0aW9uKCl7cmV0dXJuKHFyPXQuX2ViX2J0U2NhbGFyQXJyYXlfYXRfMT10LmFzbS5xYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxacj10Ll9lYl9idFNjYWxhckFycmF5X19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oWnI9dC5fZWJfYnRTY2FsYXJBcnJheV9fX2Rlc3Ryb3lfX18wPXQuYXNtLnJjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEtyPXQuX2ViX2J0TWFuaWZvbGRQb2ludF9nZXRQb3NpdGlvbldvcmxkT25BXzA9ZnVuY3Rpb24oKXtyZXR1cm4oS3I9dC5fZWJfYnRNYW5pZm9sZFBvaW50X2dldFBvc2l0aW9uV29ybGRPbkFfMD10LmFzbS5zYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSwkcj10Ll9lYl9idE1hbmlmb2xkUG9pbnRfZ2V0UG9zaXRpb25Xb3JsZE9uQl8wPWZ1bmN0aW9uKCl7cmV0dXJuKCRyPXQuX2ViX2J0TWFuaWZvbGRQb2ludF9nZXRQb3NpdGlvbldvcmxkT25CXzA9dC5hc20udGMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sSnI9dC5fZWJfYnRNYW5pZm9sZFBvaW50X2dldEFwcGxpZWRJbXB1bHNlXzA9ZnVuY3Rpb24oKXtyZXR1cm4oSnI9dC5fZWJfYnRNYW5pZm9sZFBvaW50X2dldEFwcGxpZWRJbXB1bHNlXzA9dC5hc20udWMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sdF89dC5fZWJfYnRNYW5pZm9sZFBvaW50X2dldERpc3RhbmNlXzA9ZnVuY3Rpb24oKXtyZXR1cm4odF89dC5fZWJfYnRNYW5pZm9sZFBvaW50X2dldERpc3RhbmNlXzA9dC5hc20udmMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZV89dC5fZWJfYnRNYW5pZm9sZFBvaW50X2dldF9tX2xvY2FsUG9pbnRBXzA9ZnVuY3Rpb24oKXtyZXR1cm4oZV89dC5fZWJfYnRNYW5pZm9sZFBvaW50X2dldF9tX2xvY2FsUG9pbnRBXzA9dC5hc20ud2MpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sb189dC5fZWJfYnRNYW5pZm9sZFBvaW50X3NldF9tX2xvY2FsUG9pbnRBXzE9ZnVuY3Rpb24oKXtyZXR1cm4ob189dC5fZWJfYnRNYW5pZm9sZFBvaW50X3NldF9tX2xvY2FsUG9pbnRBXzE9dC5hc20ueGMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbl89dC5fZWJfYnRNYW5pZm9sZFBvaW50X2dldF9tX2xvY2FsUG9pbnRCXzA9ZnVuY3Rpb24oKXtyZXR1cm4obl89dC5fZWJfYnRNYW5pZm9sZFBvaW50X2dldF9tX2xvY2FsUG9pbnRCXzA9dC5hc20ueWMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0scl89dC5fZWJfYnRNYW5pZm9sZFBvaW50X3NldF9tX2xvY2FsUG9pbnRCXzE9ZnVuY3Rpb24oKXtyZXR1cm4ocl89dC5fZWJfYnRNYW5pZm9sZFBvaW50X3NldF9tX2xvY2FsUG9pbnRCXzE9dC5hc20uemMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sX189dC5fZWJfYnRNYW5pZm9sZFBvaW50X2dldF9tX3Bvc2l0aW9uV29ybGRPbkJfMD1mdW5jdGlvbigpe3JldHVybihfXz10Ll9lYl9idE1hbmlmb2xkUG9pbnRfZ2V0X21fcG9zaXRpb25Xb3JsZE9uQl8wPXQuYXNtLkFjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGlfPXQuX2ViX2J0TWFuaWZvbGRQb2ludF9zZXRfbV9wb3NpdGlvbldvcmxkT25CXzE9ZnVuY3Rpb24oKXtyZXR1cm4oaV89dC5fZWJfYnRNYW5pZm9sZFBvaW50X3NldF9tX3Bvc2l0aW9uV29ybGRPbkJfMT10LmFzbS5CYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxhXz10Ll9lYl9idE1hbmlmb2xkUG9pbnRfZ2V0X21fcG9zaXRpb25Xb3JsZE9uQV8wPWZ1bmN0aW9uKCl7cmV0dXJuKGFfPXQuX2ViX2J0TWFuaWZvbGRQb2ludF9nZXRfbV9wb3NpdGlvbldvcmxkT25BXzA9dC5hc20uQ2MpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sc189dC5fZWJfYnRNYW5pZm9sZFBvaW50X3NldF9tX3Bvc2l0aW9uV29ybGRPbkFfMT1mdW5jdGlvbigpe3JldHVybihzXz10Ll9lYl9idE1hbmlmb2xkUG9pbnRfc2V0X21fcG9zaXRpb25Xb3JsZE9uQV8xPXQuYXNtLkRjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHBfPXQuX2ViX2J0TWFuaWZvbGRQb2ludF9nZXRfbV9ub3JtYWxXb3JsZE9uQl8wPWZ1bmN0aW9uKCl7cmV0dXJuKHBfPXQuX2ViX2J0TWFuaWZvbGRQb2ludF9nZXRfbV9ub3JtYWxXb3JsZE9uQl8wPXQuYXNtLkVjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGxfPXQuX2ViX2J0TWFuaWZvbGRQb2ludF9zZXRfbV9ub3JtYWxXb3JsZE9uQl8xPWZ1bmN0aW9uKCl7cmV0dXJuKGxfPXQuX2ViX2J0TWFuaWZvbGRQb2ludF9zZXRfbV9ub3JtYWxXb3JsZE9uQl8xPXQuYXNtLkZjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHVfPXQuX2ViX2J0TWFuaWZvbGRQb2ludF9nZXRfbV91c2VyUGVyc2lzdGVudERhdGFfMD1mdW5jdGlvbigpe3JldHVybih1Xz10Ll9lYl9idE1hbmlmb2xkUG9pbnRfZ2V0X21fdXNlclBlcnNpc3RlbnREYXRhXzA9dC5hc20uR2MpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sY189dC5fZWJfYnRNYW5pZm9sZFBvaW50X3NldF9tX3VzZXJQZXJzaXN0ZW50RGF0YV8xPWZ1bmN0aW9uKCl7cmV0dXJuKGNfPXQuX2ViX2J0TWFuaWZvbGRQb2ludF9zZXRfbV91c2VyUGVyc2lzdGVudERhdGFfMT10LmFzbS5IYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx5Xz10Ll9lYl9idE1hbmlmb2xkUG9pbnRfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybih5Xz10Ll9lYl9idE1hbmlmb2xkUG9pbnRfX19kZXN0cm95X19fMD10LmFzbS5JYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxoXz10Ll9lYl9Db25jcmV0ZUNvbnRhY3RSZXN1bHRDYWxsYmFja19Db25jcmV0ZUNvbnRhY3RSZXN1bHRDYWxsYmFja18wPWZ1bmN0aW9uKCl7cmV0dXJuKGhfPXQuX2ViX0NvbmNyZXRlQ29udGFjdFJlc3VsdENhbGxiYWNrX0NvbmNyZXRlQ29udGFjdFJlc3VsdENhbGxiYWNrXzA9dC5hc20uSmMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZl89dC5fZWJfQ29uY3JldGVDb250YWN0UmVzdWx0Q2FsbGJhY2tfYWRkU2luZ2xlUmVzdWx0Xzc9ZnVuY3Rpb24oKXtyZXR1cm4oZl89dC5fZWJfQ29uY3JldGVDb250YWN0UmVzdWx0Q2FsbGJhY2tfYWRkU2luZ2xlUmVzdWx0Xzc9dC5hc20uS2MpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbV89dC5fZWJfQ29uY3JldGVDb250YWN0UmVzdWx0Q2FsbGJhY2tfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihtXz10Ll9lYl9Db25jcmV0ZUNvbnRhY3RSZXN1bHRDYWxsYmFja19fX2Rlc3Ryb3lfX18wPXQuYXNtLkxjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGJfPXQuX2ViX0xvY2FsU2hhcGVJbmZvX2dldF9tX3NoYXBlUGFydF8wPWZ1bmN0aW9uKCl7cmV0dXJuKGJfPXQuX2ViX0xvY2FsU2hhcGVJbmZvX2dldF9tX3NoYXBlUGFydF8wPXQuYXNtLk1jKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGdfPXQuX2ViX0xvY2FsU2hhcGVJbmZvX3NldF9tX3NoYXBlUGFydF8xPWZ1bmN0aW9uKCl7cmV0dXJuKGdfPXQuX2ViX0xvY2FsU2hhcGVJbmZvX3NldF9tX3NoYXBlUGFydF8xPXQuYXNtLk5jKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGRfPXQuX2ViX0xvY2FsU2hhcGVJbmZvX2dldF9tX3RyaWFuZ2xlSW5kZXhfMD1mdW5jdGlvbigpe3JldHVybihkXz10Ll9lYl9Mb2NhbFNoYXBlSW5mb19nZXRfbV90cmlhbmdsZUluZGV4XzA9dC5hc20uT2MpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sV189dC5fZWJfTG9jYWxTaGFwZUluZm9fc2V0X21fdHJpYW5nbGVJbmRleF8xPWZ1bmN0aW9uKCl7cmV0dXJuKFdfPXQuX2ViX0xvY2FsU2hhcGVJbmZvX3NldF9tX3RyaWFuZ2xlSW5kZXhfMT10LmFzbS5QYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDXz10Ll9lYl9Mb2NhbFNoYXBlSW5mb19fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKENfPXQuX2ViX0xvY2FsU2hhcGVJbmZvX19fZGVzdHJveV9fXzA9dC5hc20uUWMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sal89dC5fZWJfTG9jYWxDb252ZXhSZXN1bHRfTG9jYWxDb252ZXhSZXN1bHRfNT1mdW5jdGlvbigpe3JldHVybihqXz10Ll9lYl9Mb2NhbENvbnZleFJlc3VsdF9Mb2NhbENvbnZleFJlc3VsdF81PXQuYXNtLlJjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHZfPXQuX2ViX0xvY2FsQ29udmV4UmVzdWx0X2dldF9tX2hpdENvbGxpc2lvbk9iamVjdF8wPWZ1bmN0aW9uKCl7cmV0dXJuKHZfPXQuX2ViX0xvY2FsQ29udmV4UmVzdWx0X2dldF9tX2hpdENvbGxpc2lvbk9iamVjdF8wPXQuYXNtLlNjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LERfPXQuX2ViX0xvY2FsQ29udmV4UmVzdWx0X3NldF9tX2hpdENvbGxpc2lvbk9iamVjdF8xPWZ1bmN0aW9uKCl7cmV0dXJuKERfPXQuX2ViX0xvY2FsQ29udmV4UmVzdWx0X3NldF9tX2hpdENvbGxpc2lvbk9iamVjdF8xPXQuYXNtLlRjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFJfPXQuX2ViX0xvY2FsQ29udmV4UmVzdWx0X2dldF9tX2xvY2FsU2hhcGVJbmZvXzA9ZnVuY3Rpb24oKXtyZXR1cm4oUl89dC5fZWJfTG9jYWxDb252ZXhSZXN1bHRfZ2V0X21fbG9jYWxTaGFwZUluZm9fMD10LmFzbS5VYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxTXz10Ll9lYl9Mb2NhbENvbnZleFJlc3VsdF9zZXRfbV9sb2NhbFNoYXBlSW5mb18xPWZ1bmN0aW9uKCl7cmV0dXJuKFNfPXQuX2ViX0xvY2FsQ29udmV4UmVzdWx0X3NldF9tX2xvY2FsU2hhcGVJbmZvXzE9dC5hc20uVmMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sSV89dC5fZWJfTG9jYWxDb252ZXhSZXN1bHRfZ2V0X21faGl0Tm9ybWFsTG9jYWxfMD1mdW5jdGlvbigpe3JldHVybihJXz10Ll9lYl9Mb2NhbENvbnZleFJlc3VsdF9nZXRfbV9oaXROb3JtYWxMb2NhbF8wPXQuYXNtLldjKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEJfPXQuX2ViX0xvY2FsQ29udmV4UmVzdWx0X3NldF9tX2hpdE5vcm1hbExvY2FsXzE9ZnVuY3Rpb24oKXtyZXR1cm4oQl89dC5fZWJfTG9jYWxDb252ZXhSZXN1bHRfc2V0X21faGl0Tm9ybWFsTG9jYWxfMT10LmFzbS5YYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxPXz10Ll9lYl9Mb2NhbENvbnZleFJlc3VsdF9nZXRfbV9oaXRQb2ludExvY2FsXzA9ZnVuY3Rpb24oKXtyZXR1cm4oT189dC5fZWJfTG9jYWxDb252ZXhSZXN1bHRfZ2V0X21faGl0UG9pbnRMb2NhbF8wPXQuYXNtLlljKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFBfPXQuX2ViX0xvY2FsQ29udmV4UmVzdWx0X3NldF9tX2hpdFBvaW50TG9jYWxfMT1mdW5jdGlvbigpe3JldHVybihQXz10Ll9lYl9Mb2NhbENvbnZleFJlc3VsdF9zZXRfbV9oaXRQb2ludExvY2FsXzE9dC5hc20uWmMpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0seF89dC5fZWJfTG9jYWxDb252ZXhSZXN1bHRfZ2V0X21faGl0RnJhY3Rpb25fMD1mdW5jdGlvbigpe3JldHVybih4Xz10Ll9lYl9Mb2NhbENvbnZleFJlc3VsdF9nZXRfbV9oaXRGcmFjdGlvbl8wPXQuYXNtLl9jKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFRfPXQuX2ViX0xvY2FsQ29udmV4UmVzdWx0X3NldF9tX2hpdEZyYWN0aW9uXzE9ZnVuY3Rpb24oKXtyZXR1cm4oVF89dC5fZWJfTG9jYWxDb252ZXhSZXN1bHRfc2V0X21faGl0RnJhY3Rpb25fMT10LmFzbS4kYykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxGXz10Ll9lYl9Mb2NhbENvbnZleFJlc3VsdF9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKEZfPXQuX2ViX0xvY2FsQ29udmV4UmVzdWx0X19fZGVzdHJveV9fXzA9dC5hc20uYWQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sTV89dC5fZWJfQ2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja18yPWZ1bmN0aW9uKCl7cmV0dXJuKE1fPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfMj10LmFzbS5iZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxBXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfaGFzSGl0XzA9ZnVuY3Rpb24oKXtyZXR1cm4oQV89dC5fZWJfQ2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrX2hhc0hpdF8wPXQuYXNtLmNkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHdfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19nZXRfbV9oaXRDb2xsaXNpb25PYmplY3RfMD1mdW5jdGlvbigpe3JldHVybih3Xz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfZ2V0X21faGl0Q29sbGlzaW9uT2JqZWN0XzA9dC5hc20uZGQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sTF89dC5fZWJfQ2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrX3NldF9tX2hpdENvbGxpc2lvbk9iamVjdF8xPWZ1bmN0aW9uKCl7cmV0dXJuKExfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19zZXRfbV9oaXRDb2xsaXNpb25PYmplY3RfMT10LmFzbS5lZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxrXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfZ2V0X21fY29udmV4RnJvbVdvcmxkXzA9ZnVuY3Rpb24oKXtyZXR1cm4oa189dC5fZWJfQ2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrX2dldF9tX2NvbnZleEZyb21Xb3JsZF8wPXQuYXNtLmZkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEhfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19zZXRfbV9jb252ZXhGcm9tV29ybGRfMT1mdW5jdGlvbigpe3JldHVybihIXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfc2V0X21fY29udmV4RnJvbVdvcmxkXzE9dC5hc20uZ2QpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sWV89dC5fZWJfQ2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrX2dldF9tX2NvbnZleFRvV29ybGRfMD1mdW5jdGlvbigpe3JldHVybihZXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfZ2V0X21fY29udmV4VG9Xb3JsZF8wPXQuYXNtLmhkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFZfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19zZXRfbV9jb252ZXhUb1dvcmxkXzE9ZnVuY3Rpb24oKXtyZXR1cm4oVl89dC5fZWJfQ2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrX3NldF9tX2NvbnZleFRvV29ybGRfMT10LmFzbS5pZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxRXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfZ2V0X21faGl0Tm9ybWFsV29ybGRfMD1mdW5jdGlvbigpe3JldHVybihRXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfZ2V0X21faGl0Tm9ybWFsV29ybGRfMD10LmFzbS5qZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfc2V0X21faGl0Tm9ybWFsV29ybGRfMT1mdW5jdGlvbigpe3JldHVybihFXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfc2V0X21faGl0Tm9ybWFsV29ybGRfMT10LmFzbS5rZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxYXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfZ2V0X21faGl0UG9pbnRXb3JsZF8wPWZ1bmN0aW9uKCl7cmV0dXJuKFhfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19nZXRfbV9oaXRQb2ludFdvcmxkXzA9dC5hc20ubGQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sVV89dC5fZWJfQ2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrX3NldF9tX2hpdFBvaW50V29ybGRfMT1mdW5jdGlvbigpe3JldHVybihVXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfc2V0X21faGl0UG9pbnRXb3JsZF8xPXQuYXNtLm1kKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEdfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19nZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cF8wPWZ1bmN0aW9uKCl7cmV0dXJuKEdfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19nZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cF8wPXQuYXNtLm5kKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE5fPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19zZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cF8xPWZ1bmN0aW9uKCl7cmV0dXJuKE5fPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19zZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cF8xPXQuYXNtLm9kKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHpfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19nZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrXzA9ZnVuY3Rpb24oKXtyZXR1cm4oel89dC5fZWJfQ2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrX2dldF9tX2NvbGxpc2lvbkZpbHRlck1hc2tfMD10LmFzbS5wZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxxXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfc2V0X21fY29sbGlzaW9uRmlsdGVyTWFza18xPWZ1bmN0aW9uKCl7cmV0dXJuKHFfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19zZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrXzE9dC5hc20ucWQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sWl89dC5fZWJfQ2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrX2dldF9tX2Nsb3Nlc3RIaXRGcmFjdGlvbl8wPWZ1bmN0aW9uKCl7cmV0dXJuKFpfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19nZXRfbV9jbG9zZXN0SGl0RnJhY3Rpb25fMD10LmFzbS5yZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxLXz10Ll9lYl9DbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tfc2V0X21fY2xvc2VzdEhpdEZyYWN0aW9uXzE9ZnVuY3Rpb24oKXtyZXR1cm4oS189dC5fZWJfQ2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrX3NldF9tX2Nsb3Nlc3RIaXRGcmFjdGlvbl8xPXQuYXNtLnNkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LCRfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKCRfPXQuX2ViX0Nsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja19fX2Rlc3Ryb3lfX18wPXQuYXNtLnRkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEpfPXQuX2ViX2J0Q29udmV4U2hhcGVfc2V0TG9jYWxTY2FsaW5nXzE9ZnVuY3Rpb24oKXtyZXR1cm4oSl89dC5fZWJfYnRDb252ZXhTaGFwZV9zZXRMb2NhbFNjYWxpbmdfMT10LmFzbS51ZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx0aT10Ll9lYl9idENvbnZleFNoYXBlX2dldExvY2FsU2NhbGluZ18wPWZ1bmN0aW9uKCl7cmV0dXJuKHRpPXQuX2ViX2J0Q29udmV4U2hhcGVfZ2V0TG9jYWxTY2FsaW5nXzA9dC5hc20udmQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZWk9dC5fZWJfYnRDb252ZXhTaGFwZV9jYWxjdWxhdGVMb2NhbEluZXJ0aWFfMj1mdW5jdGlvbigpe3JldHVybihlaT10Ll9lYl9idENvbnZleFNoYXBlX2NhbGN1bGF0ZUxvY2FsSW5lcnRpYV8yPXQuYXNtLndkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LG9pPXQuX2ViX2J0Q29udmV4U2hhcGVfc2V0TWFyZ2luXzE9ZnVuY3Rpb24oKXtyZXR1cm4ob2k9dC5fZWJfYnRDb252ZXhTaGFwZV9zZXRNYXJnaW5fMT10LmFzbS54ZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxuaT10Ll9lYl9idENvbnZleFNoYXBlX2dldE1hcmdpbl8wPWZ1bmN0aW9uKCl7cmV0dXJuKG5pPXQuX2ViX2J0Q29udmV4U2hhcGVfZ2V0TWFyZ2luXzA9dC5hc20ueWQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0scmk9dC5fZWJfYnRDb252ZXhTaGFwZV9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKHJpPXQuX2ViX2J0Q29udmV4U2hhcGVfX19kZXN0cm95X19fMD10LmFzbS56ZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxfaT10Ll9lYl9idEJveFNoYXBlX2J0Qm94U2hhcGVfMT1mdW5jdGlvbigpe3JldHVybihfaT10Ll9lYl9idEJveFNoYXBlX2J0Qm94U2hhcGVfMT10LmFzbS5BZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxpaT10Ll9lYl9idEJveFNoYXBlX3NldE1hcmdpbl8xPWZ1bmN0aW9uKCl7cmV0dXJuKGlpPXQuX2ViX2J0Qm94U2hhcGVfc2V0TWFyZ2luXzE9dC5hc20uQmQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYWk9dC5fZWJfYnRCb3hTaGFwZV9nZXRNYXJnaW5fMD1mdW5jdGlvbigpe3JldHVybihhaT10Ll9lYl9idEJveFNoYXBlX2dldE1hcmdpbl8wPXQuYXNtLkNkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHNpPXQuX2ViX2J0Qm94U2hhcGVfc2V0TG9jYWxTY2FsaW5nXzE9ZnVuY3Rpb24oKXtyZXR1cm4oc2k9dC5fZWJfYnRCb3hTaGFwZV9zZXRMb2NhbFNjYWxpbmdfMT10LmFzbS5EZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxwaT10Ll9lYl9idEJveFNoYXBlX2dldExvY2FsU2NhbGluZ18wPWZ1bmN0aW9uKCl7cmV0dXJuKHBpPXQuX2ViX2J0Qm94U2hhcGVfZ2V0TG9jYWxTY2FsaW5nXzA9dC5hc20uRWQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbGk9dC5fZWJfYnRCb3hTaGFwZV9jYWxjdWxhdGVMb2NhbEluZXJ0aWFfMj1mdW5jdGlvbigpe3JldHVybihsaT10Ll9lYl9idEJveFNoYXBlX2NhbGN1bGF0ZUxvY2FsSW5lcnRpYV8yPXQuYXNtLkZkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHVpPXQuX2ViX2J0Qm94U2hhcGVfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybih1aT10Ll9lYl9idEJveFNoYXBlX19fZGVzdHJveV9fXzA9dC5hc20uR2QpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sY2k9dC5fZWJfYnRJbnRBcnJheV9zaXplXzA9ZnVuY3Rpb24oKXtyZXR1cm4oY2k9dC5fZWJfYnRJbnRBcnJheV9zaXplXzA9dC5hc20uSGQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0seWk9dC5fZWJfYnRJbnRBcnJheV9hdF8xPWZ1bmN0aW9uKCl7cmV0dXJuKHlpPXQuX2ViX2J0SW50QXJyYXlfYXRfMT10LmFzbS5JZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxoaT10Ll9lYl9idEludEFycmF5X19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oaGk9dC5fZWJfYnRJbnRBcnJheV9fX2Rlc3Ryb3lfX18wPXQuYXNtLkpkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGZpPXQuX2ViX2J0RmFjZV9nZXRfbV9pbmRpY2VzXzA9ZnVuY3Rpb24oKXtyZXR1cm4oZmk9dC5fZWJfYnRGYWNlX2dldF9tX2luZGljZXNfMD10LmFzbS5LZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxtaT10Ll9lYl9idEZhY2Vfc2V0X21faW5kaWNlc18xPWZ1bmN0aW9uKCl7cmV0dXJuKG1pPXQuX2ViX2J0RmFjZV9zZXRfbV9pbmRpY2VzXzE9dC5hc20uTGQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYmk9dC5fZWJfYnRGYWNlX2dldF9tX3BsYW5lXzE9ZnVuY3Rpb24oKXtyZXR1cm4oYmk9dC5fZWJfYnRGYWNlX2dldF9tX3BsYW5lXzE9dC5hc20uTWQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZ2k9dC5fZWJfYnRGYWNlX3NldF9tX3BsYW5lXzI9ZnVuY3Rpb24oKXtyZXR1cm4oZ2k9dC5fZWJfYnRGYWNlX3NldF9tX3BsYW5lXzI9dC5hc20uTmQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZGk9dC5fZWJfYnRGYWNlX19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oZGk9dC5fZWJfYnRGYWNlX19fZGVzdHJveV9fXzA9dC5hc20uT2QpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sV2k9dC5fZWJfYnRWZWN0b3IzQXJyYXlfc2l6ZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKFdpPXQuX2ViX2J0VmVjdG9yM0FycmF5X3NpemVfMD10LmFzbS5QZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDaT10Ll9lYl9idFZlY3RvcjNBcnJheV9hdF8xPWZ1bmN0aW9uKCl7cmV0dXJuKENpPXQuX2ViX2J0VmVjdG9yM0FycmF5X2F0XzE9dC5hc20uUWQpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0samk9dC5fZWJfYnRWZWN0b3IzQXJyYXlfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihqaT10Ll9lYl9idFZlY3RvcjNBcnJheV9fX2Rlc3Ryb3lfX18wPXQuYXNtLlJkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHZpPXQuX2ViX2J0RmFjZUFycmF5X3NpemVfMD1mdW5jdGlvbigpe3JldHVybih2aT10Ll9lYl9idEZhY2VBcnJheV9zaXplXzA9dC5hc20uU2QpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRGk9dC5fZWJfYnRGYWNlQXJyYXlfYXRfMT1mdW5jdGlvbigpe3JldHVybihEaT10Ll9lYl9idEZhY2VBcnJheV9hdF8xPXQuYXNtLlRkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFJpPXQuX2ViX2J0RmFjZUFycmF5X19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oUmk9dC5fZWJfYnRGYWNlQXJyYXlfX19kZXN0cm95X19fMD10LmFzbS5VZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxTaT10Ll9lYl9idENvbnZleFBvbHloZWRyb25fZ2V0X21fdmVydGljZXNfMD1mdW5jdGlvbigpe3JldHVybihTaT10Ll9lYl9idENvbnZleFBvbHloZWRyb25fZ2V0X21fdmVydGljZXNfMD10LmFzbS5WZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxJaT10Ll9lYl9idENvbnZleFBvbHloZWRyb25fc2V0X21fdmVydGljZXNfMT1mdW5jdGlvbigpe3JldHVybihJaT10Ll9lYl9idENvbnZleFBvbHloZWRyb25fc2V0X21fdmVydGljZXNfMT10LmFzbS5XZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxCaT10Ll9lYl9idENvbnZleFBvbHloZWRyb25fZ2V0X21fZmFjZXNfMD1mdW5jdGlvbigpe3JldHVybihCaT10Ll9lYl9idENvbnZleFBvbHloZWRyb25fZ2V0X21fZmFjZXNfMD10LmFzbS5YZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxPaT10Ll9lYl9idENvbnZleFBvbHloZWRyb25fc2V0X21fZmFjZXNfMT1mdW5jdGlvbigpe3JldHVybihPaT10Ll9lYl9idENvbnZleFBvbHloZWRyb25fc2V0X21fZmFjZXNfMT10LmFzbS5ZZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxQaT10Ll9lYl9idENvbnZleFBvbHloZWRyb25fX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihQaT10Ll9lYl9idENvbnZleFBvbHloZWRyb25fX19kZXN0cm95X19fMD10LmFzbS5aZCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx4aT10Ll9lYl9idENvbnZleEh1bGxTaGFwZV9idENvbnZleEh1bGxTaGFwZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKHhpPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX2J0Q29udmV4SHVsbFNoYXBlXzA9dC5hc20uX2QpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sVGk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfYnRDb252ZXhIdWxsU2hhcGVfMT1mdW5jdGlvbigpe3JldHVybihUaT10Ll9lYl9idENvbnZleEh1bGxTaGFwZV9idENvbnZleEh1bGxTaGFwZV8xPXQuYXNtLiRkKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEZpPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX2J0Q29udmV4SHVsbFNoYXBlXzI9ZnVuY3Rpb24oKXtyZXR1cm4oRmk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfYnRDb252ZXhIdWxsU2hhcGVfMj10LmFzbS5hZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxNaT10Ll9lYl9idENvbnZleEh1bGxTaGFwZV9hZGRQb2ludF8xPWZ1bmN0aW9uKCl7cmV0dXJuKE1pPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX2FkZFBvaW50XzE9dC5hc20uYmUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQWk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfYWRkUG9pbnRfMj1mdW5jdGlvbigpe3JldHVybihBaT10Ll9lYl9idENvbnZleEh1bGxTaGFwZV9hZGRQb2ludF8yPXQuYXNtLmNlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHdpPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX3NldE1hcmdpbl8xPWZ1bmN0aW9uKCl7cmV0dXJuKHdpPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX3NldE1hcmdpbl8xPXQuYXNtLmRlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LExpPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX2dldE1hcmdpbl8wPWZ1bmN0aW9uKCl7cmV0dXJuKExpPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX2dldE1hcmdpbl8wPXQuYXNtLmVlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGtpPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX2dldE51bVZlcnRpY2VzXzA9ZnVuY3Rpb24oKXtyZXR1cm4oa2k9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfZ2V0TnVtVmVydGljZXNfMD10LmFzbS5mZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxIaT10Ll9lYl9idENvbnZleEh1bGxTaGFwZV9pbml0aWFsaXplUG9seWhlZHJhbEZlYXR1cmVzXzE9ZnVuY3Rpb24oKXtyZXR1cm4oSGk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfaW5pdGlhbGl6ZVBvbHloZWRyYWxGZWF0dXJlc18xPXQuYXNtLmdlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFlpPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX3JlY2FsY0xvY2FsQWFiYl8wPWZ1bmN0aW9uKCl7cmV0dXJuKFlpPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX3JlY2FsY0xvY2FsQWFiYl8wPXQuYXNtLmhlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFZpPXQuX2ViX2J0Q29udmV4SHVsbFNoYXBlX2dldENvbnZleFBvbHloZWRyb25fMD1mdW5jdGlvbigpe3JldHVybihWaT10Ll9lYl9idENvbnZleEh1bGxTaGFwZV9nZXRDb252ZXhQb2x5aGVkcm9uXzA9dC5hc20uaWUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUWk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfc2V0TG9jYWxTY2FsaW5nXzE9ZnVuY3Rpb24oKXtyZXR1cm4oUWk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfc2V0TG9jYWxTY2FsaW5nXzE9dC5hc20uamUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRWk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfZ2V0TG9jYWxTY2FsaW5nXzA9ZnVuY3Rpb24oKXtyZXR1cm4oRWk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfZ2V0TG9jYWxTY2FsaW5nXzA9dC5hc20ua2UpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sWGk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfY2FsY3VsYXRlTG9jYWxJbmVydGlhXzI9ZnVuY3Rpb24oKXtyZXR1cm4oWGk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfY2FsY3VsYXRlTG9jYWxJbmVydGlhXzI9dC5hc20ubGUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sVWk9dC5fZWJfYnRDb252ZXhIdWxsU2hhcGVfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihVaT10Ll9lYl9idENvbnZleEh1bGxTaGFwZV9fX2Rlc3Ryb3lfX18wPXQuYXNtLm1lKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEdpPXQuX2ViX2J0RGVmYXVsdENvbGxpc2lvbkNvbnN0cnVjdGlvbkluZm9fYnREZWZhdWx0Q29sbGlzaW9uQ29uc3RydWN0aW9uSW5mb18wPWZ1bmN0aW9uKCl7cmV0dXJuKEdpPXQuX2ViX2J0RGVmYXVsdENvbGxpc2lvbkNvbnN0cnVjdGlvbkluZm9fYnREZWZhdWx0Q29sbGlzaW9uQ29uc3RydWN0aW9uSW5mb18wPXQuYXNtLm5lKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE5pPXQuX2ViX2J0RGVmYXVsdENvbGxpc2lvbkNvbnN0cnVjdGlvbkluZm9fX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihOaT10Ll9lYl9idERlZmF1bHRDb2xsaXNpb25Db25zdHJ1Y3Rpb25JbmZvX19fZGVzdHJveV9fXzA9dC5hc20ub2UpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0semk9dC5fZWJfYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbl9idERlZmF1bHRDb2xsaXNpb25Db25maWd1cmF0aW9uXzA9ZnVuY3Rpb24oKXtyZXR1cm4oemk9dC5fZWJfYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbl9idERlZmF1bHRDb2xsaXNpb25Db25maWd1cmF0aW9uXzA9dC5hc20ucGUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0scWk9dC5fZWJfYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbl9idERlZmF1bHRDb2xsaXNpb25Db25maWd1cmF0aW9uXzE9ZnVuY3Rpb24oKXtyZXR1cm4ocWk9dC5fZWJfYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbl9idERlZmF1bHRDb2xsaXNpb25Db25maWd1cmF0aW9uXzE9dC5hc20ucWUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sWmk9dC5fZWJfYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbl9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKFppPXQuX2ViX2J0RGVmYXVsdENvbGxpc2lvbkNvbmZpZ3VyYXRpb25fX19kZXN0cm95X19fMD10LmFzbS5yZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxLaT10Ll9lYl9idFBlcnNpc3RlbnRNYW5pZm9sZF9idFBlcnNpc3RlbnRNYW5pZm9sZF8wPWZ1bmN0aW9uKCl7cmV0dXJuKEtpPXQuX2ViX2J0UGVyc2lzdGVudE1hbmlmb2xkX2J0UGVyc2lzdGVudE1hbmlmb2xkXzA9dC5hc20uc2UpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sJGk9dC5fZWJfYnRQZXJzaXN0ZW50TWFuaWZvbGRfZ2V0Qm9keTBfMD1mdW5jdGlvbigpe3JldHVybigkaT10Ll9lYl9idFBlcnNpc3RlbnRNYW5pZm9sZF9nZXRCb2R5MF8wPXQuYXNtLnRlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEppPXQuX2ViX2J0UGVyc2lzdGVudE1hbmlmb2xkX2dldEJvZHkxXzA9ZnVuY3Rpb24oKXtyZXR1cm4oSmk9dC5fZWJfYnRQZXJzaXN0ZW50TWFuaWZvbGRfZ2V0Qm9keTFfMD10LmFzbS51ZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx0YT10Ll9lYl9idFBlcnNpc3RlbnRNYW5pZm9sZF9nZXROdW1Db250YWN0c18wPWZ1bmN0aW9uKCl7cmV0dXJuKHRhPXQuX2ViX2J0UGVyc2lzdGVudE1hbmlmb2xkX2dldE51bUNvbnRhY3RzXzA9dC5hc20udmUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZWE9dC5fZWJfYnRQZXJzaXN0ZW50TWFuaWZvbGRfZ2V0Q29udGFjdFBvaW50XzE9ZnVuY3Rpb24oKXtyZXR1cm4oZWE9dC5fZWJfYnRQZXJzaXN0ZW50TWFuaWZvbGRfZ2V0Q29udGFjdFBvaW50XzE9dC5hc20ud2UpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sb2E9dC5fZWJfYnRQZXJzaXN0ZW50TWFuaWZvbGRfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihvYT10Ll9lYl9idFBlcnNpc3RlbnRNYW5pZm9sZF9fX2Rlc3Ryb3lfX18wPXQuYXNtLnhlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LG5hPXQuX2ViX2J0Q29sbGlzaW9uRGlzcGF0Y2hlcl9idENvbGxpc2lvbkRpc3BhdGNoZXJfMT1mdW5jdGlvbigpe3JldHVybihuYT10Ll9lYl9idENvbGxpc2lvbkRpc3BhdGNoZXJfYnRDb2xsaXNpb25EaXNwYXRjaGVyXzE9dC5hc20ueWUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0scmE9dC5fZWJfYnRDb2xsaXNpb25EaXNwYXRjaGVyX2dldE51bU1hbmlmb2xkc18wPWZ1bmN0aW9uKCl7cmV0dXJuKHJhPXQuX2ViX2J0Q29sbGlzaW9uRGlzcGF0Y2hlcl9nZXROdW1NYW5pZm9sZHNfMD10LmFzbS56ZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxfYT10Ll9lYl9idENvbGxpc2lvbkRpc3BhdGNoZXJfZ2V0TWFuaWZvbGRCeUluZGV4SW50ZXJuYWxfMT1mdW5jdGlvbigpe3JldHVybihfYT10Ll9lYl9idENvbGxpc2lvbkRpc3BhdGNoZXJfZ2V0TWFuaWZvbGRCeUluZGV4SW50ZXJuYWxfMT10LmFzbS5BZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxpYT10Ll9lYl9idENvbGxpc2lvbkRpc3BhdGNoZXJfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihpYT10Ll9lYl9idENvbGxpc2lvbkRpc3BhdGNoZXJfX19kZXN0cm95X19fMD10LmFzbS5CZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxhYT10Ll9lYl9idE92ZXJsYXBwaW5nUGFpckNhbGxiYWNrX19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oYWE9dC5fZWJfYnRPdmVybGFwcGluZ1BhaXJDYWxsYmFja19fX2Rlc3Ryb3lfX18wPXQuYXNtLkNlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHNhPXQuX2ViX2J0T3ZlcmxhcHBpbmdQYWlyQ2FjaGVfc2V0SW50ZXJuYWxHaG9zdFBhaXJDYWxsYmFja18xPWZ1bmN0aW9uKCl7cmV0dXJuKHNhPXQuX2ViX2J0T3ZlcmxhcHBpbmdQYWlyQ2FjaGVfc2V0SW50ZXJuYWxHaG9zdFBhaXJDYWxsYmFja18xPXQuYXNtLkRlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHBhPXQuX2ViX2J0T3ZlcmxhcHBpbmdQYWlyQ2FjaGVfZ2V0TnVtT3ZlcmxhcHBpbmdQYWlyc18wPWZ1bmN0aW9uKCl7cmV0dXJuKHBhPXQuX2ViX2J0T3ZlcmxhcHBpbmdQYWlyQ2FjaGVfZ2V0TnVtT3ZlcmxhcHBpbmdQYWlyc18wPXQuYXNtLkVlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGxhPXQuX2ViX2J0T3ZlcmxhcHBpbmdQYWlyQ2FjaGVfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihsYT10Ll9lYl9idE92ZXJsYXBwaW5nUGFpckNhY2hlX19fZGVzdHJveV9fXzA9dC5hc20uRmUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sdWE9dC5fZWJfYnRCcm9hZHBoYXNlSW50ZXJmYWNlX2dldE92ZXJsYXBwaW5nUGFpckNhY2hlXzA9ZnVuY3Rpb24oKXtyZXR1cm4odWE9dC5fZWJfYnRCcm9hZHBoYXNlSW50ZXJmYWNlX2dldE92ZXJsYXBwaW5nUGFpckNhY2hlXzA9dC5hc20uR2UpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sY2E9dC5fZWJfYnRCcm9hZHBoYXNlSW50ZXJmYWNlX19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oY2E9dC5fZWJfYnRCcm9hZHBoYXNlSW50ZXJmYWNlX19fZGVzdHJveV9fXzA9dC5hc20uSGUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0seWE9dC5fZWJfYnRDb2xsaXNpb25Db25maWd1cmF0aW9uX19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oeWE9dC5fZWJfYnRDb2xsaXNpb25Db25maWd1cmF0aW9uX19fZGVzdHJveV9fXzA9dC5hc20uSWUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0saGE9dC5fZWJfYnREYnZ0QnJvYWRwaGFzZV9idERidnRCcm9hZHBoYXNlXzA9ZnVuY3Rpb24oKXtyZXR1cm4oaGE9dC5fZWJfYnREYnZ0QnJvYWRwaGFzZV9idERidnRCcm9hZHBoYXNlXzA9dC5hc20uSmUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZmE9dC5fZWJfYnREYnZ0QnJvYWRwaGFzZV9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKGZhPXQuX2ViX2J0RGJ2dEJyb2FkcGhhc2VfX19kZXN0cm95X19fMD10LmFzbS5LZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxtYT10Ll9lYl9idEJyb2FkcGhhc2VQcm94eV9nZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cF8wPWZ1bmN0aW9uKCl7cmV0dXJuKG1hPXQuX2ViX2J0QnJvYWRwaGFzZVByb3h5X2dldF9tX2NvbGxpc2lvbkZpbHRlckdyb3VwXzA9dC5hc20uTGUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYmE9dC5fZWJfYnRCcm9hZHBoYXNlUHJveHlfc2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXBfMT1mdW5jdGlvbigpe3JldHVybihiYT10Ll9lYl9idEJyb2FkcGhhc2VQcm94eV9zZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cF8xPXQuYXNtLk1lKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGdhPXQuX2ViX2J0QnJvYWRwaGFzZVByb3h5X2dldF9tX2NvbGxpc2lvbkZpbHRlck1hc2tfMD1mdW5jdGlvbigpe3JldHVybihnYT10Ll9lYl9idEJyb2FkcGhhc2VQcm94eV9nZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrXzA9dC5hc20uTmUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZGE9dC5fZWJfYnRCcm9hZHBoYXNlUHJveHlfc2V0X21fY29sbGlzaW9uRmlsdGVyTWFza18xPWZ1bmN0aW9uKCl7cmV0dXJuKGRhPXQuX2ViX2J0QnJvYWRwaGFzZVByb3h5X3NldF9tX2NvbGxpc2lvbkZpbHRlck1hc2tfMT10LmFzbS5PZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxXYT10Ll9lYl9idEJyb2FkcGhhc2VQcm94eV9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKFdhPXQuX2ViX2J0QnJvYWRwaGFzZVByb3h5X19fZGVzdHJveV9fXzA9dC5hc20uUGUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQ2E9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb18zPWZ1bmN0aW9uKCl7cmV0dXJuKENhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fMz10LmFzbS5RZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxqYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvXzQ9ZnVuY3Rpb24oKXtyZXR1cm4oamE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb180PXQuYXNtLlJlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHZhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19nZXRfbV9saW5lYXJEYW1waW5nXzA9ZnVuY3Rpb24oKXtyZXR1cm4odmE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX2dldF9tX2xpbmVhckRhbXBpbmdfMD10LmFzbS5TZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxEYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fc2V0X21fbGluZWFyRGFtcGluZ18xPWZ1bmN0aW9uKCl7cmV0dXJuKERhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19zZXRfbV9saW5lYXJEYW1waW5nXzE9dC5hc20uVGUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUmE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX2dldF9tX2FuZ3VsYXJEYW1waW5nXzA9ZnVuY3Rpb24oKXtyZXR1cm4oUmE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX2dldF9tX2FuZ3VsYXJEYW1waW5nXzA9dC5hc20uVWUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sU2E9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX3NldF9tX2FuZ3VsYXJEYW1waW5nXzE9ZnVuY3Rpb24oKXtyZXR1cm4oU2E9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX3NldF9tX2FuZ3VsYXJEYW1waW5nXzE9dC5hc20uVmUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sSWE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX2dldF9tX2ZyaWN0aW9uXzA9ZnVuY3Rpb24oKXtyZXR1cm4oSWE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX2dldF9tX2ZyaWN0aW9uXzA9dC5hc20uV2UpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQmE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX3NldF9tX2ZyaWN0aW9uXzE9ZnVuY3Rpb24oKXtyZXR1cm4oQmE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX3NldF9tX2ZyaWN0aW9uXzE9dC5hc20uWGUpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sT2E9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX2dldF9tX3JvbGxpbmdGcmljdGlvbl8wPWZ1bmN0aW9uKCl7cmV0dXJuKE9hPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19nZXRfbV9yb2xsaW5nRnJpY3Rpb25fMD10LmFzbS5ZZSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxQYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fc2V0X21fcm9sbGluZ0ZyaWN0aW9uXzE9ZnVuY3Rpb24oKXtyZXR1cm4oUGE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX3NldF9tX3JvbGxpbmdGcmljdGlvbl8xPXQuYXNtLlplKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHhhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19nZXRfbV9yZXN0aXR1dGlvbl8wPWZ1bmN0aW9uKCl7cmV0dXJuKHhhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19nZXRfbV9yZXN0aXR1dGlvbl8wPXQuYXNtLl9lKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFRhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19zZXRfbV9yZXN0aXR1dGlvbl8xPWZ1bmN0aW9uKCl7cmV0dXJuKFRhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19zZXRfbV9yZXN0aXR1dGlvbl8xPXQuYXNtLiRlKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEZhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19nZXRfbV9saW5lYXJTbGVlcGluZ1RocmVzaG9sZF8wPWZ1bmN0aW9uKCl7cmV0dXJuKEZhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19nZXRfbV9saW5lYXJTbGVlcGluZ1RocmVzaG9sZF8wPXQuYXNtLmFmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE1hPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19zZXRfbV9saW5lYXJTbGVlcGluZ1RocmVzaG9sZF8xPWZ1bmN0aW9uKCl7cmV0dXJuKE1hPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19zZXRfbV9saW5lYXJTbGVlcGluZ1RocmVzaG9sZF8xPXQuYXNtLmJmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEFhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19nZXRfbV9hbmd1bGFyU2xlZXBpbmdUaHJlc2hvbGRfMD1mdW5jdGlvbigpe3JldHVybihBYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fZ2V0X21fYW5ndWxhclNsZWVwaW5nVGhyZXNob2xkXzA9dC5hc20uY2YpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sd2E9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX3NldF9tX2FuZ3VsYXJTbGVlcGluZ1RocmVzaG9sZF8xPWZ1bmN0aW9uKCl7cmV0dXJuKHdhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19zZXRfbV9hbmd1bGFyU2xlZXBpbmdUaHJlc2hvbGRfMT10LmFzbS5kZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxMYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fZ2V0X21fYWRkaXRpb25hbERhbXBpbmdfMD1mdW5jdGlvbigpe3JldHVybihMYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fZ2V0X21fYWRkaXRpb25hbERhbXBpbmdfMD10LmFzbS5lZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxrYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fc2V0X21fYWRkaXRpb25hbERhbXBpbmdfMT1mdW5jdGlvbigpe3JldHVybihrYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fc2V0X21fYWRkaXRpb25hbERhbXBpbmdfMT10LmFzbS5mZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxIYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fZ2V0X21fYWRkaXRpb25hbERhbXBpbmdGYWN0b3JfMD1mdW5jdGlvbigpe3JldHVybihIYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fZ2V0X21fYWRkaXRpb25hbERhbXBpbmdGYWN0b3JfMD10LmFzbS5nZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxZYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fc2V0X21fYWRkaXRpb25hbERhbXBpbmdGYWN0b3JfMT1mdW5jdGlvbigpe3JldHVybihZYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fc2V0X21fYWRkaXRpb25hbERhbXBpbmdGYWN0b3JfMT10LmFzbS5oZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxWYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fZ2V0X21fYWRkaXRpb25hbExpbmVhckRhbXBpbmdUaHJlc2hvbGRTcXJfMD1mdW5jdGlvbigpe3JldHVybihWYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fZ2V0X21fYWRkaXRpb25hbExpbmVhckRhbXBpbmdUaHJlc2hvbGRTcXJfMD10LmFzbS5qZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxRYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fc2V0X21fYWRkaXRpb25hbExpbmVhckRhbXBpbmdUaHJlc2hvbGRTcXJfMT1mdW5jdGlvbigpe3JldHVybihRYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fc2V0X21fYWRkaXRpb25hbExpbmVhckRhbXBpbmdUaHJlc2hvbGRTcXJfMT10LmFzbS5rZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fZ2V0X21fYWRkaXRpb25hbEFuZ3VsYXJEYW1waW5nVGhyZXNob2xkU3FyXzA9ZnVuY3Rpb24oKXtyZXR1cm4oRWE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX2dldF9tX2FkZGl0aW9uYWxBbmd1bGFyRGFtcGluZ1RocmVzaG9sZFNxcl8wPXQuYXNtLmxmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFhhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19zZXRfbV9hZGRpdGlvbmFsQW5ndWxhckRhbXBpbmdUaHJlc2hvbGRTcXJfMT1mdW5jdGlvbigpe3JldHVybihYYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fc2V0X21fYWRkaXRpb25hbEFuZ3VsYXJEYW1waW5nVGhyZXNob2xkU3FyXzE9dC5hc20ubWYpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sVWE9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX2dldF9tX2FkZGl0aW9uYWxBbmd1bGFyRGFtcGluZ0ZhY3Rvcl8wPWZ1bmN0aW9uKCl7cmV0dXJuKFVhPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19nZXRfbV9hZGRpdGlvbmFsQW5ndWxhckRhbXBpbmdGYWN0b3JfMD10LmFzbS5uZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxHYT10Ll9lYl9idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm9fc2V0X21fYWRkaXRpb25hbEFuZ3VsYXJEYW1waW5nRmFjdG9yXzE9ZnVuY3Rpb24oKXtyZXR1cm4oR2E9dC5fZWJfYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvX3NldF9tX2FkZGl0aW9uYWxBbmd1bGFyRGFtcGluZ0ZhY3Rvcl8xPXQuYXNtLm9mKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE5hPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKE5hPXQuX2ViX2J0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mb19fX2Rlc3Ryb3lfX18wPXQuYXNtLnBmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHphPXQuX2ViX2J0UmlnaWRCb2R5X2J0UmlnaWRCb2R5XzE9ZnVuY3Rpb24oKXtyZXR1cm4oemE9dC5fZWJfYnRSaWdpZEJvZHlfYnRSaWdpZEJvZHlfMT10LmFzbS5xZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxxYT10Ll9lYl9idFJpZ2lkQm9keV9nZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm1fMD1mdW5jdGlvbigpe3JldHVybihxYT10Ll9lYl9idFJpZ2lkQm9keV9nZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm1fMD10LmFzbS5yZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxaYT10Ll9lYl9idFJpZ2lkQm9keV9zZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm1fMT1mdW5jdGlvbigpe3JldHVybihaYT10Ll9lYl9idFJpZ2lkQm9keV9zZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm1fMT10LmFzbS5zZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxLYT10Ll9lYl9idFJpZ2lkQm9keV9zZXRTbGVlcGluZ1RocmVzaG9sZHNfMj1mdW5jdGlvbigpe3JldHVybihLYT10Ll9lYl9idFJpZ2lkQm9keV9zZXRTbGVlcGluZ1RocmVzaG9sZHNfMj10LmFzbS50ZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSwkYT10Ll9lYl9idFJpZ2lkQm9keV9nZXRMaW5lYXJEYW1waW5nXzA9ZnVuY3Rpb24oKXtyZXR1cm4oJGE9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0TGluZWFyRGFtcGluZ18wPXQuYXNtLnVmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEphPXQuX2ViX2J0UmlnaWRCb2R5X2dldEFuZ3VsYXJEYW1waW5nXzA9ZnVuY3Rpb24oKXtyZXR1cm4oSmE9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0QW5ndWxhckRhbXBpbmdfMD10LmFzbS52ZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx0cz10Ll9lYl9idFJpZ2lkQm9keV9zZXREYW1waW5nXzI9ZnVuY3Rpb24oKXtyZXR1cm4odHM9dC5fZWJfYnRSaWdpZEJvZHlfc2V0RGFtcGluZ18yPXQuYXNtLndmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGVzPXQuX2ViX2J0UmlnaWRCb2R5X3NldE1hc3NQcm9wc18yPWZ1bmN0aW9uKCl7cmV0dXJuKGVzPXQuX2ViX2J0UmlnaWRCb2R5X3NldE1hc3NQcm9wc18yPXQuYXNtLnhmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LG9zPXQuX2ViX2J0UmlnaWRCb2R5X2dldExpbmVhckZhY3Rvcl8wPWZ1bmN0aW9uKCl7cmV0dXJuKG9zPXQuX2ViX2J0UmlnaWRCb2R5X2dldExpbmVhckZhY3Rvcl8wPXQuYXNtLnlmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LG5zPXQuX2ViX2J0UmlnaWRCb2R5X3NldExpbmVhckZhY3Rvcl8xPWZ1bmN0aW9uKCl7cmV0dXJuKG5zPXQuX2ViX2J0UmlnaWRCb2R5X3NldExpbmVhckZhY3Rvcl8xPXQuYXNtLnpmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHJzPXQuX2ViX2J0UmlnaWRCb2R5X2FwcGx5VG9ycXVlXzE9ZnVuY3Rpb24oKXtyZXR1cm4ocnM9dC5fZWJfYnRSaWdpZEJvZHlfYXBwbHlUb3JxdWVfMT10LmFzbS5BZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxfcz10Ll9lYl9idFJpZ2lkQm9keV9hcHBseUxvY2FsVG9ycXVlXzE9ZnVuY3Rpb24oKXtyZXR1cm4oX3M9dC5fZWJfYnRSaWdpZEJvZHlfYXBwbHlMb2NhbFRvcnF1ZV8xPXQuYXNtLkJmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGlzPXQuX2ViX2J0UmlnaWRCb2R5X2FwcGx5Rm9yY2VfMj1mdW5jdGlvbigpe3JldHVybihpcz10Ll9lYl9idFJpZ2lkQm9keV9hcHBseUZvcmNlXzI9dC5hc20uQ2YpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYXM9dC5fZWJfYnRSaWdpZEJvZHlfYXBwbHlDZW50cmFsRm9yY2VfMT1mdW5jdGlvbigpe3JldHVybihhcz10Ll9lYl9idFJpZ2lkQm9keV9hcHBseUNlbnRyYWxGb3JjZV8xPXQuYXNtLkRmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHNzPXQuX2ViX2J0UmlnaWRCb2R5X2FwcGx5Q2VudHJhbExvY2FsRm9yY2VfMT1mdW5jdGlvbigpe3JldHVybihzcz10Ll9lYl9idFJpZ2lkQm9keV9hcHBseUNlbnRyYWxMb2NhbEZvcmNlXzE9dC5hc20uRWYpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0scHM9dC5fZWJfYnRSaWdpZEJvZHlfYXBwbHlUb3JxdWVJbXB1bHNlXzE9ZnVuY3Rpb24oKXtyZXR1cm4ocHM9dC5fZWJfYnRSaWdpZEJvZHlfYXBwbHlUb3JxdWVJbXB1bHNlXzE9dC5hc20uRmYpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbHM9dC5fZWJfYnRSaWdpZEJvZHlfYXBwbHlJbXB1bHNlXzI9ZnVuY3Rpb24oKXtyZXR1cm4obHM9dC5fZWJfYnRSaWdpZEJvZHlfYXBwbHlJbXB1bHNlXzI9dC5hc20uR2YpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sdXM9dC5fZWJfYnRSaWdpZEJvZHlfYXBwbHlDZW50cmFsSW1wdWxzZV8xPWZ1bmN0aW9uKCl7cmV0dXJuKHVzPXQuX2ViX2J0UmlnaWRCb2R5X2FwcGx5Q2VudHJhbEltcHVsc2VfMT10LmFzbS5IZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxjcz10Ll9lYl9idFJpZ2lkQm9keV91cGRhdGVJbmVydGlhVGVuc29yXzA9ZnVuY3Rpb24oKXtyZXR1cm4oY3M9dC5fZWJfYnRSaWdpZEJvZHlfdXBkYXRlSW5lcnRpYVRlbnNvcl8wPXQuYXNtLklmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHlzPXQuX2ViX2J0UmlnaWRCb2R5X2dldExpbmVhclZlbG9jaXR5XzA9ZnVuY3Rpb24oKXtyZXR1cm4oeXM9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0TGluZWFyVmVsb2NpdHlfMD10LmFzbS5KZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxocz10Ll9lYl9idFJpZ2lkQm9keV9nZXRBbmd1bGFyVmVsb2NpdHlfMD1mdW5jdGlvbigpe3JldHVybihocz10Ll9lYl9idFJpZ2lkQm9keV9nZXRBbmd1bGFyVmVsb2NpdHlfMD10LmFzbS5LZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxmcz10Ll9lYl9idFJpZ2lkQm9keV9zZXRMaW5lYXJWZWxvY2l0eV8xPWZ1bmN0aW9uKCl7cmV0dXJuKGZzPXQuX2ViX2J0UmlnaWRCb2R5X3NldExpbmVhclZlbG9jaXR5XzE9dC5hc20uTGYpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbXM9dC5fZWJfYnRSaWdpZEJvZHlfc2V0QW5ndWxhclZlbG9jaXR5XzE9ZnVuY3Rpb24oKXtyZXR1cm4obXM9dC5fZWJfYnRSaWdpZEJvZHlfc2V0QW5ndWxhclZlbG9jaXR5XzE9dC5hc20uTWYpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYnM9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0TW90aW9uU3RhdGVfMD1mdW5jdGlvbigpe3JldHVybihicz10Ll9lYl9idFJpZ2lkQm9keV9nZXRNb3Rpb25TdGF0ZV8wPXQuYXNtLk5mKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGdzPXQuX2ViX2J0UmlnaWRCb2R5X3NldE1vdGlvblN0YXRlXzE9ZnVuY3Rpb24oKXtyZXR1cm4oZ3M9dC5fZWJfYnRSaWdpZEJvZHlfc2V0TW90aW9uU3RhdGVfMT10LmFzbS5PZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxkcz10Ll9lYl9idFJpZ2lkQm9keV9nZXRBbmd1bGFyRmFjdG9yXzA9ZnVuY3Rpb24oKXtyZXR1cm4oZHM9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0QW5ndWxhckZhY3Rvcl8wPXQuYXNtLlBmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFdzPXQuX2ViX2J0UmlnaWRCb2R5X3NldEFuZ3VsYXJGYWN0b3JfMT1mdW5jdGlvbigpe3JldHVybihXcz10Ll9lYl9idFJpZ2lkQm9keV9zZXRBbmd1bGFyRmFjdG9yXzE9dC5hc20uUWYpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQ3M9dC5fZWJfYnRSaWdpZEJvZHlfdXBjYXN0XzE9ZnVuY3Rpb24oKXtyZXR1cm4oQ3M9dC5fZWJfYnRSaWdpZEJvZHlfdXBjYXN0XzE9dC5hc20uUmYpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sanM9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0QWFiYl8yPWZ1bmN0aW9uKCl7cmV0dXJuKGpzPXQuX2ViX2J0UmlnaWRCb2R5X2dldEFhYmJfMj10LmFzbS5TZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx2cz10Ll9lYl9idFJpZ2lkQm9keV9hcHBseUdyYXZpdHlfMD1mdW5jdGlvbigpe3JldHVybih2cz10Ll9lYl9idFJpZ2lkQm9keV9hcHBseUdyYXZpdHlfMD10LmFzbS5UZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxEcz10Ll9lYl9idFJpZ2lkQm9keV9nZXRHcmF2aXR5XzA9ZnVuY3Rpb24oKXtyZXR1cm4oRHM9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0R3Jhdml0eV8wPXQuYXNtLlVmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFJzPXQuX2ViX2J0UmlnaWRCb2R5X3NldEdyYXZpdHlfMT1mdW5jdGlvbigpe3JldHVybihScz10Ll9lYl9idFJpZ2lkQm9keV9zZXRHcmF2aXR5XzE9dC5hc20uVmYpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sU3M9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0QnJvYWRwaGFzZVByb3h5XzA9ZnVuY3Rpb24oKXtyZXR1cm4oU3M9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0QnJvYWRwaGFzZVByb3h5XzA9dC5hc20uV2YpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sSXM9dC5fZWJfYnRSaWdpZEJvZHlfY2xlYXJGb3JjZXNfMD1mdW5jdGlvbigpe3JldHVybihJcz10Ll9lYl9idFJpZ2lkQm9keV9jbGVhckZvcmNlc18wPXQuYXNtLlhmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEJzPXQuX2ViX2J0UmlnaWRCb2R5X3NldEFuaXNvdHJvcGljRnJpY3Rpb25fMj1mdW5jdGlvbigpe3JldHVybihCcz10Ll9lYl9idFJpZ2lkQm9keV9zZXRBbmlzb3Ryb3BpY0ZyaWN0aW9uXzI9dC5hc20uWWYpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sT3M9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0Q29sbGlzaW9uU2hhcGVfMD1mdW5jdGlvbigpe3JldHVybihPcz10Ll9lYl9idFJpZ2lkQm9keV9nZXRDb2xsaXNpb25TaGFwZV8wPXQuYXNtLlpmKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFBzPXQuX2ViX2J0UmlnaWRCb2R5X3NldENvbnRhY3RQcm9jZXNzaW5nVGhyZXNob2xkXzE9ZnVuY3Rpb24oKXtyZXR1cm4oUHM9dC5fZWJfYnRSaWdpZEJvZHlfc2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGRfMT10LmFzbS5fZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx4cz10Ll9lYl9idFJpZ2lkQm9keV9zZXRBY3RpdmF0aW9uU3RhdGVfMT1mdW5jdGlvbigpe3JldHVybih4cz10Ll9lYl9idFJpZ2lkQm9keV9zZXRBY3RpdmF0aW9uU3RhdGVfMT10LmFzbS4kZikuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxUcz10Ll9lYl9idFJpZ2lkQm9keV9mb3JjZUFjdGl2YXRpb25TdGF0ZV8xPWZ1bmN0aW9uKCl7cmV0dXJuKFRzPXQuX2ViX2J0UmlnaWRCb2R5X2ZvcmNlQWN0aXZhdGlvblN0YXRlXzE9dC5hc20uYWcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRnM9dC5fZWJfYnRSaWdpZEJvZHlfYWN0aXZhdGVfMD1mdW5jdGlvbigpe3JldHVybihGcz10Ll9lYl9idFJpZ2lkQm9keV9hY3RpdmF0ZV8wPXQuYXNtLmJnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE1zPXQuX2ViX2J0UmlnaWRCb2R5X2FjdGl2YXRlXzE9ZnVuY3Rpb24oKXtyZXR1cm4oTXM9dC5fZWJfYnRSaWdpZEJvZHlfYWN0aXZhdGVfMT10LmFzbS5jZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxBcz10Ll9lYl9idFJpZ2lkQm9keV9pc0FjdGl2ZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKEFzPXQuX2ViX2J0UmlnaWRCb2R5X2lzQWN0aXZlXzA9dC5hc20uZGcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sd3M9dC5fZWJfYnRSaWdpZEJvZHlfaXNLaW5lbWF0aWNPYmplY3RfMD1mdW5jdGlvbigpe3JldHVybih3cz10Ll9lYl9idFJpZ2lkQm9keV9pc0tpbmVtYXRpY09iamVjdF8wPXQuYXNtLmVnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LExzPXQuX2ViX2J0UmlnaWRCb2R5X2lzU3RhdGljT2JqZWN0XzA9ZnVuY3Rpb24oKXtyZXR1cm4oTHM9dC5fZWJfYnRSaWdpZEJvZHlfaXNTdGF0aWNPYmplY3RfMD10LmFzbS5mZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxrcz10Ll9lYl9idFJpZ2lkQm9keV9pc1N0YXRpY09yS2luZW1hdGljT2JqZWN0XzA9ZnVuY3Rpb24oKXtyZXR1cm4oa3M9dC5fZWJfYnRSaWdpZEJvZHlfaXNTdGF0aWNPcktpbmVtYXRpY09iamVjdF8wPXQuYXNtLmdnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEhzPXQuX2ViX2J0UmlnaWRCb2R5X2dldFJlc3RpdHV0aW9uXzA9ZnVuY3Rpb24oKXtyZXR1cm4oSHM9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0UmVzdGl0dXRpb25fMD10LmFzbS5oZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxZcz10Ll9lYl9idFJpZ2lkQm9keV9nZXRGcmljdGlvbl8wPWZ1bmN0aW9uKCl7cmV0dXJuKFlzPXQuX2ViX2J0UmlnaWRCb2R5X2dldEZyaWN0aW9uXzA9dC5hc20uaWcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sVnM9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0Um9sbGluZ0ZyaWN0aW9uXzA9ZnVuY3Rpb24oKXtyZXR1cm4oVnM9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0Um9sbGluZ0ZyaWN0aW9uXzA9dC5hc20uamcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUXM9dC5fZWJfYnRSaWdpZEJvZHlfc2V0UmVzdGl0dXRpb25fMT1mdW5jdGlvbigpe3JldHVybihRcz10Ll9lYl9idFJpZ2lkQm9keV9zZXRSZXN0aXR1dGlvbl8xPXQuYXNtLmtnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEVzPXQuX2ViX2J0UmlnaWRCb2R5X3NldEZyaWN0aW9uXzE9ZnVuY3Rpb24oKXtyZXR1cm4oRXM9dC5fZWJfYnRSaWdpZEJvZHlfc2V0RnJpY3Rpb25fMT10LmFzbS5sZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxYcz10Ll9lYl9idFJpZ2lkQm9keV9zZXRSb2xsaW5nRnJpY3Rpb25fMT1mdW5jdGlvbigpe3JldHVybihYcz10Ll9lYl9idFJpZ2lkQm9keV9zZXRSb2xsaW5nRnJpY3Rpb25fMT10LmFzbS5tZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxVcz10Ll9lYl9idFJpZ2lkQm9keV9nZXRXb3JsZFRyYW5zZm9ybV8wPWZ1bmN0aW9uKCl7cmV0dXJuKFVzPXQuX2ViX2J0UmlnaWRCb2R5X2dldFdvcmxkVHJhbnNmb3JtXzA9dC5hc20ubmcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sR3M9dC5fZWJfYnRSaWdpZEJvZHlfZ2V0Q29sbGlzaW9uRmxhZ3NfMD1mdW5jdGlvbigpe3JldHVybihHcz10Ll9lYl9idFJpZ2lkQm9keV9nZXRDb2xsaXNpb25GbGFnc18wPXQuYXNtLm9nKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE5zPXQuX2ViX2J0UmlnaWRCb2R5X3NldENvbGxpc2lvbkZsYWdzXzE9ZnVuY3Rpb24oKXtyZXR1cm4oTnM9dC5fZWJfYnRSaWdpZEJvZHlfc2V0Q29sbGlzaW9uRmxhZ3NfMT10LmFzbS5wZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx6cz10Ll9lYl9idFJpZ2lkQm9keV9zZXRXb3JsZFRyYW5zZm9ybV8xPWZ1bmN0aW9uKCl7cmV0dXJuKHpzPXQuX2ViX2J0UmlnaWRCb2R5X3NldFdvcmxkVHJhbnNmb3JtXzE9dC5hc20ucWcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0scXM9dC5fZWJfYnRSaWdpZEJvZHlfc2V0Q29sbGlzaW9uU2hhcGVfMT1mdW5jdGlvbigpe3JldHVybihxcz10Ll9lYl9idFJpZ2lkQm9keV9zZXRDb2xsaXNpb25TaGFwZV8xPXQuYXNtLnJnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFpzPXQuX2ViX2J0UmlnaWRCb2R5X3NldENjZE1vdGlvblRocmVzaG9sZF8xPWZ1bmN0aW9uKCl7cmV0dXJuKFpzPXQuX2ViX2J0UmlnaWRCb2R5X3NldENjZE1vdGlvblRocmVzaG9sZF8xPXQuYXNtLnNnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEtzPXQuX2ViX2J0UmlnaWRCb2R5X3NldENjZFN3ZXB0U3BoZXJlUmFkaXVzXzE9ZnVuY3Rpb24oKXtyZXR1cm4oS3M9dC5fZWJfYnRSaWdpZEJvZHlfc2V0Q2NkU3dlcHRTcGhlcmVSYWRpdXNfMT10LmFzbS50ZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSwkcz10Ll9lYl9idFJpZ2lkQm9keV9nZXRVc2VySW5kZXhfMD1mdW5jdGlvbigpe3JldHVybigkcz10Ll9lYl9idFJpZ2lkQm9keV9nZXRVc2VySW5kZXhfMD10LmFzbS51ZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxKcz10Ll9lYl9idFJpZ2lkQm9keV9zZXRVc2VySW5kZXhfMT1mdW5jdGlvbigpe3JldHVybihKcz10Ll9lYl9idFJpZ2lkQm9keV9zZXRVc2VySW5kZXhfMT10LmFzbS52ZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx0cD10Ll9lYl9idFJpZ2lkQm9keV9nZXRVc2VyUG9pbnRlcl8wPWZ1bmN0aW9uKCl7cmV0dXJuKHRwPXQuX2ViX2J0UmlnaWRCb2R5X2dldFVzZXJQb2ludGVyXzA9dC5hc20ud2cpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZXA9dC5fZWJfYnRSaWdpZEJvZHlfc2V0VXNlclBvaW50ZXJfMT1mdW5jdGlvbigpe3JldHVybihlcD10Ll9lYl9idFJpZ2lkQm9keV9zZXRVc2VyUG9pbnRlcl8xPXQuYXNtLnhnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LG9wPXQuX2ViX2J0UmlnaWRCb2R5X2dldEJyb2FkcGhhc2VIYW5kbGVfMD1mdW5jdGlvbigpe3JldHVybihvcD10Ll9lYl9idFJpZ2lkQm9keV9nZXRCcm9hZHBoYXNlSGFuZGxlXzA9dC5hc20ueWcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbnA9dC5fZWJfYnRSaWdpZEJvZHlfX19kZXN0cm95X19fMD1mdW5jdGlvbigpe3JldHVybihucD10Ll9lYl9idFJpZ2lkQm9keV9fX2Rlc3Ryb3lfX18wPXQuYXNtLnpnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHJwPXQuX2ViX2J0U2VxdWVudGlhbEltcHVsc2VDb25zdHJhaW50U29sdmVyX2J0U2VxdWVudGlhbEltcHVsc2VDb25zdHJhaW50U29sdmVyXzA9ZnVuY3Rpb24oKXtyZXR1cm4ocnA9dC5fZWJfYnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXJfYnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXJfMD10LmFzbS5BZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxfcD10Ll9lYl9idFNlcXVlbnRpYWxJbXB1bHNlQ29uc3RyYWludFNvbHZlcl9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKF9wPXQuX2ViX2J0U2VxdWVudGlhbEltcHVsc2VDb25zdHJhaW50U29sdmVyX19fZGVzdHJveV9fXzA9dC5hc20uQmcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0saXA9dC5fZWJfYnRDb25zdHJhaW50U29sdmVyX19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oaXA9dC5fZWJfYnRDb25zdHJhaW50U29sdmVyX19fZGVzdHJveV9fXzA9dC5hc20uQ2cpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYXA9dC5fZWJfYnREaXNwYXRjaGVySW5mb19nZXRfbV90aW1lU3RlcF8wPWZ1bmN0aW9uKCl7cmV0dXJuKGFwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fZ2V0X21fdGltZVN0ZXBfMD10LmFzbS5EZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxzcD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX3NldF9tX3RpbWVTdGVwXzE9ZnVuY3Rpb24oKXtyZXR1cm4oc3A9dC5fZWJfYnREaXNwYXRjaGVySW5mb19zZXRfbV90aW1lU3RlcF8xPXQuYXNtLkVnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHBwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fZ2V0X21fc3RlcENvdW50XzA9ZnVuY3Rpb24oKXtyZXR1cm4ocHA9dC5fZWJfYnREaXNwYXRjaGVySW5mb19nZXRfbV9zdGVwQ291bnRfMD10LmFzbS5GZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxscD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX3NldF9tX3N0ZXBDb3VudF8xPWZ1bmN0aW9uKCl7cmV0dXJuKGxwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fc2V0X21fc3RlcENvdW50XzE9dC5hc20uR2cpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sdXA9dC5fZWJfYnREaXNwYXRjaGVySW5mb19nZXRfbV9kaXNwYXRjaEZ1bmNfMD1mdW5jdGlvbigpe3JldHVybih1cD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX2dldF9tX2Rpc3BhdGNoRnVuY18wPXQuYXNtLkhnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGNwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fc2V0X21fZGlzcGF0Y2hGdW5jXzE9ZnVuY3Rpb24oKXtyZXR1cm4oY3A9dC5fZWJfYnREaXNwYXRjaGVySW5mb19zZXRfbV9kaXNwYXRjaEZ1bmNfMT10LmFzbS5JZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx5cD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX2dldF9tX3RpbWVPZkltcGFjdF8wPWZ1bmN0aW9uKCl7cmV0dXJuKHlwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fZ2V0X21fdGltZU9mSW1wYWN0XzA9dC5hc20uSmcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0saHA9dC5fZWJfYnREaXNwYXRjaGVySW5mb19zZXRfbV90aW1lT2ZJbXBhY3RfMT1mdW5jdGlvbigpe3JldHVybihocD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX3NldF9tX3RpbWVPZkltcGFjdF8xPXQuYXNtLktnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGZwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fZ2V0X21fdXNlQ29udGludW91c18wPWZ1bmN0aW9uKCl7cmV0dXJuKGZwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fZ2V0X21fdXNlQ29udGludW91c18wPXQuYXNtLkxnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LG1wPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fc2V0X21fdXNlQ29udGludW91c18xPWZ1bmN0aW9uKCl7cmV0dXJuKG1wPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fc2V0X21fdXNlQ29udGludW91c18xPXQuYXNtLk1nKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGJwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fZ2V0X21fZW5hYmxlU2F0Q29udmV4XzA9ZnVuY3Rpb24oKXtyZXR1cm4oYnA9dC5fZWJfYnREaXNwYXRjaGVySW5mb19nZXRfbV9lbmFibGVTYXRDb252ZXhfMD10LmFzbS5OZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxncD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX3NldF9tX2VuYWJsZVNhdENvbnZleF8xPWZ1bmN0aW9uKCl7cmV0dXJuKGdwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fc2V0X21fZW5hYmxlU2F0Q29udmV4XzE9dC5hc20uT2cpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZHA9dC5fZWJfYnREaXNwYXRjaGVySW5mb19nZXRfbV9lbmFibGVTUFVfMD1mdW5jdGlvbigpe3JldHVybihkcD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX2dldF9tX2VuYWJsZVNQVV8wPXQuYXNtLlBnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFdwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fc2V0X21fZW5hYmxlU1BVXzE9ZnVuY3Rpb24oKXtyZXR1cm4oV3A9dC5fZWJfYnREaXNwYXRjaGVySW5mb19zZXRfbV9lbmFibGVTUFVfMT10LmFzbS5RZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDcD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX2dldF9tX3VzZUVwYV8wPWZ1bmN0aW9uKCl7cmV0dXJuKENwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fZ2V0X21fdXNlRXBhXzA9dC5hc20uUmcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sanA9dC5fZWJfYnREaXNwYXRjaGVySW5mb19zZXRfbV91c2VFcGFfMT1mdW5jdGlvbigpe3JldHVybihqcD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX3NldF9tX3VzZUVwYV8xPXQuYXNtLlNnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHZwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fZ2V0X21fYWxsb3dlZENjZFBlbmV0cmF0aW9uXzA9ZnVuY3Rpb24oKXtyZXR1cm4odnA9dC5fZWJfYnREaXNwYXRjaGVySW5mb19nZXRfbV9hbGxvd2VkQ2NkUGVuZXRyYXRpb25fMD10LmFzbS5UZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxEcD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX3NldF9tX2FsbG93ZWRDY2RQZW5ldHJhdGlvbl8xPWZ1bmN0aW9uKCl7cmV0dXJuKERwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fc2V0X21fYWxsb3dlZENjZFBlbmV0cmF0aW9uXzE9dC5hc20uVWcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUnA9dC5fZWJfYnREaXNwYXRjaGVySW5mb19nZXRfbV91c2VDb252ZXhDb25zZXJ2YXRpdmVEaXN0YW5jZVV0aWxfMD1mdW5jdGlvbigpe3JldHVybihScD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX2dldF9tX3VzZUNvbnZleENvbnNlcnZhdGl2ZURpc3RhbmNlVXRpbF8wPXQuYXNtLlZnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFNwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fc2V0X21fdXNlQ29udmV4Q29uc2VydmF0aXZlRGlzdGFuY2VVdGlsXzE9ZnVuY3Rpb24oKXtyZXR1cm4oU3A9dC5fZWJfYnREaXNwYXRjaGVySW5mb19zZXRfbV91c2VDb252ZXhDb25zZXJ2YXRpdmVEaXN0YW5jZVV0aWxfMT10LmFzbS5XZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxJcD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX2dldF9tX2NvbnZleENvbnNlcnZhdGl2ZURpc3RhbmNlVGhyZXNob2xkXzA9ZnVuY3Rpb24oKXtyZXR1cm4oSXA9dC5fZWJfYnREaXNwYXRjaGVySW5mb19nZXRfbV9jb252ZXhDb25zZXJ2YXRpdmVEaXN0YW5jZVRocmVzaG9sZF8wPXQuYXNtLlhnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEJwPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fc2V0X21fY29udmV4Q29uc2VydmF0aXZlRGlzdGFuY2VUaHJlc2hvbGRfMT1mdW5jdGlvbigpe3JldHVybihCcD10Ll9lYl9idERpc3BhdGNoZXJJbmZvX3NldF9tX2NvbnZleENvbnNlcnZhdGl2ZURpc3RhbmNlVGhyZXNob2xkXzE9dC5hc20uWWcpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sT3A9dC5fZWJfYnREaXNwYXRjaGVySW5mb19fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKE9wPXQuX2ViX2J0RGlzcGF0Y2hlckluZm9fX19kZXN0cm95X19fMD10LmFzbS5aZykuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxQcD10Ll9lYl9idENvbnRhY3RTb2x2ZXJJbmZvX2dldF9tX3NwbGl0SW1wdWxzZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKFBwPXQuX2ViX2J0Q29udGFjdFNvbHZlckluZm9fZ2V0X21fc3BsaXRJbXB1bHNlXzA9dC5hc20uX2cpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0seHA9dC5fZWJfYnRDb250YWN0U29sdmVySW5mb19zZXRfbV9zcGxpdEltcHVsc2VfMT1mdW5jdGlvbigpe3JldHVybih4cD10Ll9lYl9idENvbnRhY3RTb2x2ZXJJbmZvX3NldF9tX3NwbGl0SW1wdWxzZV8xPXQuYXNtLiRnKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFRwPXQuX2ViX2J0Q29udGFjdFNvbHZlckluZm9fZ2V0X21fc3BsaXRJbXB1bHNlUGVuZXRyYXRpb25UaHJlc2hvbGRfMD1mdW5jdGlvbigpe3JldHVybihUcD10Ll9lYl9idENvbnRhY3RTb2x2ZXJJbmZvX2dldF9tX3NwbGl0SW1wdWxzZVBlbmV0cmF0aW9uVGhyZXNob2xkXzA9dC5hc20uYWgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRnA9dC5fZWJfYnRDb250YWN0U29sdmVySW5mb19zZXRfbV9zcGxpdEltcHVsc2VQZW5ldHJhdGlvblRocmVzaG9sZF8xPWZ1bmN0aW9uKCl7cmV0dXJuKEZwPXQuX2ViX2J0Q29udGFjdFNvbHZlckluZm9fc2V0X21fc3BsaXRJbXB1bHNlUGVuZXRyYXRpb25UaHJlc2hvbGRfMT10LmFzbS5iaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxNcD10Ll9lYl9idENvbnRhY3RTb2x2ZXJJbmZvX2dldF9tX251bUl0ZXJhdGlvbnNfMD1mdW5jdGlvbigpe3JldHVybihNcD10Ll9lYl9idENvbnRhY3RTb2x2ZXJJbmZvX2dldF9tX251bUl0ZXJhdGlvbnNfMD10LmFzbS5jaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxBcD10Ll9lYl9idENvbnRhY3RTb2x2ZXJJbmZvX3NldF9tX251bUl0ZXJhdGlvbnNfMT1mdW5jdGlvbigpe3JldHVybihBcD10Ll9lYl9idENvbnRhY3RTb2x2ZXJJbmZvX3NldF9tX251bUl0ZXJhdGlvbnNfMT10LmFzbS5kaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx3cD10Ll9lYl9idENvbnRhY3RTb2x2ZXJJbmZvX19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4od3A9dC5fZWJfYnRDb250YWN0U29sdmVySW5mb19fX2Rlc3Ryb3lfX18wPXQuYXNtLmVoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LExwPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkXzQ9ZnVuY3Rpb24oKXtyZXR1cm4oTHA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfND10LmFzbS5maCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxrcD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9zZXRHcmF2aXR5XzE9ZnVuY3Rpb24oKXtyZXR1cm4oa3A9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfc2V0R3Jhdml0eV8xPXQuYXNtLmdoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEhwPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX2dldEdyYXZpdHlfMD1mdW5jdGlvbigpe3JldHVybihIcD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9nZXRHcmF2aXR5XzA9dC5hc20uaGgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sWXA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYWRkUmlnaWRCb2R5XzE9ZnVuY3Rpb24oKXtyZXR1cm4oWXA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYWRkUmlnaWRCb2R5XzE9dC5hc20uaWgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sVnA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYWRkUmlnaWRCb2R5XzM9ZnVuY3Rpb24oKXtyZXR1cm4oVnA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYWRkUmlnaWRCb2R5XzM9dC5hc20uamgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUXA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfcmVtb3ZlUmlnaWRCb2R5XzE9ZnVuY3Rpb24oKXtyZXR1cm4oUXA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfcmVtb3ZlUmlnaWRCb2R5XzE9dC5hc20ua2gpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRXA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfc3RlcFNpbXVsYXRpb25fMT1mdW5jdGlvbigpe3JldHVybihFcD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9zdGVwU2ltdWxhdGlvbl8xPXQuYXNtLmxoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFhwPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX3N0ZXBTaW11bGF0aW9uXzI9ZnVuY3Rpb24oKXtyZXR1cm4oWHA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfc3RlcFNpbXVsYXRpb25fMj10LmFzbS5taCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxVcD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9zdGVwU2ltdWxhdGlvbl8zPWZ1bmN0aW9uKCl7cmV0dXJuKFVwPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX3N0ZXBTaW11bGF0aW9uXzM9dC5hc20ubmgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sR3A9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfc2V0Q29udGFjdEFkZGVkQ2FsbGJhY2tfMT1mdW5jdGlvbigpe3JldHVybihHcD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9zZXRDb250YWN0QWRkZWRDYWxsYmFja18xPXQuYXNtLm9oKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LE5wPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX3NldENvbnRhY3RQcm9jZXNzZWRDYWxsYmFja18xPWZ1bmN0aW9uKCl7cmV0dXJuKE5wPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX3NldENvbnRhY3RQcm9jZXNzZWRDYWxsYmFja18xPXQuYXNtLnBoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHpwPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX3NldENvbnRhY3REZXN0cm95ZWRDYWxsYmFja18xPWZ1bmN0aW9uKCl7cmV0dXJuKHpwPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX3NldENvbnRhY3REZXN0cm95ZWRDYWxsYmFja18xPXQuYXNtLnFoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHFwPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX2dldERpc3BhdGNoZXJfMD1mdW5jdGlvbigpe3JldHVybihxcD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9nZXREaXNwYXRjaGVyXzA9dC5hc20ucmgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sWnA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfZ2V0UGFpckNhY2hlXzA9ZnVuY3Rpb24oKXtyZXR1cm4oWnA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfZ2V0UGFpckNhY2hlXzA9dC5hc20uc2gpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sS3A9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfZ2V0RGlzcGF0Y2hJbmZvXzA9ZnVuY3Rpb24oKXtyZXR1cm4oS3A9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfZ2V0RGlzcGF0Y2hJbmZvXzA9dC5hc20udGgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sJHA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzE9ZnVuY3Rpb24oKXtyZXR1cm4oJHA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzE9dC5hc20udWgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sSnA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzI9ZnVuY3Rpb24oKXtyZXR1cm4oSnA9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzI9dC5hc20udmgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sdGw9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzM9ZnVuY3Rpb24oKXtyZXR1cm4odGw9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfYWRkQ29sbGlzaW9uT2JqZWN0XzM9dC5hc20ud2gpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZWw9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfcmVtb3ZlQ29sbGlzaW9uT2JqZWN0XzE9ZnVuY3Rpb24oKXtyZXR1cm4oZWw9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfcmVtb3ZlQ29sbGlzaW9uT2JqZWN0XzE9dC5hc20ueGgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sb2w9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfZ2V0QnJvYWRwaGFzZV8wPWZ1bmN0aW9uKCl7cmV0dXJuKG9sPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX2dldEJyb2FkcGhhc2VfMD10LmFzbS55aCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxubD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9jb252ZXhTd2VlcFRlc3RfNT1mdW5jdGlvbigpe3JldHVybihubD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9jb252ZXhTd2VlcFRlc3RfNT10LmFzbS56aCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxybD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9jb250YWN0UGFpclRlc3RfMz1mdW5jdGlvbigpe3JldHVybihybD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9jb250YWN0UGFpclRlc3RfMz10LmFzbS5BaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxfbD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9jb250YWN0VGVzdF8yPWZ1bmN0aW9uKCl7cmV0dXJuKF9sPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX2NvbnRhY3RUZXN0XzI9dC5hc20uQmgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0saWw9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfdXBkYXRlU2luZ2xlQWFiYl8xPWZ1bmN0aW9uKCl7cmV0dXJuKGlsPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX3VwZGF0ZVNpbmdsZUFhYmJfMT10LmFzbS5DaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxhbD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9hZGRBY3Rpb25fMT1mdW5jdGlvbigpe3JldHVybihhbD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9hZGRBY3Rpb25fMT10LmFzbS5EaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxzbD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9yZW1vdmVBY3Rpb25fMT1mdW5jdGlvbigpe3JldHVybihzbD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9yZW1vdmVBY3Rpb25fMT10LmFzbS5FaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxwbD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9nZXRTb2x2ZXJJbmZvXzA9ZnVuY3Rpb24oKXtyZXR1cm4ocGw9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfZ2V0U29sdmVySW5mb18wPXQuYXNtLkZoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGxsPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX3NldEludGVybmFsVGlja0NhbGxiYWNrXzE9ZnVuY3Rpb24oKXtyZXR1cm4obGw9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfc2V0SW50ZXJuYWxUaWNrQ2FsbGJhY2tfMT10LmFzbS5HaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx1bD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9zZXRJbnRlcm5hbFRpY2tDYWxsYmFja18yPWZ1bmN0aW9uKCl7cmV0dXJuKHVsPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX3NldEludGVybmFsVGlja0NhbGxiYWNrXzI9dC5hc20uSGgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sY2w9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfc2V0SW50ZXJuYWxUaWNrQ2FsbGJhY2tfMz1mdW5jdGlvbigpe3JldHVybihjbD10Ll9lYl9idERpc2NyZXRlRHluYW1pY3NXb3JsZF9zZXRJbnRlcm5hbFRpY2tDYWxsYmFja18zPXQuYXNtLkloKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHlsPXQuX2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX19fZGVzdHJveV9fXzA9ZnVuY3Rpb24oKXtyZXR1cm4oeWw9dC5fZWJfYnREaXNjcmV0ZUR5bmFtaWNzV29ybGRfX19kZXN0cm95X19fMD10LmFzbS5KaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxobD10Ll9lYl9idEFjdGlvbkludGVyZmFjZV91cGRhdGVBY3Rpb25fMj1mdW5jdGlvbigpe3JldHVybihobD10Ll9lYl9idEFjdGlvbkludGVyZmFjZV91cGRhdGVBY3Rpb25fMj10LmFzbS5LaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxmbD10Ll9lYl9idEFjdGlvbkludGVyZmFjZV9fX2Rlc3Ryb3lfX18wPWZ1bmN0aW9uKCl7cmV0dXJuKGZsPXQuX2ViX2J0QWN0aW9uSW50ZXJmYWNlX19fZGVzdHJveV9fXzA9dC5hc20uTGgpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sbWw9dC5fZW1zY3JpcHRlbl9lbnVtX1BIWV9TY2FsYXJUeXBlX1BIWV9GTE9BVD1mdW5jdGlvbigpe3JldHVybihtbD10Ll9lbXNjcmlwdGVuX2VudW1fUEhZX1NjYWxhclR5cGVfUEhZX0ZMT0FUPXQuYXNtLk1oKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGJsPXQuX2Vtc2NyaXB0ZW5fZW51bV9QSFlfU2NhbGFyVHlwZV9QSFlfRE9VQkxFPWZ1bmN0aW9uKCl7cmV0dXJuKGJsPXQuX2Vtc2NyaXB0ZW5fZW51bV9QSFlfU2NhbGFyVHlwZV9QSFlfRE9VQkxFPXQuYXNtLk5oKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGdsPXQuX2Vtc2NyaXB0ZW5fZW51bV9QSFlfU2NhbGFyVHlwZV9QSFlfSU5URUdFUj1mdW5jdGlvbigpe3JldHVybihnbD10Ll9lbXNjcmlwdGVuX2VudW1fUEhZX1NjYWxhclR5cGVfUEhZX0lOVEVHRVI9dC5hc20uT2gpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZGw9dC5fZW1zY3JpcHRlbl9lbnVtX1BIWV9TY2FsYXJUeXBlX1BIWV9TSE9SVD1mdW5jdGlvbigpe3JldHVybihkbD10Ll9lbXNjcmlwdGVuX2VudW1fUEhZX1NjYWxhclR5cGVfUEhZX1NIT1JUPXQuYXNtLlBoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFdsPXQuX2Vtc2NyaXB0ZW5fZW51bV9QSFlfU2NhbGFyVHlwZV9QSFlfRklYRURQT0lOVDg4PWZ1bmN0aW9uKCl7cmV0dXJuKFdsPXQuX2Vtc2NyaXB0ZW5fZW51bV9QSFlfU2NhbGFyVHlwZV9QSFlfRklYRURQT0lOVDg4PXQuYXNtLlFoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LENsPXQuX2Vtc2NyaXB0ZW5fZW51bV9QSFlfU2NhbGFyVHlwZV9QSFlfVUNIQVI9ZnVuY3Rpb24oKXtyZXR1cm4oQ2w9dC5fZW1zY3JpcHRlbl9lbnVtX1BIWV9TY2FsYXJUeXBlX1BIWV9VQ0hBUj10LmFzbS5SaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt0Ll9tYWxsb2M9ZnVuY3Rpb24oKXtyZXR1cm4odC5fbWFsbG9jPXQuYXNtLlNoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHQuX2ZyZWU9ZnVuY3Rpb24oKXtyZXR1cm4odC5fZnJlZT10LmFzbS5UaCkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx0LmR5bkNhbGxfdmk9ZnVuY3Rpb24oKXtyZXR1cm4odC5keW5DYWxsX3ZpPXQuYXNtLlVoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHQuZHluQ2FsbF92PWZ1bmN0aW9uKCl7cmV0dXJuKHQuZHluQ2FsbF92PXQuYXNtLlZoKS5hcHBseShudWxsLGFyZ3VtZW50cyl9LHQuYWRkRnVuY3Rpb249ZnVuY3Rpb24oZSxvKXtpZighYnQpe2J0PW5ldyBXZWFrTWFwO2Zvcih2YXIgbj0wO248U3QubGVuZ3RoO24rKyl7dmFyIHI9U3QuZ2V0KG4pO3ImJmJ0LnNldChyLG4pfX1pZihidC5oYXMoZSkpZT1idC5nZXQoZSk7ZWxzZXtpZihZdC5sZW5ndGgpbj1ZdC5wb3AoKTtlbHNle249U3QubGVuZ3RoO3RyeXtTdC5ncm93KDEpfWNhdGNoKGh0KXt0aHJvdyBodCBpbnN0YW5jZW9mIFJhbmdlRXJyb3I/IlVuYWJsZSB0byBncm93IHdhc20gdGFibGUuIFNldCBBTExPV19UQUJMRV9HUk9XVEguIjpodH19dHJ5e1N0LnNldChuLGUpfWNhdGNoKGh0KXtpZighKGh0IGluc3RhbmNlb2YgVHlwZUVycm9yKSl0aHJvdyBodDtpZih0eXBlb2YgV2ViQXNzZW1ibHkuRnVuY3Rpb249PSJmdW5jdGlvbiIpe3ZhciBjPXtpOiJpMzIiLGo6Imk2NCIsZjoiZjMyIixkOiJmNjQifSxEPXtwYXJhbWV0ZXJzOltdLHJlc3VsdHM6b1swXT09InYiP1tdOltjW29bMF1dXX07Zm9yKHI9MTtyPG8ubGVuZ3RoOysrcilELnBhcmFtZXRlcnMucHVzaChjW29bcl1dKTtvPW5ldyBXZWJBc3NlbWJseS5GdW5jdGlvbihELGUpfWVsc2V7Yz1bMSwwLDEsOTZdLEQ9by5zbGljZSgwLDEpLG89by5zbGljZSgxKTt2YXIgWj17aToxMjcsajoxMjYsZjoxMjUsZDoxMjR9O2ZvcihjLnB1c2goby5sZW5ndGgpLHI9MDtyPG8ubGVuZ3RoOysrciljLnB1c2goWltvW3JdXSk7RD09InYiP2MucHVzaCgwKTpjPWMuY29uY2F0KFsxLFpbRF1dKSxjWzFdPWMubGVuZ3RoLTIsbz1uZXcgVWludDhBcnJheShbMCw5NywxMTUsMTA5LDEsMCwwLDBdLmNvbmNhdChjLFsyLDcsMSwxLDEwMSwxLDEwMiwwLDAsNyw1LDEsMSwxMDIsMCwwXSkpLG89bmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShvKSxvPW5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShvLHtlOntmOmV9fSkuZXhwb3J0cy5mfVN0LnNldChuLG8pfWJ0LnNldChlLG4pLGU9bn1yZXR1cm4gZX07dmFyIGFlO0t0PWZ1bmN0aW9uIGUoKXthZXx8Q2UoKSxhZXx8KEt0PWUpfTtmdW5jdGlvbiBDZSgpe2Z1bmN0aW9uIGUoKXtpZighYWUmJihhZT0hMCx0LmNhbGxlZFJ1bj0hMCwhbmUpKXtpZihGZT0hMCx6dChpZSksenQoTXQpLGQodCksdC5vblJ1bnRpbWVJbml0aWFsaXplZCYmdC5vblJ1bnRpbWVJbml0aWFsaXplZCgpLHQucG9zdFJ1bilmb3IodHlwZW9mIHQucG9zdFJ1bj09ImZ1bmN0aW9uIiYmKHQucG9zdFJ1bj1bdC5wb3N0UnVuXSk7dC5wb3N0UnVuLmxlbmd0aDspe3ZhciBvPXQucG9zdFJ1bi5zaGlmdCgpO1RlLnVuc2hpZnQobyl9enQoVGUpfX1pZighKDA8VXQpKXtpZih0LnByZVJ1bilmb3IodHlwZW9mIHQucHJlUnVuPT0iZnVuY3Rpb24iJiYodC5wcmVSdW49W3QucHJlUnVuXSk7dC5wcmVSdW4ubGVuZ3RoOylGbCgpO3p0KF9lKSwwPFV0fHwodC5zZXRTdGF0dXM/KHQuc2V0U3RhdHVzKCJSdW5uaW5nLi4uIiksc2V0VGltZW91dChmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0LnNldFN0YXR1cygiIil9LDEpLGUoKX0sMSkpOmUoKSl9fWlmKHQucnVuPUNlLHQucHJlSW5pdClmb3IodHlwZW9mIHQucHJlSW5pdD09ImZ1bmN0aW9uIiYmKHQucHJlSW5pdD1bdC5wcmVJbml0XSk7MDx0LnByZUluaXQubGVuZ3RoOyl0LnByZUluaXQucG9wKCkoKTtDZSgpO2Z1bmN0aW9uIGcoKXt9Zy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSksZy5wcm90b3R5cGUuY29uc3RydWN0b3I9ZyxnLnByb3RvdHlwZS5YaD1nLGcuWWg9e30sdC5XcmFwcGVyT2JqZWN0PWc7ZnVuY3Rpb24gTChlKXtyZXR1cm4oZXx8ZykuWWh9dC5nZXRDYWNoZT1MO2Z1bmN0aW9uIGEoZSxvKXt2YXIgbj1MKG8pLHI9bltlXTtyZXR1cm4gcnx8KHI9T2JqZWN0LmNyZWF0ZSgob3x8ZykucHJvdG90eXBlKSxyLldoPWUsbltlXT1yKX10LndyYXBQb2ludGVyPWEsdC5jYXN0T2JqZWN0PWZ1bmN0aW9uKGUsbyl7cmV0dXJuIGEoZS5XaCxvKX0sdC5OVUxMPWEoMCksdC5kZXN0cm95PWZ1bmN0aW9uKGUpe2lmKCFlLl9fZGVzdHJveV9fKXRocm93IkVycm9yOiBDYW5ub3QgZGVzdHJveSBvYmplY3QuIChEaWQgeW91IGNyZWF0ZSBpdCB5b3Vyc2VsZj8pIjtlLl9fZGVzdHJveV9fKCksZGVsZXRlIEwoZS5YaClbZS5XaF19LHQuY29tcGFyZT1mdW5jdGlvbihlLG8pe3JldHVybiBlLldoPT09by5XaH0sdC5nZXRQb2ludGVyPWZ1bmN0aW9uKGUpe3JldHVybiBlLldofSx0LmdldENsYXNzPWZ1bmN0aW9uKGUpe3JldHVybiBlLlhofTt2YXIgR3Q9MCxzZT0wLHBlPTAsbGU9W10sdWU9MDtmdW5jdGlvbiBqZSgpe2lmKHVlKXtmb3IodmFyIGU9MDtlPGxlLmxlbmd0aDtlKyspdC5fZnJlZShsZVtlXSk7bGUubGVuZ3RoPTAsdC5fZnJlZShHdCksR3Q9MCxzZSs9dWUsdWU9MH1HdHx8KHNlKz0xMjgsR3Q9dC5fbWFsbG9jKHNlKSxRdChHdCkpLHBlPTB9ZnVuY3Rpb24gamwoZSl7aWYodHlwZW9mIGU9PSJvYmplY3QiKXtRdChHdCk7dmFyIG89ZS5sZW5ndGgqTnQuQllURVNfUEVSX0VMRU1FTlQ7aWYobz1vKzcmLTgscGUrbz49c2Upe1F0KDA8byksdWUrPW87dmFyIG49dC5fbWFsbG9jKG8pO2xlLnB1c2gobil9ZWxzZSBuPUd0K3BlLHBlKz1vO3N3aXRjaChvPW4sbj1vPj4+MCxOdC5CWVRFU19QRVJfRUxFTUVOVCl7Y2FzZSAyOm4+Pj49MTticmVhaztjYXNlIDQ6bj4+Pj0yO2JyZWFrO2Nhc2UgODpuPj4+PTN9Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspTnRbbityXT1lW3JdO3JldHVybiBvfXJldHVybiBlfWZ1bmN0aW9uIFEoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgYnRDb2xsaXNpb25Xb3JsZCwgbm8gY29uc3RydWN0b3IgaW4gSURMIn1RLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxRLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1RLFEucHJvdG90eXBlLlhoPVEsUS5ZaD17fSx0LmJ0Q29sbGlzaW9uV29ybGQ9USxRLnByb3RvdHlwZS5nZXREaXNwYXRjaGVyPWZ1bmN0aW9uKCl7cmV0dXJuIGEoa2UodGhpcy5XaCksJCl9LFEucHJvdG90eXBlLmdldFBhaXJDYWNoZT1mdW5jdGlvbigpe3JldHVybiBhKEhlKHRoaXMuV2gpLHR0KX0sUS5wcm90b3R5cGUuZ2V0RGlzcGF0Y2hJbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIGEoWWUodGhpcy5XaCkscyl9LFEucHJvdG90eXBlLmFkZENvbGxpc2lvbk9iamVjdD1mdW5jdGlvbihlLG8sbil7dmFyIHI9dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksbiYmdHlwZW9mIG49PSJvYmplY3QiJiYobj1uLldoKSxvPT09dm9pZCAwP1ZlKHIsZSk6bj09PXZvaWQgMD9RZShyLGUsbyk6RWUocixlLG8sbil9LFEucHJvdG90eXBlLnJlbW92ZUNvbGxpc2lvbk9iamVjdD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksWGUobyxlKX0sUS5wcm90b3R5cGUuZ2V0QnJvYWRwaGFzZT1mdW5jdGlvbigpe3JldHVybiBhKFVlKHRoaXMuV2gpLHB0KX0sUS5wcm90b3R5cGUuY29udmV4U3dlZXBUZXN0PWZ1bmN0aW9uKGUsbyxuLHIsYyl7dmFyIEQ9dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksbiYmdHlwZW9mIG49PSJvYmplY3QiJiYobj1uLldoKSxyJiZ0eXBlb2Ygcj09Im9iamVjdCImJihyPXIuV2gpLGMmJnR5cGVvZiBjPT0ib2JqZWN0IiYmKGM9Yy5XaCksR2UoRCxlLG8sbixyLGMpfSxRLnByb3RvdHlwZS5jb250YWN0UGFpclRlc3Q9ZnVuY3Rpb24oZSxvLG4pe3ZhciByPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLG4mJnR5cGVvZiBuPT0ib2JqZWN0IiYmKG49bi5XaCksTmUocixlLG8sbil9LFEucHJvdG90eXBlLmNvbnRhY3RUZXN0PWZ1bmN0aW9uKGUsbyl7dmFyIG49dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksemUobixlLG8pfSxRLnByb3RvdHlwZS51cGRhdGVTaW5nbGVBYWJiPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxxZShvLGUpfSxRLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe1plKHRoaXMuV2gpfTtmdW5jdGlvbiBrKCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0UXVhZFdvcmQsIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9ay5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSksay5wcm90b3R5cGUuY29uc3RydWN0b3I9ayxrLnByb3RvdHlwZS5YaD1rLGsuWWg9e30sdC5idFF1YWRXb3JkPWssay5wcm90b3R5cGUueD1rLnByb3RvdHlwZS54PWZ1bmN0aW9uKCl7cmV0dXJuIEtlKHRoaXMuV2gpfSxrLnByb3RvdHlwZS55PWsucHJvdG90eXBlLnk9ZnVuY3Rpb24oKXtyZXR1cm4gJGUodGhpcy5XaCl9LGsucHJvdG90eXBlLno9ay5wcm90b3R5cGUuej1mdW5jdGlvbigpe3JldHVybiBKZSh0aGlzLldoKX0say5wcm90b3R5cGUudz1mdW5jdGlvbigpe3JldHVybiB0byh0aGlzLldoKX0say5wcm90b3R5cGUuc2V0WD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksZW8obyxlKX0say5wcm90b3R5cGUuc2V0WT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksb28obyxlKX0say5wcm90b3R5cGUuc2V0Wj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbm8obyxlKX0say5wcm90b3R5cGUuc2V0Vz1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCkscm8obyxlKX0say5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtfbyh0aGlzLldoKX07ZnVuY3Rpb24gcnQoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgYnRNb3Rpb25TdGF0ZSwgbm8gY29uc3RydWN0b3IgaW4gSURMIn1ydC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSkscnQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXJ0LHJ0LnByb3RvdHlwZS5YaD1ydCxydC5ZaD17fSx0LmJ0TW90aW9uU3RhdGU9cnQscnQucHJvdG90eXBlLmdldFdvcmxkVHJhbnNmb3JtPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxpbyhvLGUpfSxydC5wcm90b3R5cGUuc2V0V29ybGRUcmFuc2Zvcm09ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGFvKG8sZSl9LHJ0LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe3NvKHRoaXMuV2gpfTtmdW5jdGlvbiBqKCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0Q29sbGlzaW9uT2JqZWN0LCBubyBjb25zdHJ1Y3RvciBpbiBJREwifWoucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLGoucHJvdG90eXBlLmNvbnN0cnVjdG9yPWosai5wcm90b3R5cGUuWGg9aixqLlloPXt9LHQuYnRDb2xsaXNpb25PYmplY3Q9aixqLnByb3RvdHlwZS5zZXRBbmlzb3Ryb3BpY0ZyaWN0aW9uPWZ1bmN0aW9uKGUsbyl7dmFyIG49dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCkscG8obixlLG8pfSxqLnByb3RvdHlwZS5nZXRDb2xsaXNpb25TaGFwZT1mdW5jdGlvbigpe3JldHVybiBhKGxvKHRoaXMuV2gpLEUpfSxqLnByb3RvdHlwZS5zZXRDb250YWN0UHJvY2Vzc2luZ1RocmVzaG9sZD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksdW8obyxlKX0sai5wcm90b3R5cGUuc2V0QWN0aXZhdGlvblN0YXRlPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxjbyhvLGUpfSxqLnByb3RvdHlwZS5mb3JjZUFjdGl2YXRpb25TdGF0ZT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCkseW8obyxlKX0sai5wcm90b3R5cGUuYWN0aXZhdGU9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGU9PT12b2lkIDA/aG8obyk6Zm8obyxlKX0sai5wcm90b3R5cGUuaXNBY3RpdmU9ZnVuY3Rpb24oKXtyZXR1cm4hIW1vKHRoaXMuV2gpfSxqLnByb3RvdHlwZS5pc0tpbmVtYXRpY09iamVjdD1mdW5jdGlvbigpe3JldHVybiEhYm8odGhpcy5XaCl9LGoucHJvdG90eXBlLmlzU3RhdGljT2JqZWN0PWZ1bmN0aW9uKCl7cmV0dXJuISFnbyh0aGlzLldoKX0sai5wcm90b3R5cGUuaXNTdGF0aWNPcktpbmVtYXRpY09iamVjdD1mdW5jdGlvbigpe3JldHVybiEhV28odGhpcy5XaCl9LGoucHJvdG90eXBlLmdldFJlc3RpdHV0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIENvKHRoaXMuV2gpfSxqLnByb3RvdHlwZS5nZXRGcmljdGlvbj1mdW5jdGlvbigpe3JldHVybiBqbyh0aGlzLldoKX0sai5wcm90b3R5cGUuZ2V0Um9sbGluZ0ZyaWN0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHZvKHRoaXMuV2gpfSxqLnByb3RvdHlwZS5zZXRSZXN0aXR1dGlvbj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksRG8obyxlKX0sai5wcm90b3R5cGUuc2V0RnJpY3Rpb249ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFJvKG8sZSl9LGoucHJvdG90eXBlLnNldFJvbGxpbmdGcmljdGlvbj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksU28obyxlKX0sai5wcm90b3R5cGUuZ2V0V29ybGRUcmFuc2Zvcm09ZnVuY3Rpb24oKXtyZXR1cm4gYShJbyh0aGlzLldoKSxPKX0sai5wcm90b3R5cGUuZ2V0Q29sbGlzaW9uRmxhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gQm8odGhpcy5XaCl9LGoucHJvdG90eXBlLnNldENvbGxpc2lvbkZsYWdzPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxPbyhvLGUpfSxqLnByb3RvdHlwZS5zZXRXb3JsZFRyYW5zZm9ybT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksUG8obyxlKX0sai5wcm90b3R5cGUuc2V0Q29sbGlzaW9uU2hhcGU9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLHhvKG8sZSl9LGoucHJvdG90eXBlLnNldENjZE1vdGlvblRocmVzaG9sZD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksVG8obyxlKX0sai5wcm90b3R5cGUuc2V0Q2NkU3dlcHRTcGhlcmVSYWRpdXM9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLEZvKG8sZSl9LGoucHJvdG90eXBlLmdldFVzZXJJbmRleD1mdW5jdGlvbigpe3JldHVybiBNbyh0aGlzLldoKX0sai5wcm90b3R5cGUuc2V0VXNlckluZGV4PWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxBbyhvLGUpfSxqLnByb3RvdHlwZS5nZXRVc2VyUG9pbnRlcj1mdW5jdGlvbigpe3JldHVybiBhKHdvKHRoaXMuV2gpLFd0KX0sai5wcm90b3R5cGUuc2V0VXNlclBvaW50ZXI9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLExvKG8sZSl9LGoucHJvdG90eXBlLmdldEJyb2FkcGhhc2VIYW5kbGU9ZnVuY3Rpb24oKXtyZXR1cm4gYShrbyh0aGlzLldoKSxQKX0sai5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtIbyh0aGlzLldoKX07ZnVuY3Rpb24gZHQoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgQ29udGFjdFJlc3VsdENhbGxiYWNrLCBubyBjb25zdHJ1Y3RvciBpbiBJREwifWR0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxkdC5wcm90b3R5cGUuY29uc3RydWN0b3I9ZHQsZHQucHJvdG90eXBlLlhoPWR0LGR0LlloPXt9LHQuQ29udGFjdFJlc3VsdENhbGxiYWNrPWR0LGR0LnByb3RvdHlwZS5hZGRTaW5nbGVSZXN1bHQ9ZnVuY3Rpb24oZSxvLG4scixjLEQsWil7dmFyIGh0PXRoaXMuV2g7cmV0dXJuIGUmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxuJiZ0eXBlb2Ygbj09Im9iamVjdCImJihuPW4uV2gpLHImJnR5cGVvZiByPT0ib2JqZWN0IiYmKHI9ci5XaCksYyYmdHlwZW9mIGM9PSJvYmplY3QiJiYoYz1jLldoKSxEJiZ0eXBlb2YgRD09Im9iamVjdCImJihEPUQuV2gpLFomJnR5cGVvZiBaPT0ib2JqZWN0IiYmKFo9Wi5XaCksWW8oaHQsZSxvLG4scixjLEQsWil9LGR0LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe1ZvKHRoaXMuV2gpfTtmdW5jdGlvbiBSKCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIENvbnZleFJlc3VsdENhbGxiYWNrLCBubyBjb25zdHJ1Y3RvciBpbiBJREwifVIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLFIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVIsUi5wcm90b3R5cGUuWGg9UixSLlloPXt9LHQuQ29udmV4UmVzdWx0Q2FsbGJhY2s9UixSLnByb3RvdHlwZS5oYXNIaXQ9ZnVuY3Rpb24oKXtyZXR1cm4hIVFvKHRoaXMuV2gpfSxSLnByb3RvdHlwZS5nZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cD1SLnByb3RvdHlwZS5aaD1mdW5jdGlvbigpe3JldHVybiBFbyh0aGlzLldoKX0sUi5wcm90b3R5cGUuc2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXA9Ui5wcm90b3R5cGUuYWk9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFhvKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSLnByb3RvdHlwZSwibV9jb2xsaXNpb25GaWx0ZXJHcm91cCIse2dldDpSLnByb3RvdHlwZS5aaCxzZXQ6Ui5wcm90b3R5cGUuYWl9KSxSLnByb3RvdHlwZS5nZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrPVIucHJvdG90eXBlLiRoPWZ1bmN0aW9uKCl7cmV0dXJuIFVvKHRoaXMuV2gpfSxSLnByb3RvdHlwZS5zZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrPVIucHJvdG90eXBlLmJpPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxHbyhvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoUi5wcm90b3R5cGUsIm1fY29sbGlzaW9uRmlsdGVyTWFzayIse2dldDpSLnByb3RvdHlwZS4kaCxzZXQ6Ui5wcm90b3R5cGUuYml9KSxSLnByb3RvdHlwZS5nZXRfbV9jbG9zZXN0SGl0RnJhY3Rpb249Ui5wcm90b3R5cGUuZGk9ZnVuY3Rpb24oKXtyZXR1cm4gTm8odGhpcy5XaCl9LFIucHJvdG90eXBlLnNldF9tX2Nsb3Nlc3RIaXRGcmFjdGlvbj1SLnByb3RvdHlwZS5maT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksem8obyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KFIucHJvdG90eXBlLCJtX2Nsb3Nlc3RIaXRGcmFjdGlvbiIse2dldDpSLnByb3RvdHlwZS5kaSxzZXQ6Ui5wcm90b3R5cGUuZml9KSxSLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe3FvKHRoaXMuV2gpfTtmdW5jdGlvbiBFKCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0Q29sbGlzaW9uU2hhcGUsIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9RS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSksRS5wcm90b3R5cGUuY29uc3RydWN0b3I9RSxFLnByb3RvdHlwZS5YaD1FLEUuWWg9e30sdC5idENvbGxpc2lvblNoYXBlPUUsRS5wcm90b3R5cGUuc2V0TG9jYWxTY2FsaW5nPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxabyhvLGUpfSxFLnByb3RvdHlwZS5nZXRMb2NhbFNjYWxpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gYShLbyh0aGlzLldoKSx5KX0sRS5wcm90b3R5cGUuY2FsY3VsYXRlTG9jYWxJbmVydGlhPWZ1bmN0aW9uKGUsbyl7dmFyIG49dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksJG8obixlLG8pfSxFLnByb3RvdHlwZS5zZXRNYXJnaW49ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLEpvKG8sZSl9LEUucHJvdG90eXBlLmdldE1hcmdpbj1mdW5jdGlvbigpe3JldHVybiB0bih0aGlzLldoKX0sRS5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtlbih0aGlzLldoKX07ZnVuY3Rpb24gJCgpe3Rocm93ImNhbm5vdCBjb25zdHJ1Y3QgYSBidERpc3BhdGNoZXIsIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9JC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSksJC5wcm90b3R5cGUuY29uc3RydWN0b3I9JCwkLnByb3RvdHlwZS5YaD0kLCQuWWg9e30sdC5idERpc3BhdGNoZXI9JCwkLnByb3RvdHlwZS5nZXROdW1NYW5pZm9sZHM9ZnVuY3Rpb24oKXtyZXR1cm4gb24odGhpcy5XaCl9LCQucHJvdG90eXBlLmdldE1hbmlmb2xkQnlJbmRleEludGVybmFsPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7cmV0dXJuIGUmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksYShubihvLGUpLEspfSwkLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe3JuKHRoaXMuV2gpfTtmdW5jdGlvbiBUKCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0RHluYW1pY3NXb3JsZCwgbm8gY29uc3RydWN0b3IgaW4gSURMIn1ULnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFEucHJvdG90eXBlKSxULnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1ULFQucHJvdG90eXBlLlhoPVQsVC5ZaD17fSx0LmJ0RHluYW1pY3NXb3JsZD1ULFQucHJvdG90eXBlLmFkZEFjdGlvbj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksX24obyxlKX0sVC5wcm90b3R5cGUucmVtb3ZlQWN0aW9uPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxhbihvLGUpfSxULnByb3RvdHlwZS5nZXRTb2x2ZXJJbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIGEoc24odGhpcy5XaCksUyl9LFQucHJvdG90eXBlLnNldEludGVybmFsVGlja0NhbGxiYWNrPWZ1bmN0aW9uKGUsbyxuKXt2YXIgcj10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxuJiZ0eXBlb2Ygbj09Im9iamVjdCImJihuPW4uV2gpLG89PT12b2lkIDA/cG4ocixlKTpuPT09dm9pZCAwP2xuKHIsZSxvKTp1bihyLGUsbyxuKX0sVC5wcm90b3R5cGUuZ2V0RGlzcGF0Y2hlcj1mdW5jdGlvbigpe3JldHVybiBhKGNuKHRoaXMuV2gpLCQpfSxULnByb3RvdHlwZS5nZXRQYWlyQ2FjaGU9ZnVuY3Rpb24oKXtyZXR1cm4gYSh5bih0aGlzLldoKSx0dCl9LFQucHJvdG90eXBlLmdldERpc3BhdGNoSW5mbz1mdW5jdGlvbigpe3JldHVybiBhKGhuKHRoaXMuV2gpLHMpfSxULnByb3RvdHlwZS5hZGRDb2xsaXNpb25PYmplY3Q9ZnVuY3Rpb24oZSxvLG4pe3ZhciByPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLG4mJnR5cGVvZiBuPT0ib2JqZWN0IiYmKG49bi5XaCksbz09PXZvaWQgMD9mbihyLGUpOm49PT12b2lkIDA/bW4ocixlLG8pOmJuKHIsZSxvLG4pfSxULnByb3RvdHlwZS5yZW1vdmVDb2xsaXNpb25PYmplY3Q9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGduKG8sZSl9LFQucHJvdG90eXBlLmdldEJyb2FkcGhhc2U9ZnVuY3Rpb24oKXtyZXR1cm4gYShkbih0aGlzLldoKSxwdCl9LFQucHJvdG90eXBlLmNvbnZleFN3ZWVwVGVzdD1mdW5jdGlvbihlLG8sbixyLGMpe3ZhciBEPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLG4mJnR5cGVvZiBuPT0ib2JqZWN0IiYmKG49bi5XaCksciYmdHlwZW9mIHI9PSJvYmplY3QiJiYocj1yLldoKSxjJiZ0eXBlb2YgYz09Im9iamVjdCImJihjPWMuV2gpLFduKEQsZSxvLG4scixjKX0sVC5wcm90b3R5cGUuY29udGFjdFBhaXJUZXN0PWZ1bmN0aW9uKGUsbyxuKXt2YXIgcj10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxuJiZ0eXBlb2Ygbj09Im9iamVjdCImJihuPW4uV2gpLENuKHIsZSxvLG4pfSxULnByb3RvdHlwZS5jb250YWN0VGVzdD1mdW5jdGlvbihlLG8pe3ZhciBuPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLGpuKG4sZSxvKX0sVC5wcm90b3R5cGUudXBkYXRlU2luZ2xlQWFiYj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksdm4obyxlKX0sVC5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtEbih0aGlzLldoKX07ZnVuY3Rpb24gV3QoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgVm9pZFB0ciwgbm8gY29uc3RydWN0b3IgaW4gSURMIn1XdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSksV3QucHJvdG90eXBlLmNvbnN0cnVjdG9yPVd0LFd0LnByb3RvdHlwZS5YaD1XdCxXdC5ZaD17fSx0LlZvaWRQdHI9V3QsV3QucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7Um4odGhpcy5XaCl9O2Z1bmN0aW9uIHkoZSxvLG4pe2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxuJiZ0eXBlb2Ygbj09Im9iamVjdCImJihuPW4uV2gpLHRoaXMuV2g9ZT09PXZvaWQgMD9TbigpOm89PT12b2lkIDA/X2ViX2J0VmVjdG9yM19idFZlY3RvcjNfMShlKTpuPT09dm9pZCAwP19lYl9idFZlY3RvcjNfYnRWZWN0b3IzXzIoZSxvKTpJbihlLG8sbiksTCh5KVt0aGlzLldoXT10aGlzfXkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLHkucHJvdG90eXBlLmNvbnN0cnVjdG9yPXkseS5wcm90b3R5cGUuWGg9eSx5LlloPXt9LHQuYnRWZWN0b3IzPXkseS5wcm90b3R5cGUubGVuZ3RoPXkucHJvdG90eXBlLmxlbmd0aD1mdW5jdGlvbigpe3JldHVybiBCbih0aGlzLldoKX0seS5wcm90b3R5cGUueD15LnByb3RvdHlwZS54PWZ1bmN0aW9uKCl7cmV0dXJuIE9uKHRoaXMuV2gpfSx5LnByb3RvdHlwZS55PXkucHJvdG90eXBlLnk9ZnVuY3Rpb24oKXtyZXR1cm4gUG4odGhpcy5XaCl9LHkucHJvdG90eXBlLno9eS5wcm90b3R5cGUuej1mdW5jdGlvbigpe3JldHVybiB4bih0aGlzLldoKX0seS5wcm90b3R5cGUuc2V0WD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksVG4obyxlKX0seS5wcm90b3R5cGUuc2V0WT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksRm4obyxlKX0seS5wcm90b3R5cGUuc2V0Wj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksTW4obyxlKX0seS5wcm90b3R5cGUuc2V0VmFsdWU9ZnVuY3Rpb24oZSxvLG4pe3ZhciByPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLG4mJnR5cGVvZiBuPT0ib2JqZWN0IiYmKG49bi5XaCksQW4ocixlLG8sbil9LHkucHJvdG90eXBlLm5vcm1hbGl6ZT15LnByb3RvdHlwZS5ub3JtYWxpemU9ZnVuY3Rpb24oKXt3bih0aGlzLldoKX0seS5wcm90b3R5cGUucm90YXRlPXkucHJvdG90eXBlLnJvdGF0ZT1mdW5jdGlvbihlLG8pe3ZhciBuPXRoaXMuV2g7cmV0dXJuIGUmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxhKExuKG4sZSxvKSx5KX0seS5wcm90b3R5cGUuZG90PWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7cmV0dXJuIGUmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksa24obyxlKX0seS5wcm90b3R5cGUub3BfbXVsPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7cmV0dXJuIGUmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksYShIbihvLGUpLHkpfSx5LnByb3RvdHlwZS5vcF9hZGQ9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtyZXR1cm4gZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxhKFluKG8sZSkseSl9LHkucHJvdG90eXBlLm9wX3N1Yj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGEoVm4obyxlKSx5KX0seS5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtRbih0aGlzLldoKX07ZnVuY3Rpb24gbShlLG8sbixyKXtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksbiYmdHlwZW9mIG49PSJvYmplY3QiJiYobj1uLldoKSxyJiZ0eXBlb2Ygcj09Im9iamVjdCImJihyPXIuV2gpLHRoaXMuV2g9RW4oZSxvLG4sciksTChtKVt0aGlzLldoXT10aGlzfW0ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoay5wcm90b3R5cGUpLG0ucHJvdG90eXBlLmNvbnN0cnVjdG9yPW0sbS5wcm90b3R5cGUuWGg9bSxtLlloPXt9LHQuYnRRdWF0ZXJuaW9uPW0sbS5wcm90b3R5cGUuc2V0VmFsdWU9ZnVuY3Rpb24oZSxvLG4scil7dmFyIGM9dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksbiYmdHlwZW9mIG49PSJvYmplY3QiJiYobj1uLldoKSxyJiZ0eXBlb2Ygcj09Im9iamVjdCImJihyPXIuV2gpLFhuKGMsZSxvLG4scil9LG0ucHJvdG90eXBlLnNldEV1bGVyWllYPWZ1bmN0aW9uKGUsbyxuKXt2YXIgcj10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxuJiZ0eXBlb2Ygbj09Im9iamVjdCImJihuPW4uV2gpLFVuKHIsZSxvLG4pfSxtLnByb3RvdHlwZS5zZXRSb3RhdGlvbj1mdW5jdGlvbihlLG8pe3ZhciBuPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLEduKG4sZSxvKX0sbS5wcm90b3R5cGUubm9ybWFsaXplPW0ucHJvdG90eXBlLm5vcm1hbGl6ZT1mdW5jdGlvbigpe05uKHRoaXMuV2gpfSxtLnByb3RvdHlwZS5sZW5ndGgyPWZ1bmN0aW9uKCl7cmV0dXJuIHpuKHRoaXMuV2gpfSxtLnByb3RvdHlwZS5sZW5ndGg9bS5wcm90b3R5cGUubGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIHFuKHRoaXMuV2gpfSxtLnByb3RvdHlwZS5kb3Q9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtyZXR1cm4gZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxabihvLGUpfSxtLnByb3RvdHlwZS5ub3JtYWxpemVkPWZ1bmN0aW9uKCl7cmV0dXJuIGEoS24odGhpcy5XaCksbSl9LG0ucHJvdG90eXBlLmdldEF4aXM9ZnVuY3Rpb24oKXtyZXR1cm4gYSgkbih0aGlzLldoKSx5KX0sbS5wcm90b3R5cGUuaW52ZXJzZT1tLnByb3RvdHlwZS5pbnZlcnNlPWZ1bmN0aW9uKCl7cmV0dXJuIGEoSm4odGhpcy5XaCksbSl9LG0ucHJvdG90eXBlLmdldEFuZ2xlPWZ1bmN0aW9uKCl7cmV0dXJuIHRyKHRoaXMuV2gpfSxtLnByb3RvdHlwZS5nZXRBbmdsZVNob3J0ZXN0UGF0aD1mdW5jdGlvbigpe3JldHVybiBlcih0aGlzLldoKX0sbS5wcm90b3R5cGUuYW5nbGU9bS5wcm90b3R5cGUuYW5nbGU9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtyZXR1cm4gZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvcihvLGUpfSxtLnByb3RvdHlwZS5hbmdsZVNob3J0ZXN0UGF0aD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG5yKG8sZSl9LG0ucHJvdG90eXBlLm9wX2FkZD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGEocnIobyxlKSxtKX0sbS5wcm90b3R5cGUub3Bfc3ViPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7cmV0dXJuIGUmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksYShfcihvLGUpLG0pfSxtLnByb3RvdHlwZS5vcF9tdWw9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtyZXR1cm4gZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxhKGlyKG8sZSksbSl9LG0ucHJvdG90eXBlLm9wX211bHE9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtyZXR1cm4gZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxhKGFyKG8sZSksbSl9LG0ucHJvdG90eXBlLm9wX2Rpdj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGEoc3IobyxlKSxtKX0sbS5wcm90b3R5cGUueD1tLnByb3RvdHlwZS54PWZ1bmN0aW9uKCl7cmV0dXJuIHByKHRoaXMuV2gpfSxtLnByb3RvdHlwZS55PW0ucHJvdG90eXBlLnk9ZnVuY3Rpb24oKXtyZXR1cm4gbHIodGhpcy5XaCl9LG0ucHJvdG90eXBlLno9bS5wcm90b3R5cGUuej1mdW5jdGlvbigpe3JldHVybiB1cih0aGlzLldoKX0sbS5wcm90b3R5cGUudz1mdW5jdGlvbigpe3JldHVybiBjcih0aGlzLldoKX0sbS5wcm90b3R5cGUuc2V0WD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCkseXIobyxlKX0sbS5wcm90b3R5cGUuc2V0WT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksaHIobyxlKX0sbS5wcm90b3R5cGUuc2V0Wj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksZnIobyxlKX0sbS5wcm90b3R5cGUuc2V0Vz1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbXIobyxlKX0sbS5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXticih0aGlzLldoKX07ZnVuY3Rpb24gX3QoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgYnRNYXRyaXgzeDMsIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9X3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLF90LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1fdCxfdC5wcm90b3R5cGUuWGg9X3QsX3QuWWg9e30sdC5idE1hdHJpeDN4Mz1fdCxfdC5wcm90b3R5cGUuc2V0RXVsZXJaWVg9ZnVuY3Rpb24oZSxvLG4pe3ZhciByPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLG4mJnR5cGVvZiBuPT0ib2JqZWN0IiYmKG49bi5XaCksZ3IocixlLG8sbil9LF90LnByb3RvdHlwZS5nZXRSb3RhdGlvbj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksZHIobyxlKX0sX3QucHJvdG90eXBlLmdldFJvdz1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGEoV3IobyxlKSx5KX0sX3QucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7Q3IodGhpcy5XaCl9O2Z1bmN0aW9uIE8oZSxvKXtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksdGhpcy5XaD1lPT09dm9pZCAwP2pyKCk6bz09PXZvaWQgMD9fZWJfYnRUcmFuc2Zvcm1fYnRUcmFuc2Zvcm1fMShlKTp2cihlLG8pLEwoTylbdGhpcy5XaF09dGhpc31PLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxPLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1PLE8ucHJvdG90eXBlLlhoPU8sTy5ZaD17fSx0LmJ0VHJhbnNmb3JtPU8sTy5wcm90b3R5cGUuc2V0SWRlbnRpdHk9ZnVuY3Rpb24oKXtEcih0aGlzLldoKX0sTy5wcm90b3R5cGUuc2V0T3JpZ2luPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxScihvLGUpfSxPLnByb3RvdHlwZS5zZXRSb3RhdGlvbj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksU3IobyxlKX0sTy5wcm90b3R5cGUuZ2V0T3JpZ2luPWZ1bmN0aW9uKCl7cmV0dXJuIGEoSXIodGhpcy5XaCkseSl9LE8ucHJvdG90eXBlLmdldFJvdGF0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIGEoQnIodGhpcy5XaCksbSl9LE8ucHJvdG90eXBlLmdldEJhc2lzPWZ1bmN0aW9uKCl7cmV0dXJuIGEoT3IodGhpcy5XaCksX3QpfSxPLnByb3RvdHlwZS5zZXRGcm9tT3BlbkdMTWF0cml4PWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7amUoKSx0eXBlb2YgZT09Im9iamVjdCImJihlPWpsKGUpKSxQcihvLGUpfSxPLnByb3RvdHlwZS5pbnZlcnNlPU8ucHJvdG90eXBlLmludmVyc2U9ZnVuY3Rpb24oKXtyZXR1cm4gYSh4cih0aGlzLldoKSxPKX0sTy5wcm90b3R5cGUub3BfbXVsPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7cmV0dXJuIGUmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksYShUcihvLGUpLE8pfSxPLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe0ZyKHRoaXMuV2gpfTtmdW5jdGlvbiBOKGUsbyl7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLHRoaXMuV2g9ZT09PXZvaWQgMD9NcigpOm89PT12b2lkIDA/QXIoZSk6d3IoZSxvKSxMKE4pW3RoaXMuV2hdPXRoaXN9Ti5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShydC5wcm90b3R5cGUpLE4ucHJvdG90eXBlLmNvbnN0cnVjdG9yPU4sTi5wcm90b3R5cGUuWGg9TixOLlloPXt9LHQuYnREZWZhdWx0TW90aW9uU3RhdGU9TixOLnByb3RvdHlwZS5nZXRXb3JsZFRyYW5zZm9ybT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksTHIobyxlKX0sTi5wcm90b3R5cGUuc2V0V29ybGRUcmFuc2Zvcm09ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGtyKG8sZSl9LE4ucHJvdG90eXBlLmdldF9tX2dyYXBoaWNzV29ybGRUcmFucz1OLnByb3RvdHlwZS56aT1mdW5jdGlvbigpe3JldHVybiBhKEhyKHRoaXMuV2gpLE8pfSxOLnByb3RvdHlwZS5zZXRfbV9ncmFwaGljc1dvcmxkVHJhbnM9Ti5wcm90b3R5cGUudGo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFlyKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOLnByb3RvdHlwZSwibV9ncmFwaGljc1dvcmxkVHJhbnMiLHtnZXQ6Ti5wcm90b3R5cGUuemksc2V0Ok4ucHJvdG90eXBlLnRqfSksTi5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtWcih0aGlzLldoKX07ZnVuY3Rpb24gQ3QoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgYnRDb2xsaXNpb25PYmplY3RXcmFwcGVyLCBubyBjb25zdHJ1Y3RvciBpbiBJREwifUN0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxDdC5wcm90b3R5cGUuY29uc3RydWN0b3I9Q3QsQ3QucHJvdG90eXBlLlhoPUN0LEN0LlloPXt9LHQuYnRDb2xsaXNpb25PYmplY3RXcmFwcGVyPUN0LEN0LnByb3RvdHlwZS5nZXRXb3JsZFRyYW5zZm9ybT1mdW5jdGlvbigpe3JldHVybiBhKFFyKHRoaXMuV2gpLE8pfSxDdC5wcm90b3R5cGUuZ2V0Q29sbGlzaW9uT2JqZWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGEoRXIodGhpcy5XaCksail9LEN0LnByb3RvdHlwZS5nZXRDb2xsaXNpb25TaGFwZT1mdW5jdGlvbigpe3JldHVybiBhKFhyKHRoaXMuV2gpLEUpfTtmdW5jdGlvbiB1dCgpe3Rocm93ImNhbm5vdCBjb25zdHJ1Y3QgYSBidENvbnN0Q29sbGlzaW9uT2JqZWN0QXJyYXksIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9dXQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLHV0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj11dCx1dC5wcm90b3R5cGUuWGg9dXQsdXQuWWg9e30sdC5idENvbnN0Q29sbGlzaW9uT2JqZWN0QXJyYXk9dXQsdXQucHJvdG90eXBlLnNpemU9dXQucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gVXIodGhpcy5XaCl9LHV0LnByb3RvdHlwZS5hdD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGEoR3IobyxlKSxqKX0sdXQucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7TnIodGhpcy5XaCl9O2Z1bmN0aW9uIGN0KCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0U2NhbGFyQXJyYXksIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9Y3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLGN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jdCxjdC5wcm90b3R5cGUuWGg9Y3QsY3QuWWg9e30sdC5idFNjYWxhckFycmF5PWN0LGN0LnByb3RvdHlwZS5zaXplPWN0LnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHpyKHRoaXMuV2gpfSxjdC5wcm90b3R5cGUuYXQ9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtyZXR1cm4gZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxxcihvLGUpfSxjdC5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtacih0aGlzLldoKX07ZnVuY3Rpb24gaCgpe3Rocm93ImNhbm5vdCBjb25zdHJ1Y3QgYSBidE1hbmlmb2xkUG9pbnQsIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9aC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSksaC5wcm90b3R5cGUuY29uc3RydWN0b3I9aCxoLnByb3RvdHlwZS5YaD1oLGguWWg9e30sdC5idE1hbmlmb2xkUG9pbnQ9aCxoLnByb3RvdHlwZS5nZXRQb3NpdGlvbldvcmxkT25BPWZ1bmN0aW9uKCl7cmV0dXJuIGEoS3IodGhpcy5XaCkseSl9LGgucHJvdG90eXBlLmdldFBvc2l0aW9uV29ybGRPbkI9ZnVuY3Rpb24oKXtyZXR1cm4gYSgkcih0aGlzLldoKSx5KX0saC5wcm90b3R5cGUuZ2V0QXBwbGllZEltcHVsc2U9ZnVuY3Rpb24oKXtyZXR1cm4gSnIodGhpcy5XaCl9LGgucHJvdG90eXBlLmdldERpc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIHRfKHRoaXMuV2gpfSxoLnByb3RvdHlwZS5nZXRfbV9sb2NhbFBvaW50QT1oLnByb3RvdHlwZS5JaT1mdW5jdGlvbigpe3JldHVybiBhKGVfKHRoaXMuV2gpLHkpfSxoLnByb3RvdHlwZS5zZXRfbV9sb2NhbFBvaW50QT1oLnByb3RvdHlwZS5Daj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksb18obyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGgucHJvdG90eXBlLCJtX2xvY2FsUG9pbnRBIix7Z2V0OmgucHJvdG90eXBlLklpLHNldDpoLnByb3RvdHlwZS5Dan0pLGgucHJvdG90eXBlLmdldF9tX2xvY2FsUG9pbnRCPWgucHJvdG90eXBlLkppPWZ1bmN0aW9uKCl7cmV0dXJuIGEobl8odGhpcy5XaCkseSl9LGgucHJvdG90eXBlLnNldF9tX2xvY2FsUG9pbnRCPWgucHJvdG90eXBlLkRqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxyXyhvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaC5wcm90b3R5cGUsIm1fbG9jYWxQb2ludEIiLHtnZXQ6aC5wcm90b3R5cGUuSmksc2V0OmgucHJvdG90eXBlLkRqfSksaC5wcm90b3R5cGUuZ2V0X21fcG9zaXRpb25Xb3JsZE9uQj1oLnByb3RvdHlwZS5QaT1mdW5jdGlvbigpe3JldHVybiBhKF9fKHRoaXMuV2gpLHkpfSxoLnByb3RvdHlwZS5zZXRfbV9wb3NpdGlvbldvcmxkT25CPWgucHJvdG90eXBlLkpqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxpXyhvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaC5wcm90b3R5cGUsIm1fcG9zaXRpb25Xb3JsZE9uQiIse2dldDpoLnByb3RvdHlwZS5QaSxzZXQ6aC5wcm90b3R5cGUuSmp9KSxoLnByb3RvdHlwZS5nZXRfbV9wb3NpdGlvbldvcmxkT25BPWgucHJvdG90eXBlLk9pPWZ1bmN0aW9uKCl7cmV0dXJuIGEoYV8odGhpcy5XaCkseSl9LGgucHJvdG90eXBlLnNldF9tX3Bvc2l0aW9uV29ybGRPbkE9aC5wcm90b3R5cGUuSWo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLHNfKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShoLnByb3RvdHlwZSwibV9wb3NpdGlvbldvcmxkT25BIix7Z2V0OmgucHJvdG90eXBlLk9pLHNldDpoLnByb3RvdHlwZS5Jan0pLGgucHJvdG90eXBlLmdldF9tX25vcm1hbFdvcmxkT25CPWgucHJvdG90eXBlLkxpPWZ1bmN0aW9uKCl7cmV0dXJuIGEocF8odGhpcy5XaCkseSl9LGgucHJvdG90eXBlLnNldF9tX25vcm1hbFdvcmxkT25CPWgucHJvdG90eXBlLkZqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxsXyhvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaC5wcm90b3R5cGUsIm1fbm9ybWFsV29ybGRPbkIiLHtnZXQ6aC5wcm90b3R5cGUuTGksc2V0OmgucHJvdG90eXBlLkZqfSksaC5wcm90b3R5cGUuZ2V0X21fdXNlclBlcnNpc3RlbnREYXRhPWgucHJvdG90eXBlLmJqPWZ1bmN0aW9uKCl7cmV0dXJuIHVfKHRoaXMuV2gpfSxoLnByb3RvdHlwZS5zZXRfbV91c2VyUGVyc2lzdGVudERhdGE9aC5wcm90b3R5cGUuV2o9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGNfKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShoLnByb3RvdHlwZSwibV91c2VyUGVyc2lzdGVudERhdGEiLHtnZXQ6aC5wcm90b3R5cGUuYmosc2V0OmgucHJvdG90eXBlLldqfSksaC5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXt5Xyh0aGlzLldoKX07ZnVuY3Rpb24ganQoKXt0aGlzLldoPWhfKCksTChqdClbdGhpcy5XaF09dGhpc31qdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShkdC5wcm90b3R5cGUpLGp0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1qdCxqdC5wcm90b3R5cGUuWGg9anQsanQuWWg9e30sdC5Db25jcmV0ZUNvbnRhY3RSZXN1bHRDYWxsYmFjaz1qdCxqdC5wcm90b3R5cGUuYWRkU2luZ2xlUmVzdWx0PWZ1bmN0aW9uKGUsbyxuLHIsYyxELFope3ZhciBodD10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksbiYmdHlwZW9mIG49PSJvYmplY3QiJiYobj1uLldoKSxyJiZ0eXBlb2Ygcj09Im9iamVjdCImJihyPXIuV2gpLGMmJnR5cGVvZiBjPT0ib2JqZWN0IiYmKGM9Yy5XaCksRCYmdHlwZW9mIEQ9PSJvYmplY3QiJiYoRD1ELldoKSxaJiZ0eXBlb2YgWj09Im9iamVjdCImJihaPVouV2gpLGZfKGh0LGUsbyxuLHIsYyxELFopfSxqdC5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXttXyh0aGlzLldoKX07ZnVuY3Rpb24gRigpe3Rocm93ImNhbm5vdCBjb25zdHJ1Y3QgYSBMb2NhbFNoYXBlSW5mbywgbm8gY29uc3RydWN0b3IgaW4gSURMIn1GLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxGLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1GLEYucHJvdG90eXBlLlhoPUYsRi5ZaD17fSx0LkxvY2FsU2hhcGVJbmZvPUYsRi5wcm90b3R5cGUuZ2V0X21fc2hhcGVQYXJ0PUYucHJvdG90eXBlLlNpPWZ1bmN0aW9uKCl7cmV0dXJuIGJfKHRoaXMuV2gpfSxGLnByb3RvdHlwZS5zZXRfbV9zaGFwZVBhcnQ9Ri5wcm90b3R5cGUuTWo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGdfKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGLnByb3RvdHlwZSwibV9zaGFwZVBhcnQiLHtnZXQ6Ri5wcm90b3R5cGUuU2ksc2V0OkYucHJvdG90eXBlLk1qfSksRi5wcm90b3R5cGUuZ2V0X21fdHJpYW5nbGVJbmRleD1GLnByb3RvdHlwZS5ZaT1mdW5jdGlvbigpe3JldHVybiBkXyh0aGlzLldoKX0sRi5wcm90b3R5cGUuc2V0X21fdHJpYW5nbGVJbmRleD1GLnByb3RvdHlwZS5Taj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksV18obyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KEYucHJvdG90eXBlLCJtX3RyaWFuZ2xlSW5kZXgiLHtnZXQ6Ri5wcm90b3R5cGUuWWksc2V0OkYucHJvdG90eXBlLlNqfSksRi5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtDXyh0aGlzLldoKX07ZnVuY3Rpb24gQyhlLG8sbixyLGMpe2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxuJiZ0eXBlb2Ygbj09Im9iamVjdCImJihuPW4uV2gpLHImJnR5cGVvZiByPT0ib2JqZWN0IiYmKHI9ci5XaCksYyYmdHlwZW9mIGM9PSJvYmplY3QiJiYoYz1jLldoKSx0aGlzLldoPWpfKGUsbyxuLHIsYyksTChDKVt0aGlzLldoXT10aGlzfUMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLEMucHJvdG90eXBlLmNvbnN0cnVjdG9yPUMsQy5wcm90b3R5cGUuWGg9QyxDLlloPXt9LHQuTG9jYWxDb252ZXhSZXN1bHQ9QyxDLnByb3RvdHlwZS5nZXRfbV9oaXRDb2xsaXNpb25PYmplY3Q9Qy5wcm90b3R5cGUuZWk9ZnVuY3Rpb24oKXtyZXR1cm4gYSh2Xyh0aGlzLldoKSxqKX0sQy5wcm90b3R5cGUuc2V0X21faGl0Q29sbGlzaW9uT2JqZWN0PUMucHJvdG90eXBlLmdpPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxEXyhvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsIm1faGl0Q29sbGlzaW9uT2JqZWN0Iix7Z2V0OkMucHJvdG90eXBlLmVpLHNldDpDLnByb3RvdHlwZS5naX0pLEMucHJvdG90eXBlLmdldF9tX2xvY2FsU2hhcGVJbmZvPUMucHJvdG90eXBlLktpPWZ1bmN0aW9uKCl7cmV0dXJuIGEoUl8odGhpcy5XaCksRil9LEMucHJvdG90eXBlLnNldF9tX2xvY2FsU2hhcGVJbmZvPUMucHJvdG90eXBlLkVqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxTXyhvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsIm1fbG9jYWxTaGFwZUluZm8iLHtnZXQ6Qy5wcm90b3R5cGUuS2ksc2V0OkMucHJvdG90eXBlLkVqfSksQy5wcm90b3R5cGUuZ2V0X21faGl0Tm9ybWFsTG9jYWw9Qy5wcm90b3R5cGUuQmk9ZnVuY3Rpb24oKXtyZXR1cm4gYShJXyh0aGlzLldoKSx5KX0sQy5wcm90b3R5cGUuc2V0X21faGl0Tm9ybWFsTG9jYWw9Qy5wcm90b3R5cGUudmo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLEJfKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDLnByb3RvdHlwZSwibV9oaXROb3JtYWxMb2NhbCIse2dldDpDLnByb3RvdHlwZS5CaSxzZXQ6Qy5wcm90b3R5cGUudmp9KSxDLnByb3RvdHlwZS5nZXRfbV9oaXRQb2ludExvY2FsPUMucHJvdG90eXBlLkRpPWZ1bmN0aW9uKCl7cmV0dXJuIGEoT18odGhpcy5XaCkseSl9LEMucHJvdG90eXBlLnNldF9tX2hpdFBvaW50TG9jYWw9Qy5wcm90b3R5cGUueGo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFBfKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDLnByb3RvdHlwZSwibV9oaXRQb2ludExvY2FsIix7Z2V0OkMucHJvdG90eXBlLkRpLHNldDpDLnByb3RvdHlwZS54an0pLEMucHJvdG90eXBlLmdldF9tX2hpdEZyYWN0aW9uPUMucHJvdG90eXBlLkFpPWZ1bmN0aW9uKCl7cmV0dXJuIHhfKHRoaXMuV2gpfSxDLnByb3RvdHlwZS5zZXRfbV9oaXRGcmFjdGlvbj1DLnByb3RvdHlwZS51aj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksVF8obyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KEMucHJvdG90eXBlLCJtX2hpdEZyYWN0aW9uIix7Z2V0OkMucHJvdG90eXBlLkFpLHNldDpDLnByb3RvdHlwZS51an0pLEMucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7Rl8odGhpcy5XaCl9O2Z1bmN0aW9uIHUoZSxvKXtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksdGhpcy5XaD1NXyhlLG8pLEwodSlbdGhpcy5XaF09dGhpc311LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFIucHJvdG90eXBlKSx1LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj11LHUucHJvdG90eXBlLlhoPXUsdS5ZaD17fSx0LkNsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFjaz11LHUucHJvdG90eXBlLmhhc0hpdD1mdW5jdGlvbigpe3JldHVybiEhQV8odGhpcy5XaCl9LHUucHJvdG90eXBlLmdldF9tX2hpdENvbGxpc2lvbk9iamVjdD11LnByb3RvdHlwZS5laT1mdW5jdGlvbigpe3JldHVybiBhKHdfKHRoaXMuV2gpLGopfSx1LnByb3RvdHlwZS5zZXRfbV9oaXRDb2xsaXNpb25PYmplY3Q9dS5wcm90b3R5cGUuZ2k9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLExfKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LnByb3RvdHlwZSwibV9oaXRDb2xsaXNpb25PYmplY3QiLHtnZXQ6dS5wcm90b3R5cGUuZWksc2V0OnUucHJvdG90eXBlLmdpfSksdS5wcm90b3R5cGUuZ2V0X21fY29udmV4RnJvbVdvcmxkPXUucHJvdG90eXBlLnNpPWZ1bmN0aW9uKCl7cmV0dXJuIGEoa18odGhpcy5XaCkseSl9LHUucHJvdG90eXBlLnNldF9tX2NvbnZleEZyb21Xb3JsZD11LnByb3RvdHlwZS5taj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksSF8obyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHUucHJvdG90eXBlLCJtX2NvbnZleEZyb21Xb3JsZCIse2dldDp1LnByb3RvdHlwZS5zaSxzZXQ6dS5wcm90b3R5cGUubWp9KSx1LnByb3RvdHlwZS5nZXRfbV9jb252ZXhUb1dvcmxkPXUucHJvdG90eXBlLnRpPWZ1bmN0aW9uKCl7cmV0dXJuIGEoWV8odGhpcy5XaCkseSl9LHUucHJvdG90eXBlLnNldF9tX2NvbnZleFRvV29ybGQ9dS5wcm90b3R5cGUubmo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFZfKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LnByb3RvdHlwZSwibV9jb252ZXhUb1dvcmxkIix7Z2V0OnUucHJvdG90eXBlLnRpLHNldDp1LnByb3RvdHlwZS5uan0pLHUucHJvdG90eXBlLmdldF9tX2hpdE5vcm1hbFdvcmxkPXUucHJvdG90eXBlLkNpPWZ1bmN0aW9uKCl7cmV0dXJuIGEoUV8odGhpcy5XaCkseSl9LHUucHJvdG90eXBlLnNldF9tX2hpdE5vcm1hbFdvcmxkPXUucHJvdG90eXBlLndqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxFXyhvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodS5wcm90b3R5cGUsIm1faGl0Tm9ybWFsV29ybGQiLHtnZXQ6dS5wcm90b3R5cGUuQ2ksc2V0OnUucHJvdG90eXBlLndqfSksdS5wcm90b3R5cGUuZ2V0X21faGl0UG9pbnRXb3JsZD11LnByb3RvdHlwZS5FaT1mdW5jdGlvbigpe3JldHVybiBhKFhfKHRoaXMuV2gpLHkpfSx1LnByb3RvdHlwZS5zZXRfbV9oaXRQb2ludFdvcmxkPXUucHJvdG90eXBlLnlqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxVXyhvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodS5wcm90b3R5cGUsIm1faGl0UG9pbnRXb3JsZCIse2dldDp1LnByb3RvdHlwZS5FaSxzZXQ6dS5wcm90b3R5cGUueWp9KSx1LnByb3RvdHlwZS5nZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cD11LnByb3RvdHlwZS5aaD1mdW5jdGlvbigpe3JldHVybiBHXyh0aGlzLldoKX0sdS5wcm90b3R5cGUuc2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXA9dS5wcm90b3R5cGUuYWk9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLE5fKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LnByb3RvdHlwZSwibV9jb2xsaXNpb25GaWx0ZXJHcm91cCIse2dldDp1LnByb3RvdHlwZS5aaCxzZXQ6dS5wcm90b3R5cGUuYWl9KSx1LnByb3RvdHlwZS5nZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrPXUucHJvdG90eXBlLiRoPWZ1bmN0aW9uKCl7cmV0dXJuIHpfKHRoaXMuV2gpfSx1LnByb3RvdHlwZS5zZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrPXUucHJvdG90eXBlLmJpPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxxXyhvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodS5wcm90b3R5cGUsIm1fY29sbGlzaW9uRmlsdGVyTWFzayIse2dldDp1LnByb3RvdHlwZS4kaCxzZXQ6dS5wcm90b3R5cGUuYml9KSx1LnByb3RvdHlwZS5nZXRfbV9jbG9zZXN0SGl0RnJhY3Rpb249dS5wcm90b3R5cGUuZGk9ZnVuY3Rpb24oKXtyZXR1cm4gWl8odGhpcy5XaCl9LHUucHJvdG90eXBlLnNldF9tX2Nsb3Nlc3RIaXRGcmFjdGlvbj11LnByb3RvdHlwZS5maT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksS18obyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHUucHJvdG90eXBlLCJtX2Nsb3Nlc3RIaXRGcmFjdGlvbiIse2dldDp1LnByb3RvdHlwZS5kaSxzZXQ6dS5wcm90b3R5cGUuZml9KSx1LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpeyRfKHRoaXMuV2gpfTtmdW5jdGlvbiBvdCgpe3Rocm93ImNhbm5vdCBjb25zdHJ1Y3QgYSBidENvbnZleFNoYXBlLCBubyBjb25zdHJ1Y3RvciBpbiBJREwifW90LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKSxvdC5wcm90b3R5cGUuY29uc3RydWN0b3I9b3Qsb3QucHJvdG90eXBlLlhoPW90LG90LlloPXt9LHQuYnRDb252ZXhTaGFwZT1vdCxvdC5wcm90b3R5cGUuc2V0TG9jYWxTY2FsaW5nPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxKXyhvLGUpfSxvdC5wcm90b3R5cGUuZ2V0TG9jYWxTY2FsaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGEodGkodGhpcy5XaCkseSl9LG90LnByb3RvdHlwZS5jYWxjdWxhdGVMb2NhbEluZXJ0aWE9ZnVuY3Rpb24oZSxvKXt2YXIgbj10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxlaShuLGUsbyl9LG90LnByb3RvdHlwZS5zZXRNYXJnaW49ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG9pKG8sZSl9LG90LnByb3RvdHlwZS5nZXRNYXJnaW49ZnVuY3Rpb24oKXtyZXR1cm4gbmkodGhpcy5XaCl9LG90LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe3JpKHRoaXMuV2gpfTtmdW5jdGlvbiBKKGUpe2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksdGhpcy5XaD1faShlKSxMKEopW3RoaXMuV2hdPXRoaXN9Si5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSksSi5wcm90b3R5cGUuY29uc3RydWN0b3I9SixKLnByb3RvdHlwZS5YaD1KLEouWWg9e30sdC5idEJveFNoYXBlPUosSi5wcm90b3R5cGUuc2V0TWFyZ2luPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxpaShvLGUpfSxKLnByb3RvdHlwZS5nZXRNYXJnaW49ZnVuY3Rpb24oKXtyZXR1cm4gYWkodGhpcy5XaCl9LEoucHJvdG90eXBlLnNldExvY2FsU2NhbGluZz1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksc2kobyxlKX0sSi5wcm90b3R5cGUuZ2V0TG9jYWxTY2FsaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGEocGkodGhpcy5XaCkseSl9LEoucHJvdG90eXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYT1mdW5jdGlvbihlLG8pe3ZhciBuPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLGxpKG4sZSxvKX0sSi5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXt1aSh0aGlzLldoKX07ZnVuY3Rpb24gaXQoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgYnRJbnRBcnJheSwgbm8gY29uc3RydWN0b3IgaW4gSURMIn1pdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSksaXQucHJvdG90eXBlLmNvbnN0cnVjdG9yPWl0LGl0LnByb3RvdHlwZS5YaD1pdCxpdC5ZaD17fSx0LmJ0SW50QXJyYXk9aXQsaXQucHJvdG90eXBlLnNpemU9aXQucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gY2kodGhpcy5XaCl9LGl0LnByb3RvdHlwZS5hdD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLHlpKG8sZSl9LGl0LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe2hpKHRoaXMuV2gpfTtmdW5jdGlvbiBNKCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0RmFjZSwgbm8gY29uc3RydWN0b3IgaW4gSURMIn1NLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxNLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1NLE0ucHJvdG90eXBlLlhoPU0sTS5ZaD17fSx0LmJ0RmFjZT1NLE0ucHJvdG90eXBlLmdldF9tX2luZGljZXM9TS5wcm90b3R5cGUuRmk9ZnVuY3Rpb24oKXtyZXR1cm4gYShmaSh0aGlzLldoKSxpdCl9LE0ucHJvdG90eXBlLnNldF9tX2luZGljZXM9TS5wcm90b3R5cGUuemo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG1pKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNLnByb3RvdHlwZSwibV9pbmRpY2VzIix7Z2V0Ok0ucHJvdG90eXBlLkZpLHNldDpNLnByb3RvdHlwZS56an0pLE0ucHJvdG90eXBlLmdldF9tX3BsYW5lPU0ucHJvdG90eXBlLk5pPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7cmV0dXJuIGUmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksYmkobyxlKX0sTS5wcm90b3R5cGUuc2V0X21fcGxhbmU9TS5wcm90b3R5cGUuSGo9ZnVuY3Rpb24oZSxvKXt2YXIgbj10aGlzLldoO2plKCksZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLGdpKG4sZSxvKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KE0ucHJvdG90eXBlLCJtX3BsYW5lIix7Z2V0Ok0ucHJvdG90eXBlLk5pLHNldDpNLnByb3RvdHlwZS5Ian0pLE0ucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7ZGkodGhpcy5XaCl9O2Z1bmN0aW9uIGF0KCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0VmVjdG9yM0FycmF5LCBubyBjb25zdHJ1Y3RvciBpbiBJREwifWF0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxhdC5wcm90b3R5cGUuY29uc3RydWN0b3I9YXQsYXQucHJvdG90eXBlLlhoPWF0LGF0LlloPXt9LHQuYnRWZWN0b3IzQXJyYXk9YXQsYXQucHJvdG90eXBlLnNpemU9YXQucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gV2kodGhpcy5XaCl9LGF0LnByb3RvdHlwZS5hdD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGEoQ2kobyxlKSx5KX0sYXQucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7amkodGhpcy5XaCl9O2Z1bmN0aW9uIHN0KCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0RmFjZUFycmF5LCBubyBjb25zdHJ1Y3RvciBpbiBJREwifXN0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxzdC5wcm90b3R5cGUuY29uc3RydWN0b3I9c3Qsc3QucHJvdG90eXBlLlhoPXN0LHN0LlloPXt9LHQuYnRGYWNlQXJyYXk9c3Qsc3QucHJvdG90eXBlLnNpemU9c3QucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdmkodGhpcy5XaCl9LHN0LnByb3RvdHlwZS5hdD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGEoRGkobyxlKSxNKX0sc3QucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7UmkodGhpcy5XaCl9O2Z1bmN0aW9uIEEoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgYnRDb252ZXhQb2x5aGVkcm9uLCBubyBjb25zdHJ1Y3RvciBpbiBJREwifUEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLEEucHJvdG90eXBlLmNvbnN0cnVjdG9yPUEsQS5wcm90b3R5cGUuWGg9QSxBLlloPXt9LHQuYnRDb252ZXhQb2x5aGVkcm9uPUEsQS5wcm90b3R5cGUuZ2V0X21fdmVydGljZXM9QS5wcm90b3R5cGUuY2o9ZnVuY3Rpb24oKXtyZXR1cm4gYShTaSh0aGlzLldoKSxhdCl9LEEucHJvdG90eXBlLnNldF9tX3ZlcnRpY2VzPUEucHJvdG90eXBlLlhqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxJaShvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQS5wcm90b3R5cGUsIm1fdmVydGljZXMiLHtnZXQ6QS5wcm90b3R5cGUuY2osc2V0OkEucHJvdG90eXBlLlhqfSksQS5wcm90b3R5cGUuZ2V0X21fZmFjZXM9QS5wcm90b3R5cGUueGk9ZnVuY3Rpb24oKXtyZXR1cm4gYShCaSh0aGlzLldoKSxzdCl9LEEucHJvdG90eXBlLnNldF9tX2ZhY2VzPUEucHJvdG90eXBlLnJqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxPaShvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQS5wcm90b3R5cGUsIm1fZmFjZXMiLHtnZXQ6QS5wcm90b3R5cGUueGksc2V0OkEucHJvdG90eXBlLnJqfSksQS5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtQaSh0aGlzLldoKX07ZnVuY3Rpb24gWChlLG8pe2plKCksdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1qbChlKSksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSx0aGlzLldoPWU9PT12b2lkIDA/eGkoKTpvPT09dm9pZCAwP1RpKGUpOkZpKGUsbyksTChYKVt0aGlzLldoXT10aGlzfVgucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpLFgucHJvdG90eXBlLmNvbnN0cnVjdG9yPVgsWC5wcm90b3R5cGUuWGg9WCxYLlloPXt9LHQuYnRDb252ZXhIdWxsU2hhcGU9WCxYLnByb3RvdHlwZS5hZGRQb2ludD1mdW5jdGlvbihlLG8pe3ZhciBuPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLG89PT12b2lkIDA/TWkobixlKTpBaShuLGUsbyl9LFgucHJvdG90eXBlLnNldE1hcmdpbj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksd2kobyxlKX0sWC5wcm90b3R5cGUuZ2V0TWFyZ2luPWZ1bmN0aW9uKCl7cmV0dXJuIExpKHRoaXMuV2gpfSxYLnByb3RvdHlwZS5nZXROdW1WZXJ0aWNlcz1mdW5jdGlvbigpe3JldHVybiBraSh0aGlzLldoKX0sWC5wcm90b3R5cGUuaW5pdGlhbGl6ZVBvbHloZWRyYWxGZWF0dXJlcz1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLCEhSGkobyxlKX0sWC5wcm90b3R5cGUucmVjYWxjTG9jYWxBYWJiPWZ1bmN0aW9uKCl7WWkodGhpcy5XaCl9LFgucHJvdG90eXBlLmdldENvbnZleFBvbHloZWRyb249ZnVuY3Rpb24oKXtyZXR1cm4gYShWaSh0aGlzLldoKSxBKX0sWC5wcm90b3R5cGUuc2V0TG9jYWxTY2FsaW5nPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxRaShvLGUpfSxYLnByb3RvdHlwZS5nZXRMb2NhbFNjYWxpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gYShFaSh0aGlzLldoKSx5KX0sWC5wcm90b3R5cGUuY2FsY3VsYXRlTG9jYWxJbmVydGlhPWZ1bmN0aW9uKGUsbyl7dmFyIG49dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksWGkobixlLG8pfSxYLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe1VpKHRoaXMuV2gpfTtmdW5jdGlvbiBCdCgpe3RoaXMuV2g9R2koKSxMKEJ0KVt0aGlzLldoXT10aGlzfUJ0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxCdC5wcm90b3R5cGUuY29uc3RydWN0b3I9QnQsQnQucHJvdG90eXBlLlhoPUJ0LEJ0LlloPXt9LHQuYnREZWZhdWx0Q29sbGlzaW9uQ29uc3RydWN0aW9uSW5mbz1CdCxCdC5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtOaSh0aGlzLldoKX07ZnVuY3Rpb24gT3QoZSl7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSx0aGlzLldoPWU9PT12b2lkIDA/emkoKTpxaShlKSxMKE90KVt0aGlzLldoXT10aGlzfU90LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxPdC5wcm90b3R5cGUuY29uc3RydWN0b3I9T3QsT3QucHJvdG90eXBlLlhoPU90LE90LlloPXt9LHQuYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbj1PdCxPdC5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtaaSh0aGlzLldoKX07ZnVuY3Rpb24gSygpe3RoaXMuV2g9S2koKSxMKEspW3RoaXMuV2hdPXRoaXN9Sy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSksSy5wcm90b3R5cGUuY29uc3RydWN0b3I9SyxLLnByb3RvdHlwZS5YaD1LLEsuWWg9e30sdC5idFBlcnNpc3RlbnRNYW5pZm9sZD1LLEsucHJvdG90eXBlLmdldEJvZHkwPWZ1bmN0aW9uKCl7cmV0dXJuIGEoJGkodGhpcy5XaCksail9LEsucHJvdG90eXBlLmdldEJvZHkxPWZ1bmN0aW9uKCl7cmV0dXJuIGEoSmkodGhpcy5XaCksail9LEsucHJvdG90eXBlLmdldE51bUNvbnRhY3RzPWZ1bmN0aW9uKCl7cmV0dXJuIHRhKHRoaXMuV2gpfSxLLnByb3RvdHlwZS5nZXRDb250YWN0UG9pbnQ9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtyZXR1cm4gZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxhKGVhKG8sZSksaCl9LEsucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7b2EodGhpcy5XaCl9O2Z1bmN0aW9uIHl0KGUpe2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksdGhpcy5XaD1uYShlKSxMKHl0KVt0aGlzLldoXT10aGlzfXl0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKCQucHJvdG90eXBlKSx5dC5wcm90b3R5cGUuY29uc3RydWN0b3I9eXQseXQucHJvdG90eXBlLlhoPXl0LHl0LlloPXt9LHQuYnRDb2xsaXNpb25EaXNwYXRjaGVyPXl0LHl0LnByb3RvdHlwZS5nZXROdW1NYW5pZm9sZHM9ZnVuY3Rpb24oKXtyZXR1cm4gcmEodGhpcy5XaCl9LHl0LnByb3RvdHlwZS5nZXRNYW5pZm9sZEJ5SW5kZXhJbnRlcm5hbD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO3JldHVybiBlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGEoX2EobyxlKSxLKX0seXQucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7aWEodGhpcy5XaCl9O2Z1bmN0aW9uIHd0KCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0T3ZlcmxhcHBpbmdQYWlyQ2FsbGJhY2ssIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9d3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLHd0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj13dCx3dC5wcm90b3R5cGUuWGg9d3Qsd3QuWWg9e30sdC5idE92ZXJsYXBwaW5nUGFpckNhbGxiYWNrPXd0LHd0LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe2FhKHRoaXMuV2gpfTtmdW5jdGlvbiB0dCgpe3Rocm93ImNhbm5vdCBjb25zdHJ1Y3QgYSBidE92ZXJsYXBwaW5nUGFpckNhY2hlLCBubyBjb25zdHJ1Y3RvciBpbiBJREwifXR0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSx0dC5wcm90b3R5cGUuY29uc3RydWN0b3I9dHQsdHQucHJvdG90eXBlLlhoPXR0LHR0LlloPXt9LHQuYnRPdmVybGFwcGluZ1BhaXJDYWNoZT10dCx0dC5wcm90b3R5cGUuc2V0SW50ZXJuYWxHaG9zdFBhaXJDYWxsYmFjaz1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksc2EobyxlKX0sdHQucHJvdG90eXBlLmdldE51bU92ZXJsYXBwaW5nUGFpcnM9ZnVuY3Rpb24oKXtyZXR1cm4gcGEodGhpcy5XaCl9LHR0LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe2xhKHRoaXMuV2gpfTtmdW5jdGlvbiBwdCgpe3Rocm93ImNhbm5vdCBjb25zdHJ1Y3QgYSBidEJyb2FkcGhhc2VJbnRlcmZhY2UsIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9cHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLHB0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1wdCxwdC5wcm90b3R5cGUuWGg9cHQscHQuWWg9e30sdC5idEJyb2FkcGhhc2VJbnRlcmZhY2U9cHQscHQucHJvdG90eXBlLmdldE92ZXJsYXBwaW5nUGFpckNhY2hlPWZ1bmN0aW9uKCl7cmV0dXJuIGEodWEodGhpcy5XaCksdHQpfSxwdC5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtjYSh0aGlzLldoKX07ZnVuY3Rpb24gTHQoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgYnRDb2xsaXNpb25Db25maWd1cmF0aW9uLCBubyBjb25zdHJ1Y3RvciBpbiBJREwifUx0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxMdC5wcm90b3R5cGUuY29uc3RydWN0b3I9THQsTHQucHJvdG90eXBlLlhoPUx0LEx0LlloPXt9LHQuYnRDb2xsaXNpb25Db25maWd1cmF0aW9uPUx0LEx0LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe3lhKHRoaXMuV2gpfTtmdW5jdGlvbiBQdCgpe3RoaXMuV2g9aGEoKSxMKFB0KVt0aGlzLldoXT10aGlzfVB0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxQdC5wcm90b3R5cGUuY29uc3RydWN0b3I9UHQsUHQucHJvdG90eXBlLlhoPVB0LFB0LlloPXt9LHQuYnREYnZ0QnJvYWRwaGFzZT1QdCxQdC5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtmYSh0aGlzLldoKX07ZnVuY3Rpb24gUCgpe3Rocm93ImNhbm5vdCBjb25zdHJ1Y3QgYSBidEJyb2FkcGhhc2VQcm94eSwgbm8gY29uc3RydWN0b3IgaW4gSURMIn1QLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxQLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1QLFAucHJvdG90eXBlLlhoPVAsUC5ZaD17fSx0LmJ0QnJvYWRwaGFzZVByb3h5PVAsUC5wcm90b3R5cGUuZ2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXA9UC5wcm90b3R5cGUuWmg9ZnVuY3Rpb24oKXtyZXR1cm4gbWEodGhpcy5XaCl9LFAucHJvdG90eXBlLnNldF9tX2NvbGxpc2lvbkZpbHRlckdyb3VwPVAucHJvdG90eXBlLmFpPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxiYShvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoUC5wcm90b3R5cGUsIm1fY29sbGlzaW9uRmlsdGVyR3JvdXAiLHtnZXQ6UC5wcm90b3R5cGUuWmgsc2V0OlAucHJvdG90eXBlLmFpfSksUC5wcm90b3R5cGUuZ2V0X21fY29sbGlzaW9uRmlsdGVyTWFzaz1QLnByb3RvdHlwZS4kaD1mdW5jdGlvbigpe3JldHVybiBnYSh0aGlzLldoKX0sUC5wcm90b3R5cGUuc2V0X21fY29sbGlzaW9uRmlsdGVyTWFzaz1QLnByb3RvdHlwZS5iaT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksZGEobyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KFAucHJvdG90eXBlLCJtX2NvbGxpc2lvbkZpbHRlck1hc2siLHtnZXQ6UC5wcm90b3R5cGUuJGgsc2V0OlAucHJvdG90eXBlLmJpfSksUC5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtXYSh0aGlzLldoKX07ZnVuY3Rpb24gaShlLG8sbixyKXtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksbiYmdHlwZW9mIG49PSJvYmplY3QiJiYobj1uLldoKSxyJiZ0eXBlb2Ygcj09Im9iamVjdCImJihyPXIuV2gpLHRoaXMuV2g9cj09PXZvaWQgMD9DYShlLG8sbik6amEoZSxvLG4sciksTChpKVt0aGlzLldoXT10aGlzfWkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLGkucHJvdG90eXBlLmNvbnN0cnVjdG9yPWksaS5wcm90b3R5cGUuWGg9aSxpLlloPXt9LHQuYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvPWksaS5wcm90b3R5cGUuZ2V0X21fbGluZWFyRGFtcGluZz1pLnByb3RvdHlwZS5HaT1mdW5jdGlvbigpe3JldHVybiB2YSh0aGlzLldoKX0saS5wcm90b3R5cGUuc2V0X21fbGluZWFyRGFtcGluZz1pLnByb3RvdHlwZS5Baj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksRGEobyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGkucHJvdG90eXBlLCJtX2xpbmVhckRhbXBpbmciLHtnZXQ6aS5wcm90b3R5cGUuR2ksc2V0OmkucHJvdG90eXBlLkFqfSksaS5wcm90b3R5cGUuZ2V0X21fYW5ndWxhckRhbXBpbmc9aS5wcm90b3R5cGUub2k9ZnVuY3Rpb24oKXtyZXR1cm4gUmEodGhpcy5XaCl9LGkucHJvdG90eXBlLnNldF9tX2FuZ3VsYXJEYW1waW5nPWkucHJvdG90eXBlLmpqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxTYShvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaS5wcm90b3R5cGUsIm1fYW5ndWxhckRhbXBpbmciLHtnZXQ6aS5wcm90b3R5cGUub2ksc2V0OmkucHJvdG90eXBlLmpqfSksaS5wcm90b3R5cGUuZ2V0X21fZnJpY3Rpb249aS5wcm90b3R5cGUueWk9ZnVuY3Rpb24oKXtyZXR1cm4gSWEodGhpcy5XaCl9LGkucHJvdG90eXBlLnNldF9tX2ZyaWN0aW9uPWkucHJvdG90eXBlLnNqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxCYShvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaS5wcm90b3R5cGUsIm1fZnJpY3Rpb24iLHtnZXQ6aS5wcm90b3R5cGUueWksc2V0OmkucHJvdG90eXBlLnNqfSksaS5wcm90b3R5cGUuZ2V0X21fcm9sbGluZ0ZyaWN0aW9uPWkucHJvdG90eXBlLlJpPWZ1bmN0aW9uKCl7cmV0dXJuIE9hKHRoaXMuV2gpfSxpLnByb3RvdHlwZS5zZXRfbV9yb2xsaW5nRnJpY3Rpb249aS5wcm90b3R5cGUuTGo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFBhKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLnByb3RvdHlwZSwibV9yb2xsaW5nRnJpY3Rpb24iLHtnZXQ6aS5wcm90b3R5cGUuUmksc2V0OmkucHJvdG90eXBlLkxqfSksaS5wcm90b3R5cGUuZ2V0X21fcmVzdGl0dXRpb249aS5wcm90b3R5cGUuUWk9ZnVuY3Rpb24oKXtyZXR1cm4geGEodGhpcy5XaCl9LGkucHJvdG90eXBlLnNldF9tX3Jlc3RpdHV0aW9uPWkucHJvdG90eXBlLktqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxUYShvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaS5wcm90b3R5cGUsIm1fcmVzdGl0dXRpb24iLHtnZXQ6aS5wcm90b3R5cGUuUWksc2V0OmkucHJvdG90eXBlLktqfSksaS5wcm90b3R5cGUuZ2V0X21fbGluZWFyU2xlZXBpbmdUaHJlc2hvbGQ9aS5wcm90b3R5cGUuSGk9ZnVuY3Rpb24oKXtyZXR1cm4gRmEodGhpcy5XaCl9LGkucHJvdG90eXBlLnNldF9tX2xpbmVhclNsZWVwaW5nVGhyZXNob2xkPWkucHJvdG90eXBlLkJqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxNYShvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaS5wcm90b3R5cGUsIm1fbGluZWFyU2xlZXBpbmdUaHJlc2hvbGQiLHtnZXQ6aS5wcm90b3R5cGUuSGksc2V0OmkucHJvdG90eXBlLkJqfSksaS5wcm90b3R5cGUuZ2V0X21fYW5ndWxhclNsZWVwaW5nVGhyZXNob2xkPWkucHJvdG90eXBlLnBpPWZ1bmN0aW9uKCl7cmV0dXJuIEFhKHRoaXMuV2gpfSxpLnByb3RvdHlwZS5zZXRfbV9hbmd1bGFyU2xlZXBpbmdUaHJlc2hvbGQ9aS5wcm90b3R5cGUua2o9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLHdhKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLnByb3RvdHlwZSwibV9hbmd1bGFyU2xlZXBpbmdUaHJlc2hvbGQiLHtnZXQ6aS5wcm90b3R5cGUucGksc2V0OmkucHJvdG90eXBlLmtqfSksaS5wcm90b3R5cGUuZ2V0X21fYWRkaXRpb25hbERhbXBpbmc9aS5wcm90b3R5cGUua2k9ZnVuY3Rpb24oKXtyZXR1cm4hIUxhKHRoaXMuV2gpfSxpLnByb3RvdHlwZS5zZXRfbV9hZGRpdGlvbmFsRGFtcGluZz1pLnByb3RvdHlwZS5maj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksa2EobyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGkucHJvdG90eXBlLCJtX2FkZGl0aW9uYWxEYW1waW5nIix7Z2V0OmkucHJvdG90eXBlLmtpLHNldDppLnByb3RvdHlwZS5man0pLGkucHJvdG90eXBlLmdldF9tX2FkZGl0aW9uYWxEYW1waW5nRmFjdG9yPWkucHJvdG90eXBlLmxpPWZ1bmN0aW9uKCl7cmV0dXJuIEhhKHRoaXMuV2gpfSxpLnByb3RvdHlwZS5zZXRfbV9hZGRpdGlvbmFsRGFtcGluZ0ZhY3Rvcj1pLnByb3RvdHlwZS5naj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksWWEobyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGkucHJvdG90eXBlLCJtX2FkZGl0aW9uYWxEYW1waW5nRmFjdG9yIix7Z2V0OmkucHJvdG90eXBlLmxpLHNldDppLnByb3RvdHlwZS5nan0pLGkucHJvdG90eXBlLmdldF9tX2FkZGl0aW9uYWxMaW5lYXJEYW1waW5nVGhyZXNob2xkU3FyPWkucHJvdG90eXBlLm1pPWZ1bmN0aW9uKCl7cmV0dXJuIFZhKHRoaXMuV2gpfSxpLnByb3RvdHlwZS5zZXRfbV9hZGRpdGlvbmFsTGluZWFyRGFtcGluZ1RocmVzaG9sZFNxcj1pLnByb3RvdHlwZS5oaj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksUWEobyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGkucHJvdG90eXBlLCJtX2FkZGl0aW9uYWxMaW5lYXJEYW1waW5nVGhyZXNob2xkU3FyIix7Z2V0OmkucHJvdG90eXBlLm1pLHNldDppLnByb3RvdHlwZS5oan0pLGkucHJvdG90eXBlLmdldF9tX2FkZGl0aW9uYWxBbmd1bGFyRGFtcGluZ1RocmVzaG9sZFNxcj1pLnByb3RvdHlwZS5qaT1mdW5jdGlvbigpe3JldHVybiBFYSh0aGlzLldoKX0saS5wcm90b3R5cGUuc2V0X21fYWRkaXRpb25hbEFuZ3VsYXJEYW1waW5nVGhyZXNob2xkU3FyPWkucHJvdG90eXBlLmVqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxYYShvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaS5wcm90b3R5cGUsIm1fYWRkaXRpb25hbEFuZ3VsYXJEYW1waW5nVGhyZXNob2xkU3FyIix7Z2V0OmkucHJvdG90eXBlLmppLHNldDppLnByb3RvdHlwZS5lan0pLGkucHJvdG90eXBlLmdldF9tX2FkZGl0aW9uYWxBbmd1bGFyRGFtcGluZ0ZhY3Rvcj1pLnByb3RvdHlwZS5paT1mdW5jdGlvbigpe3JldHVybiBVYSh0aGlzLldoKX0saS5wcm90b3R5cGUuc2V0X21fYWRkaXRpb25hbEFuZ3VsYXJEYW1waW5nRmFjdG9yPWkucHJvdG90eXBlLmRqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxHYShvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaS5wcm90b3R5cGUsIm1fYWRkaXRpb25hbEFuZ3VsYXJEYW1waW5nRmFjdG9yIix7Z2V0OmkucHJvdG90eXBlLmlpLHNldDppLnByb3RvdHlwZS5kan0pLGkucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7TmEodGhpcy5XaCl9O2Z1bmN0aW9uIGwoZSl7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSx0aGlzLldoPXphKGUpLEwobClbdGhpcy5XaF09dGhpc31sLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGoucHJvdG90eXBlKSxsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1sLGwucHJvdG90eXBlLlhoPWwsbC5ZaD17fSx0LmJ0UmlnaWRCb2R5PWwsbC5wcm90b3R5cGUuZ2V0Q2VudGVyT2ZNYXNzVHJhbnNmb3JtPWZ1bmN0aW9uKCl7cmV0dXJuIGEocWEodGhpcy5XaCksTyl9LGwucHJvdG90eXBlLnNldENlbnRlck9mTWFzc1RyYW5zZm9ybT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksWmEobyxlKX0sbC5wcm90b3R5cGUuc2V0U2xlZXBpbmdUaHJlc2hvbGRzPWZ1bmN0aW9uKGUsbyl7dmFyIG49dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksS2EobixlLG8pfSxsLnByb3RvdHlwZS5nZXRMaW5lYXJEYW1waW5nPWZ1bmN0aW9uKCl7cmV0dXJuICRhKHRoaXMuV2gpfSxsLnByb3RvdHlwZS5nZXRBbmd1bGFyRGFtcGluZz1mdW5jdGlvbigpe3JldHVybiBKYSh0aGlzLldoKX0sbC5wcm90b3R5cGUuc2V0RGFtcGluZz1mdW5jdGlvbihlLG8pe3ZhciBuPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLHRzKG4sZSxvKX0sbC5wcm90b3R5cGUuc2V0TWFzc1Byb3BzPWZ1bmN0aW9uKGUsbyl7dmFyIG49dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksZXMobixlLG8pfSxsLnByb3RvdHlwZS5nZXRMaW5lYXJGYWN0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gYShvcyh0aGlzLldoKSx5KX0sbC5wcm90b3R5cGUuc2V0TGluZWFyRmFjdG9yPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxucyhvLGUpfSxsLnByb3RvdHlwZS5hcHBseVRvcnF1ZT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCkscnMobyxlKX0sbC5wcm90b3R5cGUuYXBwbHlMb2NhbFRvcnF1ZT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksX3MobyxlKX0sbC5wcm90b3R5cGUuYXBwbHlGb3JjZT1mdW5jdGlvbihlLG8pe3ZhciBuPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLGlzKG4sZSxvKX0sbC5wcm90b3R5cGUuYXBwbHlDZW50cmFsRm9yY2U9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGFzKG8sZSl9LGwucHJvdG90eXBlLmFwcGx5Q2VudHJhbExvY2FsRm9yY2U9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLHNzKG8sZSl9LGwucHJvdG90eXBlLmFwcGx5VG9ycXVlSW1wdWxzZT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCkscHMobyxlKX0sbC5wcm90b3R5cGUuYXBwbHlJbXB1bHNlPWZ1bmN0aW9uKGUsbyl7dmFyIG49dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksbHMobixlLG8pfSxsLnByb3RvdHlwZS5hcHBseUNlbnRyYWxJbXB1bHNlPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSx1cyhvLGUpfSxsLnByb3RvdHlwZS51cGRhdGVJbmVydGlhVGVuc29yPWZ1bmN0aW9uKCl7Y3ModGhpcy5XaCl9LGwucHJvdG90eXBlLmdldExpbmVhclZlbG9jaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIGEoeXModGhpcy5XaCkseSl9LGwucHJvdG90eXBlLmdldEFuZ3VsYXJWZWxvY2l0eT1mdW5jdGlvbigpe3JldHVybiBhKGhzKHRoaXMuV2gpLHkpfSxsLnByb3RvdHlwZS5zZXRMaW5lYXJWZWxvY2l0eT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksZnMobyxlKX0sbC5wcm90b3R5cGUuc2V0QW5ndWxhclZlbG9jaXR5PWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxtcyhvLGUpfSxsLnByb3RvdHlwZS5nZXRNb3Rpb25TdGF0ZT1mdW5jdGlvbigpe3JldHVybiBhKGJzKHRoaXMuV2gpLHJ0KX0sbC5wcm90b3R5cGUuc2V0TW90aW9uU3RhdGU9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGdzKG8sZSl9LGwucHJvdG90eXBlLmdldEFuZ3VsYXJGYWN0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gYShkcyh0aGlzLldoKSx5KX0sbC5wcm90b3R5cGUuc2V0QW5ndWxhckZhY3Rvcj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksV3MobyxlKX0sbC5wcm90b3R5cGUudXBjYXN0PWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7cmV0dXJuIGUmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksYShDcyhvLGUpLGwpfSxsLnByb3RvdHlwZS5nZXRBYWJiPWZ1bmN0aW9uKGUsbyl7dmFyIG49dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksanMobixlLG8pfSxsLnByb3RvdHlwZS5hcHBseUdyYXZpdHk9ZnVuY3Rpb24oKXt2cyh0aGlzLldoKX0sbC5wcm90b3R5cGUuZ2V0R3Jhdml0eT1mdW5jdGlvbigpe3JldHVybiBhKERzKHRoaXMuV2gpLHkpfSxsLnByb3RvdHlwZS5zZXRHcmF2aXR5PWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxScyhvLGUpfSxsLnByb3RvdHlwZS5nZXRCcm9hZHBoYXNlUHJveHk9ZnVuY3Rpb24oKXtyZXR1cm4gYShTcyh0aGlzLldoKSxQKX0sbC5wcm90b3R5cGUuY2xlYXJGb3JjZXM9ZnVuY3Rpb24oKXtJcyh0aGlzLldoKX0sbC5wcm90b3R5cGUuc2V0QW5pc290cm9waWNGcmljdGlvbj1mdW5jdGlvbihlLG8pe3ZhciBuPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLEJzKG4sZSxvKX0sbC5wcm90b3R5cGUuZ2V0Q29sbGlzaW9uU2hhcGU9ZnVuY3Rpb24oKXtyZXR1cm4gYShPcyh0aGlzLldoKSxFKX0sbC5wcm90b3R5cGUuc2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQ9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFBzKG8sZSl9LGwucHJvdG90eXBlLnNldEFjdGl2YXRpb25TdGF0ZT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCkseHMobyxlKX0sbC5wcm90b3R5cGUuZm9yY2VBY3RpdmF0aW9uU3RhdGU9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFRzKG8sZSl9LGwucHJvdG90eXBlLmFjdGl2YXRlPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxlPT09dm9pZCAwP0ZzKG8pOk1zKG8sZSl9LGwucHJvdG90eXBlLmlzQWN0aXZlPWZ1bmN0aW9uKCl7cmV0dXJuISFBcyh0aGlzLldoKX0sbC5wcm90b3R5cGUuaXNLaW5lbWF0aWNPYmplY3Q9ZnVuY3Rpb24oKXtyZXR1cm4hIXdzKHRoaXMuV2gpfSxsLnByb3RvdHlwZS5pc1N0YXRpY09iamVjdD1mdW5jdGlvbigpe3JldHVybiEhTHModGhpcy5XaCl9LGwucHJvdG90eXBlLmlzU3RhdGljT3JLaW5lbWF0aWNPYmplY3Q9ZnVuY3Rpb24oKXtyZXR1cm4hIWtzKHRoaXMuV2gpfSxsLnByb3RvdHlwZS5nZXRSZXN0aXR1dGlvbj1mdW5jdGlvbigpe3JldHVybiBIcyh0aGlzLldoKX0sbC5wcm90b3R5cGUuZ2V0RnJpY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gWXModGhpcy5XaCl9LGwucHJvdG90eXBlLmdldFJvbGxpbmdGcmljdGlvbj1mdW5jdGlvbigpe3JldHVybiBWcyh0aGlzLldoKX0sbC5wcm90b3R5cGUuc2V0UmVzdGl0dXRpb249ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFFzKG8sZSl9LGwucHJvdG90eXBlLnNldEZyaWN0aW9uPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxFcyhvLGUpfSxsLnByb3RvdHlwZS5zZXRSb2xsaW5nRnJpY3Rpb249ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFhzKG8sZSl9LGwucHJvdG90eXBlLmdldFdvcmxkVHJhbnNmb3JtPWZ1bmN0aW9uKCl7cmV0dXJuIGEoVXModGhpcy5XaCksTyl9LGwucHJvdG90eXBlLmdldENvbGxpc2lvbkZsYWdzPWZ1bmN0aW9uKCl7cmV0dXJuIEdzKHRoaXMuV2gpfSxsLnByb3RvdHlwZS5zZXRDb2xsaXNpb25GbGFncz1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksTnMobyxlKX0sbC5wcm90b3R5cGUuc2V0V29ybGRUcmFuc2Zvcm09ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLHpzKG8sZSl9LGwucHJvdG90eXBlLnNldENvbGxpc2lvblNoYXBlPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxxcyhvLGUpfSxsLnByb3RvdHlwZS5zZXRDY2RNb3Rpb25UaHJlc2hvbGQ9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFpzKG8sZSl9LGwucHJvdG90eXBlLnNldENjZFN3ZXB0U3BoZXJlUmFkaXVzPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxLcyhvLGUpfSxsLnByb3RvdHlwZS5nZXRVc2VySW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gJHModGhpcy5XaCl9LGwucHJvdG90eXBlLnNldFVzZXJJbmRleD1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksSnMobyxlKX0sbC5wcm90b3R5cGUuZ2V0VXNlclBvaW50ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gYSh0cCh0aGlzLldoKSxXdCl9LGwucHJvdG90eXBlLnNldFVzZXJQb2ludGVyPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxlcChvLGUpfSxsLnByb3RvdHlwZS5nZXRCcm9hZHBoYXNlSGFuZGxlPWZ1bmN0aW9uKCl7cmV0dXJuIGEob3AodGhpcy5XaCksUCl9LGwucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7bnAodGhpcy5XaCl9O2Z1bmN0aW9uIHh0KCl7dGhpcy5XaD1ycCgpLEwoeHQpW3RoaXMuV2hdPXRoaXN9eHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZy5wcm90b3R5cGUpLHh0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj14dCx4dC5wcm90b3R5cGUuWGg9eHQseHQuWWg9e30sdC5idFNlcXVlbnRpYWxJbXB1bHNlQ29uc3RyYWludFNvbHZlcj14dCx4dC5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXtfcCh0aGlzLldoKX07ZnVuY3Rpb24ga3QoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgYnRDb25zdHJhaW50U29sdmVyLCBubyBjb25zdHJ1Y3RvciBpbiBJREwifWt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxrdC5wcm90b3R5cGUuY29uc3RydWN0b3I9a3Qsa3QucHJvdG90eXBlLlhoPWt0LGt0LlloPXt9LHQuYnRDb25zdHJhaW50U29sdmVyPWt0LGt0LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe2lwKHRoaXMuV2gpfTtmdW5jdGlvbiBzKCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0RGlzcGF0Y2hlckluZm8sIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9cy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSkscy5wcm90b3R5cGUuY29uc3RydWN0b3I9cyxzLnByb3RvdHlwZS5YaD1zLHMuWWg9e30sdC5idERpc3BhdGNoZXJJbmZvPXMscy5wcm90b3R5cGUuZ2V0X21fdGltZVN0ZXA9cy5wcm90b3R5cGUuWGk9ZnVuY3Rpb24oKXtyZXR1cm4gYXAodGhpcy5XaCl9LHMucHJvdG90eXBlLnNldF9tX3RpbWVTdGVwPXMucHJvdG90eXBlLlJqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxzcChvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkocy5wcm90b3R5cGUsIm1fdGltZVN0ZXAiLHtnZXQ6cy5wcm90b3R5cGUuWGksc2V0OnMucHJvdG90eXBlLlJqfSkscy5wcm90b3R5cGUuZ2V0X21fc3RlcENvdW50PXMucHJvdG90eXBlLlZpPWZ1bmN0aW9uKCl7cmV0dXJuIHBwKHRoaXMuV2gpfSxzLnByb3RvdHlwZS5zZXRfbV9zdGVwQ291bnQ9cy5wcm90b3R5cGUuUGo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGxwKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSwibV9zdGVwQ291bnQiLHtnZXQ6cy5wcm90b3R5cGUuVmksc2V0OnMucHJvdG90eXBlLlBqfSkscy5wcm90b3R5cGUuZ2V0X21fZGlzcGF0Y2hGdW5jPXMucHJvdG90eXBlLnVpPWZ1bmN0aW9uKCl7cmV0dXJuIHVwKHRoaXMuV2gpfSxzLnByb3RvdHlwZS5zZXRfbV9kaXNwYXRjaEZ1bmM9cy5wcm90b3R5cGUub2o9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGNwKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSwibV9kaXNwYXRjaEZ1bmMiLHtnZXQ6cy5wcm90b3R5cGUudWksc2V0OnMucHJvdG90eXBlLm9qfSkscy5wcm90b3R5cGUuZ2V0X21fdGltZU9mSW1wYWN0PXMucHJvdG90eXBlLldpPWZ1bmN0aW9uKCl7cmV0dXJuIHlwKHRoaXMuV2gpfSxzLnByb3RvdHlwZS5zZXRfbV90aW1lT2ZJbXBhY3Q9cy5wcm90b3R5cGUuUWo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGhwKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSwibV90aW1lT2ZJbXBhY3QiLHtnZXQ6cy5wcm90b3R5cGUuV2ksc2V0OnMucHJvdG90eXBlLlFqfSkscy5wcm90b3R5cGUuZ2V0X21fdXNlQ29udGludW91cz1zLnByb3RvdHlwZS5aaT1mdW5jdGlvbigpe3JldHVybiEhZnAodGhpcy5XaCl9LHMucHJvdG90eXBlLnNldF9tX3VzZUNvbnRpbnVvdXM9cy5wcm90b3R5cGUuVGo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG1wKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSwibV91c2VDb250aW51b3VzIix7Z2V0OnMucHJvdG90eXBlLlppLHNldDpzLnByb3RvdHlwZS5Uan0pLHMucHJvdG90eXBlLmdldF9tX2VuYWJsZVNhdENvbnZleD1zLnByb3RvdHlwZS53aT1mdW5jdGlvbigpe3JldHVybiEhYnAodGhpcy5XaCl9LHMucHJvdG90eXBlLnNldF9tX2VuYWJsZVNhdENvbnZleD1zLnByb3RvdHlwZS5xaj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksZ3AobyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHMucHJvdG90eXBlLCJtX2VuYWJsZVNhdENvbnZleCIse2dldDpzLnByb3RvdHlwZS53aSxzZXQ6cy5wcm90b3R5cGUucWp9KSxzLnByb3RvdHlwZS5nZXRfbV9lbmFibGVTUFU9cy5wcm90b3R5cGUudmk9ZnVuY3Rpb24oKXtyZXR1cm4hIWRwKHRoaXMuV2gpfSxzLnByb3RvdHlwZS5zZXRfbV9lbmFibGVTUFU9cy5wcm90b3R5cGUucGo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLFdwKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSwibV9lbmFibGVTUFUiLHtnZXQ6cy5wcm90b3R5cGUudmksc2V0OnMucHJvdG90eXBlLnBqfSkscy5wcm90b3R5cGUuZ2V0X21fdXNlRXBhPXMucHJvdG90eXBlLmFqPWZ1bmN0aW9uKCl7cmV0dXJuISFDcCh0aGlzLldoKX0scy5wcm90b3R5cGUuc2V0X21fdXNlRXBhPXMucHJvdG90eXBlLlZqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxqcChvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkocy5wcm90b3R5cGUsIm1fdXNlRXBhIix7Z2V0OnMucHJvdG90eXBlLmFqLHNldDpzLnByb3RvdHlwZS5Wan0pLHMucHJvdG90eXBlLmdldF9tX2FsbG93ZWRDY2RQZW5ldHJhdGlvbj1zLnByb3RvdHlwZS5uaT1mdW5jdGlvbigpe3JldHVybiB2cCh0aGlzLldoKX0scy5wcm90b3R5cGUuc2V0X21fYWxsb3dlZENjZFBlbmV0cmF0aW9uPXMucHJvdG90eXBlLmlqPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxEcChvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkocy5wcm90b3R5cGUsIm1fYWxsb3dlZENjZFBlbmV0cmF0aW9uIix7Z2V0OnMucHJvdG90eXBlLm5pLHNldDpzLnByb3RvdHlwZS5pan0pLHMucHJvdG90eXBlLmdldF9tX3VzZUNvbnZleENvbnNlcnZhdGl2ZURpc3RhbmNlVXRpbD1zLnByb3RvdHlwZS4kaT1mdW5jdGlvbigpe3JldHVybiEhUnAodGhpcy5XaCl9LHMucHJvdG90eXBlLnNldF9tX3VzZUNvbnZleENvbnNlcnZhdGl2ZURpc3RhbmNlVXRpbD1zLnByb3RvdHlwZS5Vaj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksU3AobyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHMucHJvdG90eXBlLCJtX3VzZUNvbnZleENvbnNlcnZhdGl2ZURpc3RhbmNlVXRpbCIse2dldDpzLnByb3RvdHlwZS4kaSxzZXQ6cy5wcm90b3R5cGUuVWp9KSxzLnByb3RvdHlwZS5nZXRfbV9jb252ZXhDb25zZXJ2YXRpdmVEaXN0YW5jZVRocmVzaG9sZD1zLnByb3RvdHlwZS5yaT1mdW5jdGlvbigpe3JldHVybiBJcCh0aGlzLldoKX0scy5wcm90b3R5cGUuc2V0X21fY29udmV4Q29uc2VydmF0aXZlRGlzdGFuY2VUaHJlc2hvbGQ9cy5wcm90b3R5cGUubGo9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLEJwKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSwibV9jb252ZXhDb25zZXJ2YXRpdmVEaXN0YW5jZVRocmVzaG9sZCIse2dldDpzLnByb3RvdHlwZS5yaSxzZXQ6cy5wcm90b3R5cGUubGp9KSxzLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXz1mdW5jdGlvbigpe09wKHRoaXMuV2gpfTtmdW5jdGlvbiBTKCl7dGhyb3ciY2Fubm90IGNvbnN0cnVjdCBhIGJ0Q29udGFjdFNvbHZlckluZm8sIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9Uy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnLnByb3RvdHlwZSksUy5wcm90b3R5cGUuY29uc3RydWN0b3I9UyxTLnByb3RvdHlwZS5YaD1TLFMuWWg9e30sdC5idENvbnRhY3RTb2x2ZXJJbmZvPVMsUy5wcm90b3R5cGUuZ2V0X21fc3BsaXRJbXB1bHNlPVMucHJvdG90eXBlLlRpPWZ1bmN0aW9uKCl7cmV0dXJuISFQcCh0aGlzLldoKX0sUy5wcm90b3R5cGUuc2V0X21fc3BsaXRJbXB1bHNlPVMucHJvdG90eXBlLk5qPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSx4cChvLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoUy5wcm90b3R5cGUsIm1fc3BsaXRJbXB1bHNlIix7Z2V0OlMucHJvdG90eXBlLlRpLHNldDpTLnByb3RvdHlwZS5Oan0pLFMucHJvdG90eXBlLmdldF9tX3NwbGl0SW1wdWxzZVBlbmV0cmF0aW9uVGhyZXNob2xkPVMucHJvdG90eXBlLlVpPWZ1bmN0aW9uKCl7cmV0dXJuIFRwKHRoaXMuV2gpfSxTLnByb3RvdHlwZS5zZXRfbV9zcGxpdEltcHVsc2VQZW5ldHJhdGlvblRocmVzaG9sZD1TLnByb3RvdHlwZS5Paj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksRnAobyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KFMucHJvdG90eXBlLCJtX3NwbGl0SW1wdWxzZVBlbmV0cmF0aW9uVGhyZXNob2xkIix7Z2V0OlMucHJvdG90eXBlLlVpLHNldDpTLnByb3RvdHlwZS5Pan0pLFMucHJvdG90eXBlLmdldF9tX251bUl0ZXJhdGlvbnM9Uy5wcm90b3R5cGUuTWk9ZnVuY3Rpb24oKXtyZXR1cm4gTXAodGhpcy5XaCl9LFMucHJvdG90eXBlLnNldF9tX251bUl0ZXJhdGlvbnM9Uy5wcm90b3R5cGUuR2o9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLEFwKG8sZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTLnByb3RvdHlwZSwibV9udW1JdGVyYXRpb25zIix7Z2V0OlMucHJvdG90eXBlLk1pLHNldDpTLnByb3RvdHlwZS5Han0pLFMucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7d3AodGhpcy5XaCl9O2Z1bmN0aW9uIEkoZSxvLG4scil7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLG4mJnR5cGVvZiBuPT0ib2JqZWN0IiYmKG49bi5XaCksciYmdHlwZW9mIHI9PSJvYmplY3QiJiYocj1yLldoKSx0aGlzLldoPUxwKGUsbyxuLHIpLEwoSSlbdGhpcy5XaF09dGhpc31JLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFQucHJvdG90eXBlKSxJLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1JLEkucHJvdG90eXBlLlhoPUksSS5ZaD17fSx0LmJ0RGlzY3JldGVEeW5hbWljc1dvcmxkPUksSS5wcm90b3R5cGUuc2V0R3Jhdml0eT1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksa3AobyxlKX0sSS5wcm90b3R5cGUuZ2V0R3Jhdml0eT1mdW5jdGlvbigpe3JldHVybiBhKEhwKHRoaXMuV2gpLHkpfSxJLnByb3RvdHlwZS5hZGRSaWdpZEJvZHk9ZnVuY3Rpb24oZSxvLG4pe3ZhciByPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLG4mJnR5cGVvZiBuPT0ib2JqZWN0IiYmKG49bi5XaCksbz09PXZvaWQgMD9ZcChyLGUpOm49PT12b2lkIDA/X2ViX2J0RGlzY3JldGVEeW5hbWljc1dvcmxkX2FkZFJpZ2lkQm9keV8yKHIsZSxvKTpWcChyLGUsbyxuKX0sSS5wcm90b3R5cGUucmVtb3ZlUmlnaWRCb2R5PWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxRcChvLGUpfSxJLnByb3RvdHlwZS5zdGVwU2ltdWxhdGlvbj1mdW5jdGlvbihlLG8sbil7dmFyIHI9dGhpcy5XaDtyZXR1cm4gZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLG4mJnR5cGVvZiBuPT0ib2JqZWN0IiYmKG49bi5XaCksbz09PXZvaWQgMD9FcChyLGUpOm49PT12b2lkIDA/WHAocixlLG8pOlVwKHIsZSxvLG4pfSxJLnByb3RvdHlwZS5zZXRDb250YWN0QWRkZWRDYWxsYmFjaz1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksR3AobyxlKX0sSS5wcm90b3R5cGUuc2V0Q29udGFjdFByb2Nlc3NlZENhbGxiYWNrPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxOcChvLGUpfSxJLnByb3RvdHlwZS5zZXRDb250YWN0RGVzdHJveWVkQ2FsbGJhY2s9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLHpwKG8sZSl9LEkucHJvdG90eXBlLmdldERpc3BhdGNoZXI9ZnVuY3Rpb24oKXtyZXR1cm4gYShxcCh0aGlzLldoKSwkKX0sSS5wcm90b3R5cGUuZ2V0UGFpckNhY2hlPWZ1bmN0aW9uKCl7cmV0dXJuIGEoWnAodGhpcy5XaCksdHQpfSxJLnByb3RvdHlwZS5nZXREaXNwYXRjaEluZm89ZnVuY3Rpb24oKXtyZXR1cm4gYShLcCh0aGlzLldoKSxzKX0sSS5wcm90b3R5cGUuYWRkQ29sbGlzaW9uT2JqZWN0PWZ1bmN0aW9uKGUsbyxuKXt2YXIgcj10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxuJiZ0eXBlb2Ygbj09Im9iamVjdCImJihuPW4uV2gpLG89PT12b2lkIDA/JHAocixlKTpuPT09dm9pZCAwP0pwKHIsZSxvKTp0bChyLGUsbyxuKX0sSS5wcm90b3R5cGUucmVtb3ZlQ29sbGlzaW9uT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxlbChvLGUpfSxJLnByb3RvdHlwZS5nZXRCcm9hZHBoYXNlPWZ1bmN0aW9uKCl7cmV0dXJuIGEob2wodGhpcy5XaCkscHQpfSxJLnByb3RvdHlwZS5jb252ZXhTd2VlcFRlc3Q9ZnVuY3Rpb24oZSxvLG4scixjKXt2YXIgRD10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxuJiZ0eXBlb2Ygbj09Im9iamVjdCImJihuPW4uV2gpLHImJnR5cGVvZiByPT0ib2JqZWN0IiYmKHI9ci5XaCksYyYmdHlwZW9mIGM9PSJvYmplY3QiJiYoYz1jLldoKSxubChELGUsbyxuLHIsYyl9LEkucHJvdG90eXBlLmNvbnRhY3RQYWlyVGVzdD1mdW5jdGlvbihlLG8sbil7dmFyIHI9dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLG8mJnR5cGVvZiBvPT0ib2JqZWN0IiYmKG89by5XaCksbiYmdHlwZW9mIG49PSJvYmplY3QiJiYobj1uLldoKSxybChyLGUsbyxuKX0sSS5wcm90b3R5cGUuY29udGFjdFRlc3Q9ZnVuY3Rpb24oZSxvKXt2YXIgbj10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxfbChuLGUsbyl9LEkucHJvdG90eXBlLnVwZGF0ZVNpbmdsZUFhYmI9ZnVuY3Rpb24oZSl7dmFyIG89dGhpcy5XaDtlJiZ0eXBlb2YgZT09Im9iamVjdCImJihlPWUuV2gpLGlsKG8sZSl9LEkucHJvdG90eXBlLmFkZEFjdGlvbj1mdW5jdGlvbihlKXt2YXIgbz10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksYWwobyxlKX0sSS5wcm90b3R5cGUucmVtb3ZlQWN0aW9uPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxzbChvLGUpfSxJLnByb3RvdHlwZS5nZXRTb2x2ZXJJbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIGEocGwodGhpcy5XaCksUyl9LEkucHJvdG90eXBlLnNldEludGVybmFsVGlja0NhbGxiYWNrPWZ1bmN0aW9uKGUsbyxuKXt2YXIgcj10aGlzLldoO2UmJnR5cGVvZiBlPT0ib2JqZWN0IiYmKGU9ZS5XaCksbyYmdHlwZW9mIG89PSJvYmplY3QiJiYobz1vLldoKSxuJiZ0eXBlb2Ygbj09Im9iamVjdCImJihuPW4uV2gpLG89PT12b2lkIDA/bGwocixlKTpuPT09dm9pZCAwP3VsKHIsZSxvKTpjbChyLGUsbyxuKX0sSS5wcm90b3R5cGUuX19kZXN0cm95X189ZnVuY3Rpb24oKXt5bCh0aGlzLldoKX07ZnVuY3Rpb24gVHQoKXt0aHJvdyJjYW5ub3QgY29uc3RydWN0IGEgYnRBY3Rpb25JbnRlcmZhY2UsIG5vIGNvbnN0cnVjdG9yIGluIElETCJ9cmV0dXJuIFR0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcucHJvdG90eXBlKSxUdC5wcm90b3R5cGUuY29uc3RydWN0b3I9VHQsVHQucHJvdG90eXBlLlhoPVR0LFR0LlloPXt9LHQuYnRBY3Rpb25JbnRlcmZhY2U9VHQsVHQucHJvdG90eXBlLnVwZGF0ZUFjdGlvbj1mdW5jdGlvbihlLG8pe3ZhciBuPXRoaXMuV2g7ZSYmdHlwZW9mIGU9PSJvYmplY3QiJiYoZT1lLldoKSxvJiZ0eXBlb2Ygbz09Im9iamVjdCImJihvPW8uV2gpLGhsKG4sZSxvKX0sVHQucHJvdG90eXBlLl9fZGVzdHJveV9fPWZ1bmN0aW9uKCl7ZmwodGhpcy5XaCl9LGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3QuUEhZX0ZMT0FUPW1sKCksdC5QSFlfRE9VQkxFPWJsKCksdC5QSFlfSU5URUdFUj1nbCgpLHQuUEhZX1NIT1JUPWRsKCksdC5QSFlfRklYRURQT0lOVDg4PVdsKCksdC5QSFlfVUNIQVI9Q2woKX1GZT9lKCk6TXQudW5zaGlmdChlKX0oKSx0LkNPTlRBQ1RfQURERURfQ0FMTEJBQ0tfU0lHTkFUVVJFPSJpaWlpaWlpaSIsdC5DT05UQUNUX0RFU1RST1lFRF9DQUxMQkFDS19TSUdOQVRVUkU9ImlpIix0LkNPTlRBQ1RfUFJPQ0VTU0VEX0NBTExCQUNLX1NJR05BVFVSRT0iaWlpaSIsdC5JTlRFUk5BTF9USUNLX0NBTExCQUNLX1NJR05BVFVSRT0idmlmIix0aGlzLkFtbW89dCxfLnJlYWR5fWxldCBIdD1bXSxadD1bXSxGdD17fSxxLGIsY2UsSnQseWUsdGU9MTUwLGVlPTE1MCxmdD0xLG9lPSExO2NvbnN0IER0PXtzaXplOjkuNSxzdGFydGluZ0hlaWdodDo4LHNwaW5Gb3JjZTo2LHRocm93Rm9yY2U6NSxncmF2aXR5OjEsbWFzczoxLGZyaWN0aW9uOi44LHJlc3RpdHV0aW9uOi4xLGxpbmVhckRhbXBpbmc6LjUsYW5ndWxhckRhbXBpbmc6LjQsc2V0dGxlVGltZW91dDo1ZTN9O2xldCBwPXsuLi5EdH0saGUsSDtzZWxmLm9ubWVzc2FnZT1fPT57c3dpdGNoKF8uZGF0YS5hY3Rpb24pe2Nhc2Uicm9sbERpZSI6Z2UoXy5kYXRhLnNpZGVzKTticmVhaztjYXNlImluaXQiOkRsKF8uZGF0YSkudGhlbigoKT0+e3NlbGYucG9zdE1lc3NhZ2Uoe2FjdGlvbjoiaW5pdC1jb21wbGV0ZSJ9KX0pO2JyZWFrO2Nhc2UiY2xlYXJEaWNlIjpQbCgpO2JyZWFrO2Nhc2UicmVtb3ZlRGllIjpPZShfLmRhdGEuaWQpO2JyZWFrO2Nhc2UicmVzaXplIjp0ZT1fLmRhdGEud2lkdGgsZWU9Xy5kYXRhLmhlaWdodCxmdD10ZS9lZSxiZShwLnNpemUscC5zdGFydGluZ0hlaWdodCsxMCk7YnJlYWs7Y2FzZSJ1cGRhdGVDb25maWciOlJsKF8uZGF0YS5vcHRpb25zKTticmVhaztjYXNlImNvbm5lY3QiOmNlPV8ucG9ydHNbMF0sY2Uub25tZXNzYWdlPXQ9Pntzd2l0Y2godC5kYXRhLmFjdGlvbil7Y2FzZSJpbml0QnVmZmVyIjpIPW5ldyBGbG9hdDMyQXJyYXkodC5kYXRhLmRpY2VCdWZmZXIpLEhbMF09LTE7YnJlYWs7Y2FzZSJsb2FkTW9kZWxzIjpTbCh0LmRhdGEub3B0aW9ucyk7YnJlYWs7Y2FzZSJhZGREaWUiOnQuZGF0YS5vcHRpb25zLm5ld1N0YXJ0UG9pbnQmJmZlKCk7Y29uc3QgZD1PbCh0LmRhdGEub3B0aW9ucyk7Z2UoZCk7YnJlYWs7Y2FzZSJyb2xsRGllIjpnZSh0LmRhdGEuaWQpO2JyZWFrO2Nhc2UicmVtb3ZlRGllIjpPZSh0LmRhdGEuaWQpO2JyZWFrO2Nhc2Uic3RvcFNpbXVsYXRpb24iOm9lPSEwO2JyZWFrO2Nhc2UicmVzdW1lU2ltdWxhdGlvbiI6dC5kYXRhLm5ld1N0YXJ0UG9pbnQmJmZlKCksb2U9ITEseGUoKTticmVhaztjYXNlInN0ZXBTaW11bGF0aW9uIjpIPW5ldyBGbG9hdDMyQXJyYXkodC5kYXRhLmRpY2VCdWZmZXIpLHhlKCk7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLmVycm9yKCJhY3Rpb24gbm90IGZvdW5kIGluIHBoeXNpY3Mgd29ya2VyIGZyb20gd29ybGRPZmZzY3JlZW4gd29ya2VyOiIsdC5kYXRhLmFjdGlvbil9fTticmVhaztkZWZhdWx0OmNvbnNvbGUuZXJyb3IoImFjdGlvbiBub3QgZm91bmQgaW4gcGh5c2ljcyB3b3JrZXI6IixfLmRhdGEuYWN0aW9uKX19O2NvbnN0IHZlPShfPUR0LmdyYXZpdHksdD1EdC5tYXNzKT0+Xz09PTA/MDpfK3QvMyxEZT0oXz1EdC5tYXNzKT0+MStfLzMsUmU9KF89RHQuc3BpbkZvcmNlLHQ9NDApPT5fL3QsU2U9KF89RHQudGhyb3dGb3JjZSx0PUR0Lm1hc3MsZD1EdC5zY2FsZSk9Pl8vMi90KigxK2QvNiksSWU9KF89RHQuc3RhcnRpbmdIZWlnaHQpPT5fPDE/MTpfLERsPWFzeW5jIF89Pnt0ZT1fLndpZHRoLGVlPV8uaGVpZ2h0LGZ0PXRlL2VlLHA9ey4uLnAsLi4uXy5vcHRpb25zfSxwLmdyYXZpdHk9dmUocC5ncmF2aXR5LHAubWFzcykscC5tYXNzPURlKHAubWFzcykscC5zcGluRm9yY2U9UmUocC5zcGluRm9yY2UpLHAudGhyb3dGb3JjZT1TZShwLnRocm93Rm9yY2UscC5tYXNzLHAuc2NhbGUpLHAuc3RhcnRpbmdIZWlnaHQ9SWUocC5zdGFydGluZ0hlaWdodCk7Y29uc3QgdD17bG9jYXRlRmlsZTooKT0+YCR7cC5vcmlnaW4rcC5hc3NldFBhdGh9YW1tby9hbW1vLndhc20ud2FzbWB9O2I9YXdhaXQgbmV3IHZsKHQpLEp0PW5ldyBiLmJ0VHJhbnNmb3JtLHllPW5ldyBiLmJ0VmVjdG9yMygwLDAsMCksaGU9eCgwLDAsMCksZmUoKSxxPXhsKCksYmUocC5zaXplLHAuc3RhcnRpbmdIZWlnaHQrMTApfSxSbD1fPT57cD17Li4ucCwuLi5ffSxfLm1hc3MmJihwLm1hc3M9RGUocC5tYXNzKSksKF8ubWFzc3x8Xy5ncmF2aXR5KSYmKHAuZ3Jhdml0eT12ZShwLmdyYXZpdHkscC5tYXNzKSksXy5zcGluRm9yY2UmJihwLnNwaW5Gb3JjZT1SZShwLnNwaW5Gb3JjZSkpLChfLnRocm93Rm9yY2V8fF8ubWFzc3x8Xy5zY2FsZSkmJihwLnRocm93Rm9yY2U9U2UocC50aHJvd0ZvcmNlLHAubWFzcyxwLnNjYWxlKSksXy5zdGFydGluZ0hlaWdodCYmSWUocC5zdGFydGluZ0hlaWdodCksQmUoKSxiZShwLnNpemUscC5zdGFydGluZ0hlaWdodCsxMCkscS5zZXRHcmF2aXR5KHgoMCwtOS44MSpwLmdyYXZpdHksMCkpLE9iamVjdC52YWx1ZXMoRnQpLm1hcCh0PT57dC5jb252ZXhIdWxsLnNldExvY2FsU2NhbGluZyh4KHQuc2NhbGluZ1swXSpwLnNjYWxlLHQuc2NhbGluZ1sxXSpwLnNjYWxlLHQuc2NhbGluZ1syXSpwLnNjYWxlKSl9KX0sU2w9YXN5bmMoe2NvbGxpZGVyczpfLG1lc2hOYW1lOnR9KT0+e2xldCBkPSExLFc9ITE7Xy5mb3JFYWNoKChmLHcpPT57RnRbdCsiXyIrZi5uYW1lXT1mLEZ0W3QrIl8iK2YubmFtZV0uY29udmV4SHVsbD1JbChmKSxXfHwoVz1mLmlkPT09ImQxMF9jb2xsaWRlciIpLGR8fChkPWYuaWQ9PT0iZDEwMF9jb2xsaWRlciIpfSksIWQmJlcmJihGdFtgJHt0fV9kMTAwX2NvbGxpZGVyYF09RnRbYCR7dH1fZDEwX2NvbGxpZGVyYF0pfSx4PShfLHQsZCk9Pih5ZS5zZXRWYWx1ZShfLHQsZCkseWUpLGZlPSgpPT57bGV0IF89cC5zaXplLHQ9LjUsZD1fKmZ0LzItdCxXPV8qZnQvLTIrdCxmPV8vMi10LHc9Xy8tMit0LFk9dnQoZCxXLE1hdGgucmFuZG9tKCkpLFU9dnQoZix3LE1hdGgucmFuZG9tKCkpLFY9TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKSx2PU1hdGgucm91bmQoTWF0aC5yYW5kb20oKSksQj1NYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkpO3Auc3RhcnRQb3NpdGlvbj1bQj9ZOnY/VzpkLHAuc3RhcnRpbmdIZWlnaHQsQj9WP3c6ZjpVXX0sSWw9Xz0+e2NvbnN0IHQ9bmV3IGIuYnRDb252ZXhIdWxsU2hhcGU7bGV0IGQ9Xy5wb3NpdGlvbnMubGVuZ3RoO2ZvcihsZXQgVz0wO1c8ZDtXKz0zKXtsZXQgZj14KF8ucG9zaXRpb25zW1ddLF8ucG9zaXRpb25zW1crMV0sXy5wb3NpdGlvbnNbVysyXSk7dC5hZGRQb2ludChmLCEwKX1yZXR1cm4gdC5zZXRMb2NhbFNjYWxpbmcoeChfLnNjYWxpbmdbMF0qcC5zY2FsZSxfLnNjYWxpbmdbMV0qcC5zY2FsZSxfLnNjYWxpbmdbMl0qcC5zY2FsZSkpLHR9LEJsPShfLHQpPT57Y29uc3R7bWFzczpkPS4xLGNvbGxpc2lvbkZsYWdzOlc9MCxwb3M6Zj1bMCwwLDBdLHF1YXQ6dz1bdnQoLTEuNSwxLjUsTWF0aC5yYW5kb20oKSksdnQoLTEuNSwxLjUsTWF0aC5yYW5kb20oKSksdnQoLTEuNSwxLjUsTWF0aC5yYW5kb20oKSksLTFdLHNjYWxlOlk9WzEsMSwxXSxmcmljdGlvbjpVPXAuZnJpY3Rpb24scmVzdGl0dXRpb246Vj1wLnJlc3RpdHV0aW9ufT10LHY9bmV3IGIuYnRUcmFuc2Zvcm07di5zZXRJZGVudGl0eSgpLHYuc2V0T3JpZ2luKHgoZlswXSxmWzFdLGZbMl0pKSx2LnNldFJvdGF0aW9uKG5ldyBiLmJ0UXVhdGVybmlvbih3WzBdLHdbMV0sd1syXSx3WzNdKSk7Y29uc3QgQj1uZXcgYi5idERlZmF1bHRNb3Rpb25TdGF0ZSh2KSx6PXgoMCwwLDApO2Q+MCYmXy5jYWxjdWxhdGVMb2NhbEluZXJ0aWEoZCx6KTtjb25zdCBtdD1uZXcgYi5idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8oZCxCLF8seiksRz1uZXcgYi5idFJpZ2lkQm9keShtdCk7cmV0dXJuIGQ+MCYmRy5zZXRBY3RpdmF0aW9uU3RhdGUoNCksRy5zZXRDb2xsaXNpb25GbGFncyhXKSxHLnNldEZyaWN0aW9uKFUpLEcuc2V0UmVzdGl0dXRpb24oViksRy5zZXREYW1waW5nKHAubGluZWFyRGFtcGluZyxwLmFuZ3VsYXJEYW1waW5nKSxHfTtsZXQgbWU9W107Y29uc3QgYmU9KF8sdCk9Pntjb25zdCBkPVtdLFc9eCgwLDAsMCksZj1uZXcgYi5idFRyYW5zZm9ybTtmLnNldElkZW50aXR5KCksZi5zZXRPcmlnaW4oeCgwLC0uNSwwKSk7Y29uc3Qgdz1uZXcgYi5idEJveFNoYXBlKHgoXypmdCwxLF8pKSxZPW5ldyBiLmJ0RGVmYXVsdE1vdGlvblN0YXRlKGYpLFU9bmV3IGIuYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvKDAsWSx3LFcpLFY9bmV3IGIuYnRSaWdpZEJvZHkoVSk7Vi5pZD0iYm94X2JvdHRvbSIsVi5zZXRGcmljdGlvbihwLmZyaWN0aW9uKSxWLnNldFJlc3RpdHV0aW9uKHAucmVzdGl0dXRpb24pLHEuYWRkUmlnaWRCb2R5KFYpLGQucHVzaChWKTtjb25zdCB2PW5ldyBiLmJ0VHJhbnNmb3JtO3Yuc2V0SWRlbnRpdHkoKSx2LnNldE9yaWdpbih4KDAsdC0uNSwwKSk7Y29uc3QgQj1uZXcgYi5idEJveFNoYXBlKHgoXypmdCwxLF8pKSx6PW5ldyBiLmJ0RGVmYXVsdE1vdGlvblN0YXRlKHYpLG10PW5ldyBiLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbygwLHosQixXKSxHPW5ldyBiLmJ0UmlnaWRCb2R5KG10KTtHLmlkPSJib3hfdG9wIixHLnNldEZyaWN0aW9uKHAuZnJpY3Rpb24pLEcuc2V0UmVzdGl0dXRpb24ocC5yZXN0aXR1dGlvbikscS5hZGRSaWdpZEJvZHkoRyksZC5wdXNoKEcpO2NvbnN0IFJ0PW5ldyBiLmJ0VHJhbnNmb3JtO1J0LnNldElkZW50aXR5KCksUnQuc2V0T3JpZ2luKHgoMCwwLF8vLTItLjUpKTtjb25zdCBudD1uZXcgYi5idEJveFNoYXBlKHgoXypmdCx0LDEpKSxZdD1uZXcgYi5idERlZmF1bHRNb3Rpb25TdGF0ZShSdCksYnQ9bmV3IGIuYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvKDAsWXQsbnQsVyksbHQ9bmV3IGIuYnRSaWdpZEJvZHkoYnQpO2x0LmlkPSJib3hfd2FsbF9ub3J0aCIsbHQuc2V0RnJpY3Rpb24ocC5mcmljdGlvbiksbHQuc2V0UmVzdGl0dXRpb24ocC5yZXN0aXR1dGlvbikscS5hZGRSaWdpZEJvZHkobHQpLGQucHVzaChsdCk7Y29uc3QgVnQ9bmV3IGIuYnRUcmFuc2Zvcm07VnQuc2V0SWRlbnRpdHkoKSxWdC5zZXRPcmlnaW4oeCgwLDAsXy8yKy41KSk7Y29uc3QgU3Q9bmV3IGIuYnRCb3hTaGFwZSh4KF8qZnQsdCwxKSksbmU9bmV3IGIuYnREZWZhdWx0TW90aW9uU3RhdGUoVnQpLFF0PW5ldyBiLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbygwLG5lLFN0LFcpLGd0PW5ldyBiLmJ0UmlnaWRCb2R5KFF0KTtndC5pZD0iYm94X3dhbGxfc291dGgiLGd0LnNldEZyaWN0aW9uKHAuZnJpY3Rpb24pLGd0LnNldFJlc3RpdHV0aW9uKHAucmVzdGl0dXRpb24pLHEuYWRkUmlnaWRCb2R5KGd0KSxkLnB1c2goZ3QpO2NvbnN0IEV0PW5ldyBiLmJ0VHJhbnNmb3JtO0V0LnNldElkZW50aXR5KCksRXQuc2V0T3JpZ2luKHgoXypmdC8tMi0uNSwwLDApKTtjb25zdCBYdD1uZXcgYi5idEJveFNoYXBlKHgoMSx0LF8pKSxOdD1uZXcgYi5idERlZmF1bHRNb3Rpb25TdGF0ZShFdCkscmU9bmV3IGIuYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvKDAsTnQsWHQsVyksSXQ9bmV3IGIuYnRSaWdpZEJvZHkocmUpO0l0LmlkPSJib3hfd2FsbF9lYXN0IixJdC5zZXRGcmljdGlvbihwLmZyaWN0aW9uKSxJdC5zZXRSZXN0aXR1dGlvbihwLnJlc3RpdHV0aW9uKSxxLmFkZFJpZ2lkQm9keShJdCksZC5wdXNoKEl0KTtjb25zdCBldD1uZXcgYi5idFRyYW5zZm9ybTtldC5zZXRJZGVudGl0eSgpLGV0LnNldE9yaWdpbih4KF8qZnQvMisuNSwwLDApKTtjb25zdCB6dD1uZXcgYi5idEJveFNoYXBlKHgoMSx0LF8pKSxfZT1uZXcgYi5idERlZmF1bHRNb3Rpb25TdGF0ZShldCksaWU9bmV3IGIuYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvKDAsX2UsenQsVyksTXQ9bmV3IGIuYnRSaWdpZEJvZHkoaWUpO010LmlkPSJib3hfd2FsbF93ZXN0IixNdC5zZXRGcmljdGlvbihwLmZyaWN0aW9uKSxNdC5zZXRSZXN0aXR1dGlvbihwLnJlc3RpdHV0aW9uKSxxLmFkZFJpZ2lkQm9keShNdCksZC5wdXNoKE10KSxtZS5sZW5ndGgmJkJlKCksbWU9Wy4uLmRdfSxCZT0oKT0+e21lLmZvckVhY2goXz0+cS5yZW1vdmVSaWdpZEJvZHkoXykpfSxPbD1fPT57dmFyIHo7Y29uc3R7c2lkZXM6dCxpZDpkLG1lc2hOYW1lOlcsc2NhbGU6Zn09XztsZXQgWT1gJHtOdW1iZXIuaXNJbnRlZ2VyKHQpP2BkJHt0fWA6dH1fY29sbGlkZXJgO2NvbnN0IFU9YCR7V31fJHtZfWAsdj0oKCh6PUZ0W1VdKT09bnVsbD92b2lkIDA6ei5waHlzaWNzTWFzcyl8fC4xKSpwLm1hc3MqcC5zY2FsZSxCPUJsKEZ0W1VdLmNvbnZleEh1bGwse21hc3M6dixzY2FsaW5nOkZ0W1VdLnNjYWxpbmcscG9zOnAuc3RhcnRQb3NpdGlvbn0pO3JldHVybiBCLmlkPWQsQi50aW1lb3V0PXAuc2V0dGxlVGltZW91dCxCLm1hc3M9dixxLmFkZFJpZ2lkQm9keShCKSxIdC5wdXNoKEIpLEJ9LGdlPV89PntfLnNldExpbmVhclZlbG9jaXR5KHgodnQoLXAuc3RhcnRQb3NpdGlvblswXSouNSwtcC5zdGFydFBvc2l0aW9uWzBdKnAudGhyb3dGb3JjZSxNYXRoLnJhbmRvbSgpKSx2dCgtcC5zdGFydFBvc2l0aW9uWzFdLC1wLnN0YXJ0UG9zaXRpb25bMV0qMixNYXRoLnJhbmRvbSgpKSx2dCgtcC5zdGFydFBvc2l0aW9uWzJdKi41LC1wLnN0YXJ0UG9zaXRpb25bMl0qcC50aHJvd0ZvcmNlLE1hdGgucmFuZG9tKCkpKSk7Y29uc3QgdD1NYXRoLnJhbmRvbSgpPi41PzE6LTEsZD12dChwLnNwaW5Gb3JjZSouNSxwLnNwaW5Gb3JjZSxNYXRoLnJhbmRvbSgpKSxXPW5ldyBiLmJ0VmVjdG9yMyhkKnQsZCotdCxkKnQpLGY9TWF0aC5hYnMocC5zY2FsZS0xKStwLnNjYWxlKnAuc2NhbGUqKF8ubWFzcy9wLm1hc3MpKi43NTtfLmFwcGx5SW1wdWxzZShXLHgoZixmLGYpKX0sT2U9Xz0+e1p0PVp0LmZpbHRlcih0PT57bGV0IGQ9dC5pZD09PV87cmV0dXJuIGQmJnEucmVtb3ZlUmlnaWRCb2R5KHQpLCFkfSl9LFBsPSgpPT57SC5ieXRlTGVuZ3RoJiZILmZpbGwoMCksb2U9ITAsSHQuZm9yRWFjaChfPT5xLnJlbW92ZVJpZ2lkQm9keShfKSksWnQuZm9yRWFjaChfPT5xLnJlbW92ZVJpZ2lkQm9keShfKSksSHQ9W10sWnQ9W119LHhsPSgpPT57Y29uc3QgXz1uZXcgYi5idERlZmF1bHRDb2xsaXNpb25Db25maWd1cmF0aW9uLHQ9bmV3IGIuYnREYnZ0QnJvYWRwaGFzZSxkPW5ldyBiLmJ0U2VxdWVudGlhbEltcHVsc2VDb25zdHJhaW50U29sdmVyLFc9bmV3IGIuYnRDb2xsaXNpb25EaXNwYXRjaGVyKF8pLGY9bmV3IGIuYnREaXNjcmV0ZUR5bmFtaWNzV29ybGQoVyx0LGQsXyk7cmV0dXJuIGYuc2V0R3Jhdml0eSh4KDAsLTkuODEqcC5ncmF2aXR5LDApKSxmfSxUbD1fPT57Y29uc3QgdD1fLzFlMztxLnN0ZXBTaW11bGF0aW9uKHQsMiwxLzkwKSxIWzBdPUh0Lmxlbmd0aDtjb25zdCBkPXEuZ2V0RGlzcGF0Y2hlcigpLmdldE51bU1hbmlmb2xkcygpO2ZvcihsZXQgVz0wO1c8ZDtXKyspe2NvbnN0IGY9cS5nZXREaXNwYXRjaGVyKCkuZ2V0TWFuaWZvbGRCeUluZGV4SW50ZXJuYWwoVyksdz1iLmNhc3RPYmplY3QoZi5nZXRCb2R5MCgpLGIuYnRSaWdpZEJvZHkpLFk9Yi5jYXN0T2JqZWN0KGYuZ2V0Qm9keTEoKSxiLmJ0UmlnaWRCb2R5KSxVPXcuaWQsVj1ZLmlkO2xldCB2PTA7Y29uc3QgQj1mLmdldE51bUNvbnRhY3RzKCk7Zm9yKGxldCB6PTA7ejxCO3orKyl7Y29uc3QgbXQ9Zi5nZXRDb250YWN0UG9pbnQoeik7aWYobXQuZ2V0RGlzdGFuY2UoKTwwKXtjb25zdCBHPW10LmdldF9tX25vcm1hbFdvcmxkT25CKCksUnQ9dy5nZXRMaW5lYXJWZWxvY2l0eSgpLG50PVkuZ2V0TGluZWFyVmVsb2NpdHkoKSxZdD1uZXcgYi5idFZlY3RvcjM7WXQuc2V0VmFsdWUoUnQueCgpLW50LngoKSxSdC55KCktbnQueSgpLFJ0LnooKS1udC56KCkpO2NvbnN0IGJ0PUcuZG90KFl0KTt2Kz1NYXRoLmFicyhidCl9fXY+MCYmc2VsZi5wb3N0TWVzc2FnZSh7YWN0aW9uOiJjb2xsaXNpb24iLGJvZHkwSWQ6VSxib2R5MUlkOlYsZm9yY2U6dn0pfWZvcihsZXQgVz1IdC5sZW5ndGgtMTtXPj0wO1ctLSl7Y29uc3QgZj1IdFtXXSx3PWYuZ2V0TGluZWFyVmVsb2NpdHkoKS5sZW5ndGgoKSxZPWYuZ2V0QW5ndWxhclZlbG9jaXR5KCkubGVuZ3RoKCk7aWYodzwuMDEmJlk8LjAwNXx8Zi50aW1lb3V0PDApe0hbVyo4KzFdPWYuaWQsSFtXKjgrMl09LTEsZi5hc2xlZXA9ITAsZi5zZXRNYXNzUHJvcHMoMCksZi5mb3JjZUFjdGl2YXRpb25TdGF0ZSgzKSxmLnNldExpbmVhclZlbG9jaXR5KGhlKSxmLnNldEFuZ3VsYXJWZWxvY2l0eShoZSksWnQucHVzaChIdC5zcGxpY2UoVywxKVswXSk7Y29udGludWV9Zi50aW1lb3V0LT1fO2NvbnN0IFU9Zi5nZXRNb3Rpb25TdGF0ZSgpO2lmKFUpe1UuZ2V0V29ybGRUcmFuc2Zvcm0oSnQpO2xldCBWPUp0LmdldE9yaWdpbigpLHY9SnQuZ2V0Um90YXRpb24oKSxCPVcqOCsxO0hbQl09Zi5pZCxIW0IrMV09Vi54KCksSFtCKzJdPVYueSgpLEhbQiszXT1WLnooKSxIW0IrNF09di54KCksSFtCKzVdPXYueSgpLEhbQis2XT12LnooKSxIW0IrN109di53KCl9fX07bGV0IFBlPW5ldyBEYXRlKCkuZ2V0VGltZSgpO2NvbnN0IHhlPSgpPT57bGV0IF89bmV3IERhdGUoKS5nZXRUaW1lKCk7Y29uc3QgdD1fLVBlO1BlPV8sIW9lJiZILmJ5dGVMZW5ndGgmJihUbCh0KSxjZS5wb3N0TWVzc2FnZSh7YWN0aW9uOiJ1cGRhdGVzIixkaWNlQnVmZmVyOkguYnVmZmVyfSxbSC5idWZmZXJdKSl9fSkoKTsK", Xl = typeof window < "u" && window.Blob && new Blob([atob(ml)], { type: "text/javascript;charset=utf-8" });
function il() {
  let c;
  try {
    if (c = Xl && (window.URL || window.webkitURL).createObjectURL(Xl), !c)
      throw "";
    return new Worker(c);
  } catch {
    return new Worker("data:application/javascript;base64," + ml);
  } finally {
    c && (window.URL || window.webkitURL).revokeObjectURL(c);
  }
}
const al = (c) => {
  let l;
  return function() {
    let b = this, d = arguments;
    l && window.cancelAnimationFrame(l), l = window.requestAnimationFrame(function() {
      c.apply(b, d);
    });
  };
}, hl = (c = { dedupe: !1 }) => {
  const { dedupe: l } = c;
  let b = [], d;
  const X = (m) => (l && (b = []), b.push(m), d || (d = Z()), d.finally(() => {
    d = void 0;
  })), Z = async () => {
    const m = [];
    for (; b.length; ) {
      const V = b.shift();
      m.push(await V());
    }
    return m;
  };
  return { push: X, queue: b, flush: () => d || Promise.resolve([]) };
}, yl = (c) => JSON.parse(JSON.stringify(c));
class Zl {
  /**
   * Generate a random number between 0 (inclusive) and 1 (exclusive).
   * A drop in replacement for Math.random()
   * @return {number}
   */
  static value() {
    const l = window.crypto || window.msCrypto, b = new Uint32Array(1);
    return l.getRandomValues(b)[0] / 2 ** 32;
  }
  /**
   * Generate a very good random number between min (inclusive) and max (exclusive) by using crypto.getRandomValues() twice.
   * @param  {number} min
   * @param  {number} max
   * @return {number}
   */
  static range(l, b) {
    return Math.floor(Math.pow(10, 14) * this.value() * this.value()) % (b - l + 1) + l;
  }
}
const nl = (c) => {
  let l = !1, b = c.slice(c.startsWith("#") ? 1 : 0);
  b.length === 3 ? b = [...b].map((X) => X + X).join("") : b.length === 8 && (l = !0), b = parseInt(b, 16);
  let d = {
    r: b >>> 16,
    g: (b & 65280) >>> 8,
    b: b & 255
  };
  return l && (d.r = b >>> 24, d.g = (b & 16711680) >>> 16, d.b = (b & 65280) >>> 8, d.a = b & 255), d;
};
function pl() {
  try {
    const c = document.createElement("canvas");
    return !!window.WebGLRenderingContext && (c.getContext("webgl") || c.getContext("experimental-webgl"));
  } catch {
    return !1;
  }
}
const sl = {
  id: `dice-canvas-${Date.now()}`,
  // set the canvas id
  container: null,
  enableShadows: !0,
  // do dice cast shadows onto DiceBox mesh?
  shadowTransparency: 0.8,
  lightIntensity: 1,
  delay: 10,
  // delay between dice being generated - 0 causes stuttering and physics popping
  scale: 5,
  // scale the dice
  theme: "default",
  // can be a hex color or a pre-defined theme such as 'purpleRock'
  preloadThemes: [],
  externalThemes: {},
  // point to CDN paths
  themeColor: "#2e8555",
  // used for color values or named theme variants - not fully implemented yet // green: #2e8555 // yellow: #feea03
  offscreen: !0,
  // use offscreen canvas browser feature for performance improvements - will fallback to false based on feature detection
  assetPath: "/assets/dice-box/",
  // path to 'ammo', 'themes' folders and web workers
  // origin: location.origin,
  origin: typeof window < "u" ? window.location.origin : "",
  suspendSimulation: !1
};
var f, x, C, w, u, B, U, a, K, k, y, I, cl, E, Gl, T, Wl, Q, D, P, r;
class vl {
  constructor(l = {}) {
    // Load the BabylonJS World
    J(this, I);
    // Load the AmmoJS physics world
    J(this, E);
    J(this, T);
    // used by both .add and .roll - .roll clears the box and .add does not
    J(this, Q);
    J(this, P);
    F(this, "rollCollectionData", {});
    F(this, "rollGroupData", {});
    F(this, "rollDiceData", {});
    F(this, "themeData", []);
    F(this, "themesLoadedData", {});
    J(this, f, 0);
    J(this, x, 0);
    J(this, C, 0);
    J(this, w, 0);
    J(this, u, {});
    J(this, B, void 0);
    J(this, U, void 0);
    J(this, a, void 0);
    J(this, K, void 0);
    J(this, k, void 0);
    J(this, y, !0);
    F(this, "noop", () => {
    });
    if (arguments.length === 2 && typeof (arguments[0] === "string") && typeof (arguments[1] === "object") && (console.warn("You are using the old API. Dicebox constructor accepts a config object as it's only argument. Please read the v1.1.0 docs at https://fantasticdice.games/docs/usage/config"), l = arguments[1], l.container = arguments[0]), typeof l != "object")
      throw new Error("Config options should be an object. Config reference: https://fantasticdice.games/docs/usage/config#configuration-options");
    const { onCollision: b, onBeforeRoll: d, onDieComplete: X, onRollComplete: Z, onRemoveComplete: m, onThemeConfigLoaded: V, onThemeLoaded: G, onDieClick: Y, ...R } = l;
    this.config = { ...sl, ...R }, this.onBeforeRoll = l.onBeforeRoll || this.noop, this.onDieComplete = l.onDieComplete || this.noop, this.onRollComplete = l.onRollComplete || this.noop, this.onRemoveComplete = l.onRemoveComplete || this.noop, this.onThemeLoaded = l.onThemeLoaded || this.noop, this.onThemeConfigLoaded = l.onThemeConfigLoaded || this.noop, this.onCollision = l.onCollision || this.noop, this.onDieClick = l.onDieClick || this.noop, pl() ? (this.canvas = Jl({
      selector: this.config.container,
      id: this.config.id
    }), this.isVisible = !0) : i(this, y, !1), this.loadThemeQueue = hl();
  }
  resizeWorld() {
    const b = al(() => {
      W(this, u).resize({ width: this.canvas.clientWidth, height: this.canvas.clientHeight }), W(this, a) && W(this, a).postMessage({ action: "resize", width: this.canvas.clientWidth, height: this.canvas.clientHeight });
    });
    window.addEventListener("resize", b);
  }
  async init() {
    return W(this, y) ? v(this, E, Gl).call(this) : i(this, K, Promise.resolve()), await v(this, I, cl).call(this), this.resizeWorld(), W(this, u).onRollResult = (l) => {
      const b = this.rollDiceData[l.rollId], d = this.rollGroupData[b.groupId], X = this.rollCollectionData[b.collectionId];
      d.rolls[b.rollId].value = l.value, X.completedRolls++, X.completedRolls == X.rolls.length && X.resolve(Object.values(X.rolls).map(({ collectionId: G, id: Y, meshName: R, ...N }) => N));
      const { collectionId: Z, id: m, ...V } = b;
      this.onDieComplete(V);
    }, W(this, u).onRollComplete = () => {
      this.onRollComplete(this.getRollResults());
    }, W(this, u).onDieRemoved = (l) => {
      let b = this.rollDiceData[l];
      const d = this.rollCollectionData[b.removeCollectionId];
      d.completedRolls++, delete this.rollDiceData[b.rollId];
      const X = this.rollGroupData[b.groupId];
      delete X.rolls[b.rollId];
      const Z = v(this, P, r).call(this, b.groupId);
      X.value = Z.value, X.qty = Z.rollsArray.length, d.completedRolls == d.rolls.length && d.resolve(Object.values(d.rolls).map(({ id: N, ...L }) => L));
      const { collectionId: m, id: V, removeCollectionId: G, meshName: Y, ...R } = b;
      this.onRemoveComplete(R);
    }, await Promise.all([W(this, B), W(this, K)]), W(this, a) && v(this, T, Wl).call(this), await this.loadThemeQueue.push(() => this.loadTheme(this.config.theme)), this.config.preloadThemes.forEach((async function(l) {
      await this.loadThemeQueue.push(() => this.loadTheme(l));
    }).bind(this)), this;
  }
  // fetch the theme config and return a themeData object
  async getThemeConfig(l) {
    let b = `${this.config.origin}${this.config.assetPath}themes/${l}`;
    this.config.externalThemes[l] && (b = this.config.externalThemes[l]);
    let d = await fetch(`${b}/theme.config.json`).then((m) => {
      if (m.ok) {
        const V = m.headers.get("content-type");
        if (V && V.indexOf("application/json") !== -1)
          return m.json();
        if (m.type && m.type === "basic")
          return m.json();
        throw new Error(`Incorrect contentType: ${V}. Expected "application/json" or "basic"`);
      } else
        throw new Error(`Unable to fetch config file for theme: '${l}'. Request rejected with status ${m.status}: ${m.statusText}`);
    }).catch((m) => console.error(m));
    if (!d)
      throw new Error("No theme config data to work with.");
    let X = "default", Z = `${this.config.origin}${this.config.assetPath}themes/default/default.json`;
    if (d.hasOwnProperty("meshFile") && (X = d.meshFile.replace(/(.*)\..{2,4}$/, "$1"), Z = `${b}/${d.meshFile}`), !d.hasOwnProperty("diceAvailable"))
      throw new Error('A theme must indicate which dice are available by defining "diceAvailable".');
    if (d.hasOwnProperty("extends")) {
      const m = await this.loadTheme(d.extends).catch((G) => console.error(G));
      if (m.hasOwnProperty("extends"))
        throw new Error("Cannot extend a theme that extends another theme.");
      const V = {};
      d.diceAvailable.forEach((G) => {
        V[G] = d.systemName;
      }), m.diceExtended = { ...m.diceExtended, ...V }, this.config.theme = d.extends;
    }
    return Object.assign(
      d,
      {
        basePath: b,
        meshFilePath: Z,
        meshName: X,
        theme: l
      }
    ), d;
  }
  async loadTheme(l) {
    if (this.themesLoadedData[l])
      return this.themesLoadedData[l];
    const b = this.themesLoadedData[l] = await this.getThemeConfig(l).catch((d) => console.error(d));
    if (this.onThemeConfigLoaded(b), !!b)
      return await W(this, u).loadTheme(b).catch((d) => console.error(d)), this.onThemeLoaded(b), b;
  }
  // TODO: use getter and setter
  // change config options
  async updateConfig(l) {
    const b = { ...this.config, ...l };
    if (this.config = b, b.theme) {
      const X = (await this.loadThemeQueue.push(() => this.loadTheme(b.theme))).at(-1);
      X.hasOwnProperty("extends") && (this.config.theme = X.extends);
    }
    return W(this, u).updateConfig(b), W(this, a) && W(this, a).postMessage({
      action: "updateConfig",
      options: b
    }), this;
  }
  clear() {
    return i(this, f, 0), i(this, x, 0), i(this, C, 0), i(this, w, 0), this.rollCollectionData = {}, this.rollGroupData = {}, this.rollDiceData = {}, W(this, u).clear(), W(this, a) && W(this, a).postMessage({ action: "clearDice" }), this;
  }
  hide(l) {
    return l ? (this.canvas.dataset.hideClass = l, this.canvas.classList.add(l)) : this.canvas.style.display = "none", this.isVisible = !1, this;
  }
  show() {
    var b;
    const l = (b = this.canvas.dataset) == null ? void 0 : b.hideClass;
    return l ? (delete this.canvas.dataset.hideClass, this.canvas.classList.remove(l)) : this.canvas.style.display = "block", this.isVisible = !0, this.resizeWorld(), this;
  }
  // TODO: pass data with roll - such as roll name. Passed back at the end in the results
  roll(l, { theme: b = this.config.theme, themeColor: d = this.config.themeColor, newStartPoint: X = !0 } = {}) {
    this.clear();
    const Z = H(this, f)._++;
    this.rollCollectionData[Z] = new M({
      id: Z,
      notation: l,
      theme: b,
      themeColor: d,
      newStartPoint: X
    });
    const m = this.createNotationArray(l, this.themesLoadedData[b].diceAvailable);
    return v(this, Q, D).call(this, m, Z), this.rollCollectionData[Z].promise;
  }
  add(l, { theme: b = this.config.theme, themeColor: d = this.config.themeColor, newStartPoint: X = !0 } = {}) {
    const Z = H(this, f)._++;
    this.rollCollectionData[Z] = new M({
      id: Z,
      notation: l,
      theme: b,
      themeColor: d,
      newStartPoint: X
    });
    const m = this.createNotationArray(l, this.themesLoadedData[b].diceAvailable);
    return v(this, Q, D).call(this, m, Z), this.rollCollectionData[Z].promise;
  }
  reroll(l, { remove: b = !1, hide: d = !1, newStartPoint: X = !0 } = {}) {
    const m = (Array.isArray(l) ? l : [l]).map(({ value: V, ...G }) => G);
    return b === !0 && this.remove(m, { hide: d }), this.add(m, { newStartPoint: X });
  }
  remove(l, { hide: b = !1 } = {}) {
    const d = Array.isArray(l) ? l : [l], X = H(this, f)._++;
    return this.rollCollectionData[X] = new M({
      id: X,
      notation: l,
      rolls: d
    }), d.map((Z) => {
      this.rollDiceData[Z.rollId].removeCollectionId = X;
      let m = this.rollDiceData[Z.rollId].id;
      W(this, u).remove({ id: m, rollId: Z.rollId }), W(this, a) && W(this, a).postMessage({ action: "removeDie", id: m });
    }), this.rollCollectionData[X].promise;
  }
  // accepts simple notations eg: 4d6
  // accepts array of notations eg: ['4d6','2d10']
  // accepts object {sides:int, qty:int}
  // accepts array of objects eg: [{sides:int, qty:int, mods:[]}]
  createNotationArray(l, b) {
    const d = Array.isArray(l) ? l : [l];
    let X = [];
    const Z = (G) => {
      if (G.hasOwnProperty("qty") || (G.qty = 1), G.hasOwnProperty("sides"))
        return G.sides === "100" && (G.sides = 100, G.data = "single"), !0;
      {
        const Y = "Roll notation is missing sides";
        throw new Error(Y);
      }
    }, m = (G) => {
      G = G.toString();
      let Y = G.split(".");
      return Y[1] ? Y[1] = parseInt(Y[1]) + 1 : Y[1] = 1, Y[0] + "." + Y[1];
    }, V = (G) => {
      G.hasOwnProperty("rollId") && this.rollDiceData.hasOwnProperty(G.rollId) && (G.rollId = m(G.rollId)), G.hasOwnProperty("modifier") || (G.modifier = 0);
    };
    return d.forEach((G) => {
      typeof G == "string" ? X.push(this.parse(G, b)) : typeof d == "object" && (V(G), Z(G) && X.push(G));
    }), X;
  }
  // parse text die notation such as 2d10+3 => {number:2, type:6, modifier:3}
  // taken from https://github.com/ChapelR/dice-notation
  parse(l, b) {
    const d = /(\d+)([dD]{1}\d+)(.*)$/i, X = /(\d+)[dD](00|%)(.*)$/i, Z = /(\d+)[dD](f+[ate]*)(.*)$/i, m = /(\d+)[dD]([\d\w]+)([+-]{0,1}\d+)?/i, V = /([+-])(\d+)/, G = l.trim().replace(/\s+/g, ""), Y = (h, S) => {
      if (h = Number(h), Number.isNaN(h) || !Number.isInteger(h) || h < 1)
        throw new Error(S);
      return h;
    }, R = G.match(X) || G.match(d) || G.match(Z) || G.match(m);
    let N = 0;
    const L = "Invalid notation: " + l;
    if (!R || !R.length || R.length < 3)
      throw new Error(L);
    if (R[3] && V.test(R[3])) {
      const h = R[3].match(V);
      let S = Y(h[2], L);
      h[1].trim() === "-" && (S *= -1), N = S;
    }
    const s = {
      qty: Y(R[1], L),
      modifier: N
    };
    return G.match(X) ? (s.sides = "d100", s.data = "single") : G.match(Z) ? s.sides = "fate" : (b.includes(G.match(m)[2]), s.sides = R[2]), s;
  }
  getRollResults() {
    return Object.entries(this.rollGroupData).map(([l, b]) => {
      const d = v(this, P, r).call(this, l);
      b.value = d.value, b.qty = d.rollsArray.length;
      const X = { ...b };
      return X.rolls = d.rollsArray, X;
    });
  }
}
f = new WeakMap(), x = new WeakMap(), C = new WeakMap(), w = new WeakMap(), u = new WeakMap(), B = new WeakMap(), U = new WeakMap(), a = new WeakMap(), K = new WeakMap(), k = new WeakMap(), y = new WeakMap(), I = new WeakSet(), cl = async function() {
  i(this, B, new Promise((b, d) => {
    i(this, U, b);
  }));
  const l = () => {
    W(this, U).call(this);
  };
  if (W(this, y))
    if ("OffscreenCanvas" in window && "transferControlToOffscreen" in this.canvas && this.config.offscreen) {
      const b = await import("./world.offscreen.js").then((d) => d.default);
      i(this, u, new b({
        canvas: this.canvas,
        options: this.config,
        onInitComplete: l
      }));
    } else {
      this.config.offscreen && (console.warn("This browser does not support OffscreenCanvas. Using standard canvas fallback."), this.config.offscreen = !1);
      const b = await import("./world.onscreen.js").then((d) => d.default);
      i(this, u, new b({
        canvas: this.canvas,
        options: this.config,
        onDieClick: this.onDieClick,
        onInitComplete: l
      }));
    }
  else {
    console.warn("This browser does not support WebGL which is required for 3D rendering. Falling back to random number generator");
    const b = await import("./world.none.js").then((d) => d.default);
    i(this, u, new b({
      canvas: this.canvas,
      options: this.config,
      onInitComplete: l
    }));
  }
}, E = new WeakSet(), Gl = function() {
  i(this, a, new il()), i(this, K, new Promise((l, b) => {
    i(this, k, l);
  })), W(this, a).onmessage = (l) => {
    switch (l.data.action) {
      case "init-complete":
        W(this, k).call(this);
        break;
      case "collision":
        this.onCollision && this.onCollision(l.data.body0Id, l.data.body1Id, l.data.force);
        break;
    }
  }, W(this, a).postMessage({
    action: "init",
    width: this.canvas.clientWidth,
    height: this.canvas.clientHeight,
    options: this.config
  });
}, T = new WeakSet(), Wl = function() {
  const l = new MessageChannel();
  W(this, u).connect(l.port1), W(this, a).postMessage({
    action: "connect"
  }, [l.port2]);
}, Q = new WeakSet(), D = async function(l, b) {
  this.onBeforeRoll(l);
  const d = this.rollCollectionData[b];
  let X = d.newStartPoint;
  l.forEach(async (Z) => {
    var q, $, _, ll, bl, dl;
    if (!Z.sides)
      throw new Error("Improper dice notation or unable to parse notation");
    let m = Z.theme || d.theme || this.config.theme;
    const V = Z.themeColor || d.themeColor || this.config.themeColor, G = {}, Y = Z.groupId !== void 0;
    let R;
    const N = () => this.loadTheme(m);
    await this.loadThemeQueue.push(N);
    let L = this.themesLoadedData[m].meshName, s = (q = this.themesLoadedData[m]) == null ? void 0 : q.diceAvailable, h = this.themesLoadedData[m].diceExtended || {}, S = (_ = ($ = this.themesLoadedData[m]) == null ? void 0 : $.material) == null ? void 0 : _.type;
    const t = Object.keys(h);
    if (t && t.includes(Z.sides)) {
      m = h[Z.sides];
      const e = () => this.loadTheme(m);
      this.loadThemeQueue.push(e), L = this.themesLoadedData[m].meshName, s = (ll = this.themesLoadedData[m]) == null ? void 0 : ll.diceAvailable, S = (dl = (bl = this.themesLoadedData[m]) == null ? void 0 : bl.material) == null ? void 0 : dl.type;
    }
    let A = "", j;
    S === "color" && (j = nl(V), A = j.r * 0.299 + j.g * 0.587 + j.b * 0.114 > 175 ? "_dark" : "_light");
    for (var O = 0, Vl = Z.qty; O < Vl; O++) {
      let e = Z.rollId !== void 0 ? Z.rollId : H(this, C)._++, Rl = Z.id !== void 0 ? Z.id : H(this, w)._++;
      R = Y ? Z.groupId : W(this, x);
      const o = Number.isInteger(Z.sides) ? `d${Z.sides}` : Z.sides;
      /^d[1-9]{1}[0-9]{0,1}0?$/.test(Z.sides) && (Z.sides = parseInt(Z.sides.replace("d", "")));
      const n = {
        sides: Z.sides,
        data: Z.data,
        dieType: o,
        groupId: R,
        collectionId: d.id,
        rollId: e,
        id: Rl,
        theme: m,
        themeColor: V,
        meshName: L
      };
      if (G[e] = n, this.rollDiceData[e] = n, d.rolls.push(this.rollDiceData[e]), n.sides === "fate" && !s.includes(o) && !t.includes(o) || n.sides === "fate" && !W(this, y)) {
        console.warn(`fate die unavailable in '${m}' theme. Using fallback.`);
        const p = -1, z = 1;
        n.value = Zl.range(p, z), W(this, u).addNonDie(n);
      } else if (this.config.suspendSimulation || !s.includes(o) && !t.includes(o) || !W(this, y)) {
        const p = W(this, y) ? this.config.suspendSimulation ? "3D simulation suspended. Using fallback." : `${n.sides} die unavailable in '${m}' theme. Using fallback.` : "This browser does not support webGL. Using random number fallback.";
        console.warn(p);
        const z = Number.isInteger(n.sides) ? n.sides : parseInt(n.sides.replace(/\D/g, ""));
        n.value = Zl.range(1, z), W(this, u).addNonDie(n);
      } else {
        let p;
        if (t.includes(o)) {
          const z = h[o];
          p = this.themesLoadedData[z];
        }
        W(this, u).add({
          ...n,
          newStartPoint: X,
          theme: (p == null ? void 0 : p.systemName) || m,
          meshName: (p == null ? void 0 : p.meshName) || L,
          colorSuffix: A
        });
      }
      X = !1;
    }
    Y ? Object.assign(this.rollGroupData[R].rolls, G) : (Z.rolls = G, Z.id = R, this.rollGroupData[R] = Z, ++H(this, x)._);
  });
}, P = new WeakSet(), r = function(l) {
  const b = this.rollGroupData[l], d = Object.values(b.rolls).map(({ collectionId: Z, id: m, meshName: V, ...G }) => G);
  let X = d.reduce((Z, m) => {
    const V = isNaN(m.value) ? 0 : m.value;
    return Z + V;
  }, 0);
  return X += b.modifier ? b.modifier : 0, { value: X, rollsArray: d };
};
class M {
  constructor(l) {
    Object.assign(this, l), this.rolls = l.rolls || [], this.completedRolls = 0;
    const b = this;
    this.promise = new Promise((d, X) => {
      b.resolve = d, b.reject = X;
    });
  }
}
export {
  yl as d,
  vl as default
};
//# sourceMappingURL=dice-box.es.js.map
